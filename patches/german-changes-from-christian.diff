Index: src/namebase.h
===================================================================
--- src/namebase.h	(revision 3386)
+++ src/namebase.h	(working copy)
@@ -33,8 +33,8 @@
 const uint NUM_NAME_TYPES = 4;
 
 const char NAME_TYPE_STRING [NUM_NAME_TYPES][8] = {
-    "player",
-    "event",
-    "site",
-    "round"
+    "Spieler",
+    "Turnier",
+    "Ort",
+    "Runde"
 };
Index: src/pgnparse.cpp
===================================================================
--- src/pgnparse.cpp	(revision 3386)
+++ src/pgnparse.cpp	(working copy)
@@ -376,7 +376,7 @@
             value[length-7] = 0;
             elo = strGetUnsigned (&(value[length-5]));
             if (elo > MAX_ELO) {
-                LogError ("Warning: rating too large: ", value);
+                LogError ("Warnung: Rating zu groß: ", value);
                 elo = MAX_ELO;
             }
             game->SetWhiteElo (elo);
@@ -398,7 +398,7 @@
             value[length-7] = 0;
             elo = strGetUnsigned (&(value[length-5]));
             if (elo > MAX_ELO) {
-                LogError ("Warning: rating too large: ", value);
+                LogError ("Warnung: Rating zu groß: ", value);
                 elo = MAX_ELO;
             }
             game->SetBlackElo (elo);
@@ -443,7 +443,7 @@
 
     } else if (strEqual (tag, "FEN")) {
         if (game->SetStartFen (value) != OK) {
-            LogError ("Error: Invalid FEN: ", value);
+            LogError ("Fehler: ungültige FEN: ", value);
             return ERROR_InvalidFEN;
         }
 
@@ -461,7 +461,7 @@
                 if (strEqual (tagSuffix, ratingTypeNames[i])) {
                     uint elo = strGetUnsigned (value);
                     if (elo > MAX_ELO) {
-                        LogError ("Warning: rating too large: ", value);
+                        LogError ("Warnung: Rating zu groß: ", value);
                         elo = MAX_ELO;
                     }
                     game->SetWhiteElo (elo);
@@ -479,7 +479,7 @@
                 if (strEqual (tagSuffix, ratingTypeNames[i])) {
                     uint elo = strGetUnsigned (value);
                     if (elo > MAX_ELO) {
-                        LogError ("Warning: rating too large: ", value);
+                        LogError ("Warnung: Rating zu groß: ", value);
                         elo = MAX_ELO;
                     }
                     game->SetBlackElo (elo);
@@ -526,8 +526,8 @@
     *outPtr = 0; // must be nul-terminated
     if (ch == EndChar) {
         char tempStr[80];
-        sprintf (tempStr, "started on line %u\n", startLine);
-        LogError ("Error: Open Comment at end of input", tempStr);
+        sprintf (tempStr, "gestartet in Zeile %u\n", startLine);
+        LogError ("Fehler: offener Kommentar am Eingabeende", tempStr);
     }
     if (CharDetector)
         CharDetector->detect(buffer, outPtr - buffer);
@@ -1087,10 +1087,10 @@
                 // worked, but still print a warning about it:
                 if (err == OK) {
                     char tempStr[500];
-                    snprintf (tempStr, sizeof(tempStr), "(%s) in game %s - %s, %u",
+                    snprintf (tempStr, sizeof(tempStr), "(%s) in Partie %s - %s, %u",
                              buffer, game->GetWhiteStr(), game->GetBlackStr(),
                              date_GetYear (game->GetDate()));
-                    LogError ("Warning: illegal castling ", tempStr);
+                    LogError ("Warnung: ungültige Rochade ", tempStr);
                 }
             }
 
@@ -1104,9 +1104,9 @@
                 if (moveErrorCount <= maxMoveErrorsPerGame) {
                     char tempStr [500];
                     // Add an error comment to the game:
-                    snprintf (tempStr, sizeof(tempStr), "Error reading move: %s", buffer);
+                    snprintf (tempStr, sizeof(tempStr), "Fehler beim Lesen des Zuges: %s", buffer);
                     game->AppendMoveComment (tempStr);
-                    snprintf (tempStr, sizeof(tempStr), "Error reading move in game %s - %s, %u: ",
+                    snprintf (tempStr, sizeof(tempStr), "Fehler beim Lesen des Zuges in Partie %s - %s, %u: ",
                              game->GetWhiteStr(), game->GetBlackStr(),
                              date_GetYear (game->GetDate()));
                     LogError (tempStr, buffer);
@@ -1128,7 +1128,7 @@
         case TOKEN_Suffix:
             nag = game_parseNag (buffer);
             if (nag == 0) {
-                LogError ("Warning: Invalid annotation symbol: ", buffer);
+                LogError ("Warnung: ungültiges Kommentarsymbol: ", buffer);
             } else {
                 if (moveErrorCount == 0) {
                     game->AddNag (nag);
@@ -1138,7 +1138,7 @@
 
         case TOKEN_VarStart:
             if (game->AddVariation() != OK) {
-                LogError ("Error: Unable to add variation", "");
+                LogError ("Fehler: Variante kann nicht hinzugefügt werden", "");
                 return ERROR_Game;
             }
             break;
@@ -1166,7 +1166,7 @@
                 snprintf (tempStr, sizeof(tempStr), " in game %s - %s, %u: ",
                     game->GetWhiteStr(), game->GetBlackStr(),
                     date_GetYear (game->GetDate()));
-                LogError ("Warning: \"}\" seen outside a comment", tempStr);
+                LogError ("Warnung: \"}\" außerhalb eines Kommentars gefunden", tempStr);
                 commentErrorCount++;
             }
             break;
@@ -1173,12 +1173,12 @@
 
         case TOKEN_Tag:
             // This is often seen when missing TOKEN_Result
-            LogError ("PGN header '[' seen inside game (result missing ?)", "");
+            LogError ("PGN-Kopf '[' innerhalb einer Partie gefunden (fehlendes Ergebnis?)", "");
             return ERROR_Game;
 
         case TOKEN_EndOfInput:
             if (EndOfInputWarnings) {
-                LogError ("End of input reached in game (result missing ?)", "");
+                LogError ("Eingabeende in Partie erreicht (fehlendes Ergebnis?)", "");
                 return ERROR_Game;
             } else {
                 return OK;
@@ -1185,7 +1185,7 @@
             }
 
         default:
-            LogError ("Error: Unexpected symbol: ", buffer);
+            LogError ("Fehler: unerwartetes Symbol: ", buffer);
         }
 
         token = GetNextToken (buffer, bufSize);
@@ -1206,7 +1206,7 @@
         // Use the end-of-game result instead of the header tag result:
         game->SetResult (r);
         if (ResultWarnings) {
-            LogError ("Result did not match the header result", "");
+            LogError ("Ergebnis paßte nicht zum Kopfergebnis", "");
         }
     }
     return OK;
@@ -1249,7 +1249,7 @@
             errorT pgnRes = ExtractPgnTag (buffer, game);
             // Don't throw errors for null pgn tags - too verbose
             if (pgnRes != OK && pgnRes != ERROR_PGNTagNull) {
-                LogError ("Error reading tag: ", buffer);
+                LogError ("Fehler beim Lesen des Kennzeichens: ", buffer);
             }
 
         } else if (token == TOKEN_LineComment) {
@@ -1275,7 +1275,7 @@
             break;
         } else {
             // Any other token is invalid here:
-            LogError ("Warning: Invalid text in PGN game header: ", buffer);
+            LogError ("Warnung: ungültiger Text im PGN-Partiekopf: ", buffer);
         }
 
         token = GetNextToken (buffer, MAX_COMMENT_SIZE);
@@ -1296,7 +1296,7 @@
 
     if (ParseMode == PARSE_Header) {
         if (EndOfInputWarnings) {
-            LogError ("Warning: End of input in PGN header tags section", "");
+            LogError ("Warnung: Ende der Eingabe im Bereich der Kennzeichen in den PGN-Kopfdaten", "");
             err = ERROR_Game;
         } else {
             err = OK;
Index: src/tkscid.cpp
===================================================================
--- src/tkscid.cpp	(revision 3394)
+++ src/tkscid.cpp	(working copy)
@@ -51,7 +51,7 @@
 static const uint REPORT_OPENING = 0;
 static const uint REPORT_PLAYER = 1;
 
-static char decimalPointChar = '.';
+static char decimalPointChar = ',';
 static uint htmlDiagStyle = 0;
 
 // Default maximum number of games in the clipbase database:
@@ -89,8 +89,8 @@
                 const char ** minorCmds)
 {
     ASSERT (majorCmd != NULL);
-    Tcl_AppendResult (ti, "Invalid command: ", majorCmd,
-                      " has the following minor commands:\n", NULL);
+    Tcl_AppendResult (ti, "Ungültiger Befehl: ", majorCmd,
+                      " hat die folgenden Unterbefehle:\n", NULL);
     while (*minorCmds != NULL) {
         Tcl_AppendResult (ti, "   ", *minorCmds, "\n", NULL);
         minorCmds++;
@@ -330,7 +330,7 @@
 const char *
 errMsgNotOpen (Tcl_Interp * ti)
 {
-    return translate (ti, "ErrNotOpen", "This is not an open database.");
+    return translate (ti, "ErrNotOpen", "Das ist keine offene Datenbank.");
 }
 
 const char *
@@ -337,7 +337,7 @@
 errMsgReadOnly (Tcl_Interp * ti)
 {
     return translate (ti, "ErrReadOnly",
-                      "This database is read-only; it cannot be altered.");
+                      "Diese Datenbank kann nur gelesen und nicht geändert werden.");
 }
 
 const char *
@@ -344,7 +344,7 @@
 errMsgSearchInterrupted (Tcl_Interp * ti)
 {
     return translate (ti, "ErrSearchInterrupted",
-                      "[Interrupted search; results are incomplete]");
+                      "[Suche unterbrochen, Ergebnisse sind unvollständig]");
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -494,7 +494,7 @@
     clipbase->gfile->CreateMemoryOnly();
     clipbase->idx->CreateMemoryOnly();
     clipbase->idx->SetType (2);
-    clipbase->idx->SetDescription ("Temporary database, not kept on disk.");
+    clipbase->idx->SetDescription ("Temporäre Datenbank, wird nicht gespeichert gehalten.");
     clipbase->inUse = true;
     clipbase->memoryOnly = true;
 
@@ -549,7 +549,7 @@
 str_is_prefix (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: strIsPrefix <shortStr> <longStr>");
+        return errorResult (ti, "Aufruf: strIsPrefix <shortStr> <longStr>");
     }
 
     return setBoolResult (ti, strIsPrefix (argv[1], argv[2]));
@@ -563,7 +563,7 @@
 str_prefix_len (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: strPrefixLen <str> <str>");
+        return errorResult (ti, "Aufruf: strPrefixLen <str> <str>");
     }
 
     return setUintResult (ti, strPrefix (argv[1], argv[2]));
@@ -715,7 +715,7 @@
                 // Querying if base argv[2] is read-only
 	        baseNum = strGetInteger (argv[2]);
 		if (baseNum < 1 || baseNum > MAX_BASES) {
-		    return errorResult (ti, "Invalid database number.");
+		    return errorResult (ti, "Ungültige Datenbanknummer.");
 		}
 		basePtr = &(dbList[baseNum - 1]);
 
@@ -728,11 +728,11 @@
               basePtr = db;
 	    } else {
               if (argc != 4 || !strEqual (argv[2], "set")) {
-		return errorResult (ti, "Usage: sc_base isReadOnly [set] [basenumber]");
+		return errorResult (ti, "Aufruf: sc_base isReadOnly [set] [basenumber]");
               }
 	      baseNum = strGetInteger (argv[3]);
 	      if (baseNum < 1 || baseNum > MAX_BASES) {
-	        return errorResult (ti, "Invalid database number.");
+	        return errorResult (ti, "Ungültige Datenbanknummer.");
 	      }
 	      basePtr = &(dbList[baseNum - 1]);
             }
@@ -741,10 +741,10 @@
                 return errorResult (ti, errMsgNotOpen(ti));
             }
             if (basePtr->fileMode == FMODE_ReadOnly) {
-                return errorResult (ti, "This database is already read-only.");
+                return errorResult (ti, "Diese Datenbank ist bereits im Nur-Lesen-Modus");
             }
             if (basePtr->idx->SetReadOnly () != OK) {
-                return errorResult (ti, "Unable to make this database read-only.");
+                return errorResult (ti, "Diese Datenbank kann nicht in den Nur-Lesen-Modus gesetzt werden.");
             }
             basePtr->fileMode = FMODE_ReadOnly;
             return TCL_OK;
@@ -833,7 +833,7 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
@@ -850,15 +850,15 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
 
     if (! basePtr->inUse) {
-        Tcl_AppendResult (ti, "[", translate (ti, "empty"), "]", NULL);
+        Tcl_AppendResult (ti, "[", translate (ti, "leer"), "]", NULL);
     } else if (basePtr == clipbase) {
-        Tcl_AppendResult (ti, "[", translate (ti, "clipbase"), "]", NULL);
+        Tcl_AppendResult (ti, "[", translate (ti, "Ablagedatenbank"), "]", NULL);
     } else {
         Tcl_AppendResult (ti, basePtr->fileName, NULL);
     }
@@ -876,7 +876,7 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
@@ -898,7 +898,7 @@
 sc_base_slot (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_base slot <filename>");
+        return errorResult (ti, "Aufruf: sc_base slot <filename>");
     }
     fileNameT fname;
     strCopy (fname, argv[2]);
@@ -943,7 +943,7 @@
 
     bool readOnly = false;  // Open database read-only.
     bool fastOpen = false;  // Fast open (no flag counts, etc)
-    const char * usage = "Usage: sc_base open [-readonly] [-fast] <filename>";
+    const char * usage = "Aufruf: sc_base open [-readonly] [-fast] <filename>";
 
     // Check options:
     const char * options[] = { "-fast", "-readonly", NULL };
@@ -967,7 +967,7 @@
     strCopy (realFileName, filename);
     strAppend (realFileName, INDEX_SUFFIX);
     if (base_opened (realFileName) >= 0) {
-        return errorResult (ti, "The database you selected is already opened.");
+        return errorResult (ti, "Die ausgewählte Datenbank ist bereits geöffnet.");
     }
 
     // Find an empty database slot to use:
@@ -975,7 +975,7 @@
     if (db->inUse) {
         int newBaseNum = findEmptyBase();
         if (newBaseNum == -1) {
-            return errorResult (ti, "Too many databases are open; close one first.");
+            return errorResult (ti, "Zuviele Datenbanken geöffnet, bitte zuerst eine schließen.");
         }
         currentBase = newBaseNum;
         db = &(dbList[currentBase]);
@@ -1002,12 +1002,12 @@
     if (err != OK) {
         currentBase = oldBaseNum;
         db = &(dbList[currentBase]);
-        setResult (ti, "Error opening index file");
+        setResult (ti, "Fehler beim Öffnen der Indexdatei");
         if (err == ERROR_FileVersion) {
-            setResult (ti, "Old format Scid file, now out of date.");
+            setResult (ti, "Altes Scid-Dateiformat, ist jetzt überholt.");
         }
         if (err == ERROR_OldScidVersion) {
-            setResult (ti, "Database version newer than Scid; please upgrade Scid.");
+            setResult (ti, "Die Versionsnummer der Datenbank ist aktueller als Scid; bitte Scid aktualisieren.");
         }
         return TCL_ERROR;
     }
@@ -1014,7 +1014,7 @@
 
     if (db->nb->ReadNameFile() != OK) {
         base_open_failure(oldBaseNum);
-        return errorResult (ti, "Error opening name file.");
+        return errorResult (ti, "Fehler beim Öffnen der Namensdatei.");
     }
 
     err = db->gfile->Open (filename, db->fileMode);
@@ -1026,7 +1026,7 @@
 
     if (err != OK) {
         base_open_failure(oldBaseNum);
-        return errorResult (ti, "Error opening game file.");
+        return errorResult (ti, "Fehler beim Öffnen der Partiendatei.");
     }
 
     // Read entire index, showing progress every 20,000 games if applicable:
@@ -1038,7 +1038,7 @@
 
     if (db->idx->VerifyFile (db->nb) != OK) {
         db->idx->CloseIndexFile();
-        return errorResult (ti, "Error: name corruption in index file.\nRun \"scidt -N\" on this database to fix it.");
+        return errorResult (ti, "Fehler: Namensverstümmelung in der Indexdatei.\n Starten Sie \"scidt -N\" mit dieser Datenbank, um ihn zu beheben.");
     }
 
     db->numGames = db->idx->GetNumGames();
@@ -1095,17 +1095,17 @@
 
     } else {
         if (base->idx->CreateIndexFile (FMODE_Both) != OK) {
-            return errorResult (ti, "Error creating index file.");
+            return errorResult (ti, "Fehler beim Erstellen der Indexdatei.");
         }
 
         base->idx->WriteHeader();
         if (base->nb->WriteNameFile() != OK) {
-            return errorResult (ti, "Error creating name file.");
+            return errorResult (ti, "Fehler beim Erstellen der Namensdatei.");
         }
         base->idx->ReadEntireFile();
 
         if (base->gfile->Create (filename, FMODE_Both) != OK) {
-            return errorResult (ti, "Error creating game file.");
+            return errorResult (ti, "Fehler beim Erstellen der Partiendatei.");
         }
     }
 
@@ -1139,7 +1139,7 @@
 {
     // argc should be 3 or 4, e.g. "sc_base create <myfile> [<boolean>]"
     if (argc != 3  &&  argc != 4) {
-        return errorResult (ti, "No file selected");
+        return errorResult (ti, "Keine Datei ausgewählt");
     }
     bool memoryOnly = false;
     if (argc == 4) {
@@ -1148,7 +1148,7 @@
 
     // Check that this base is not already opened:
     if (base_opened (argv[2]) >= 0) {
-        return errorResult (ti, "The database you selected is already opened.");
+        return errorResult (ti, "Die ausgewählte Datenbank ist bereits geöffnet.");
     }
 
     // Find another slot if current slot is used:
@@ -1156,7 +1156,7 @@
     if (db->inUse) {
         newBaseNum = findEmptyBase();
         if (newBaseNum == -1) {
-            return errorResult (ti, "You have too many open databases; close one first.");
+            return errorResult (ti, "Sie haben zuviele Datenbanken geöffnet, bitte erst eine schließen.");
         }
     }
 
@@ -1188,7 +1188,7 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
@@ -1238,7 +1238,7 @@
         optionMode = strUniqueMatch (argv[2], options);
 
         if (optionMode < OPT_FREE || argc > 3) {
-            return errorResult (ti, "Usage: sc_base count [free|used|total]");
+            return errorResult (ti, "Aufruf: sc_base count [free|used|total]");
         }
     }
 
@@ -1260,7 +1260,7 @@
 sc_base_description (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc < 2  ||  argc > 3) {
-        return errorResult (ti, "Usage: sc_base description [<text>]");
+        return errorResult (ti, "Aufruf: sc_base description [<text>]");
     }
     if (argc == 2) {
         // Get description:
@@ -1292,7 +1292,7 @@
     bool limitToFilter = false;
 
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_base check <bool:all_games>");
+        return errorResult (ti, "Aufruf: sc_base check <bool:all_games>");
     }
 
     Game *g = new Game();
@@ -1406,7 +1406,7 @@
     gameFormatT outputFormat = PGN_FORMAT_Plain;
     const char * startText = "";
     const char * endText = "";
-    const char * usage = "Usage: sc_base export current|filter PGN|HTML|Latex <pgn_filename> options...";
+    const char * usage = "Aufruf: sc_base export current|filter PGN|HTML|Latex <pgn_filename> options...";
     uint pgnStyle = PGN_STYLE_TAGS;
 
     const char * options[] = {
@@ -1517,7 +1517,7 @@
     }
     exportFile = fopen (exportFileName, (appendToFile ? "r+" : "w"));
     if (exportFile == NULL) {
-        return errorResult (ti, "Error opening file for exporting games.");
+        return errorResult (ti, "Fehler beim Öffnen der Datei für den Partienexport.");
     }
 
     CharsetConverter* charsetConverter = NULL;
@@ -1632,7 +1632,7 @@
 int
 sc_base_import (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_base import file|data <pgnFile|pgnData>";
+    const char * usage = "Aufruf: sc_base import file|data <pgnFile|pgnData>";
     static const char * options[] = { "data", "file", NULL };
     enum { IMPORT_OPT_DATA, IMPORT_OPT_FILE };
 
@@ -1655,7 +1655,7 @@
 
     if (index == IMPORT_OPT_FILE) {
         if (pgnFile.Open (argv[3], FMODE_ReadOnly) != OK) {
-            return errorResult (ti, "Error opening PGN file.");
+            return errorResult (ti, "Fehler beim Öffnen der PGN-Datei.");
         }
         parser.Reset (&pgnFile);
         inputLength = fileSize (argv[3], "");
@@ -1680,7 +1680,7 @@
           recalcFlagCounts (db);
           if (! db->memoryOnly) removeFile (db->fileName, TREEFILE_SUFFIX);
 
-          Tcl_AppendResult (ti, "Error saving game in database.\n", NULL);
+          Tcl_AppendResult (ti, "Fehler beim Speichern in Datenbank.\n", NULL);
           return TCL_ERROR;
         }
         // Update the progress bar:
@@ -1696,11 +1696,11 @@
 
     // Now write the Index file header and the name file:
     if (db->idx->WriteHeader() != OK) {
-        return errorResult (ti, "Error writing index file.");
+        return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
     }
     if (! db->memoryOnly) {
         if (db->nb->WriteNameFile() != OK) {
-            return errorResult (ti, "Error writing name file.");
+            return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
         }
     }
 
@@ -1728,7 +1728,7 @@
     bool showProgress = startProgressBar();
 
     const char * usage =
-        "Usage: sc_base piecetrack [-g|-t] <minMoves> <maxMoves> <startSquare ...>";
+        "Aufruf: sc_base piecetrack [-g|-t] <minMoves> <maxMoves> <startSquare ...>";
 
     if (argc < 5) {
         return errorResult (ti, usage);
@@ -1922,10 +1922,10 @@
     bool showProgress = startProgressBar();
 
     if (argc < 3 || argc > 4) {
-        return errorResult (ti, "Usage: sc_base sort <criteria> [script]");
+        return errorResult (ti, "Aufruf: sc_base sort <criteria> [script]");
     }
     if (db->idx->ParseSortCriteria (argv[2]) != OK) {
-        return errorResult (ti, "Invalid sorting criteria.");
+        return errorResult (ti, "Ungültige Sortierkriterien.");
     }
     if (! db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -1944,7 +1944,7 @@
     // if (status == ERROR )
     // ERROR define seems broken with mingwx
     if (status != OK ) {
-      return errorResult (ti, "Sort Failed.");
+      return errorResult (ti, "Sortieren gescheitert.");
     }
 
     if (showProgress) { updateProgressBar (ti, 1, 1); }
@@ -2030,7 +2030,7 @@
     if (argc > 3) {
         int baseNum = strGetInteger (argv[3]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
@@ -2085,7 +2085,7 @@
 sc_base_ecoStats (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_base ecoStats <ECO-prefix>");
+        return errorResult (ti, "Aufruf: sc_base ecoStats <ECO-prefix>");
     }
     const char * eco = argv[2];
     uint length = strLength (eco);
@@ -2115,7 +2115,7 @@
         }
     }
     if (invalid) {
-        return errorResult (ti, "Invalid ECO prefix");
+        return errorResult (ti, "Ungültiger ECO-Vorspann");
     }
 
     ecoStatsT * result = NULL;
@@ -2164,7 +2164,7 @@
 sc_base_switch (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_base switch <number>");
+        return errorResult (ti, "Aufruf: sc_base switch <number>");
     }
     int baseNum = strGetInteger (argv[2]);
     if (tolower(argv[2][0]) == 'c'  &&  strIsCasePrefix (argv[2], "clipbase")) {
@@ -2195,12 +2195,12 @@
 sc_base_type (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3  &&  argc != 4) {
-        return errorResult (ti, "Usage: sc_base type <number> [<type>]");
+        return errorResult (ti, "Aufruf: sc_base type <number> [<type>]");
     }
 
     int baseNum = strGetInteger (argv[2]);
     if (baseNum < 1 || baseNum > MAX_BASES) {
-        return errorResult (ti, "Invalid database number.");
+        return errorResult (ti, "Ungültige Datenbanknummer.");
     }
     scidBaseT * basePtr = &(dbList[baseNum - 1]);
 
@@ -2419,7 +2419,7 @@
     bool showProgress = startProgressBar();
 
     if ((argc % 2) != 0) {
-        return errorResult (ti, "Usage: sc_base duplicates [-option value ...]");
+        return errorResult (ti, "Aufruf: sc_base duplicates [-option value ...]");
     }
     if (! db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -2505,7 +2505,7 @@
                 } else if (strIsCasePrefix (valueStr, "newer")) {
                     deleteStrategy = DELETE_NEWER;
                 } else {
-                    return errorResult (ti, "Invalid option.");
+                    return errorResult (ti, "Ungültige Option.");
                 }
                 break;
             default:
@@ -2685,7 +2685,7 @@
 int
 sc_base_tag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_base tag [find <tagname> | list | strip <tagname> [filter|all]]";
+    const char * usage = "Aufruf: sc_base tag [find <tagname> | list | strip <tagname> [filter|all]]";
     const char * options[] = {
         "find", "list", "strip", NULL
     };
@@ -2794,10 +2794,10 @@
     if (cmd == TAG_STRIP  &&  nEditedGames > 0) {
         db->gfile->FlushAll();
         if (db->idx->WriteHeader() != OK) {
-            return errorResult (ti, "Error writing index file.");
+            return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
         }
         if (! db->memoryOnly  &&  db->nb->WriteNameFile() != OK) {
-            return errorResult (ti, "Error writing name file.");
+            return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
         }
     }
 
@@ -3207,7 +3207,7 @@
 int
 sc_base_tournaments (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_base tournaments [-<option> <value> ...]";
+    const char * usage = "Aufruf: sc_base tournaments [-<option> <value> ...]";
 
     uint i;
     uint maxTourneys = 100;
@@ -3452,7 +3452,7 @@
     bool showProgress = startProgressBar();
 
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_base upgrade <old-database>");
+        return errorResult (ti, "Aufruf: sc_base upgrade <old-database>");
     }
     const char * fname = argv[2];
     Index * oldIndex = new Index;
@@ -3465,13 +3465,13 @@
         newIndex->CloseIndexFile();
         delete oldIndex;
         delete newIndex;
-        return errorResult (ti, "An upgraded version of this database already exists.");
+        return errorResult (ti, "Eine aktualisierte Version dieser Datenbank besteht bereits.");
     }
 
     if (oldIndex->OpenOldIndexFile (FMODE_ReadOnly) != OK) {
         delete oldIndex;
         delete newIndex;
-        return errorResult (ti, "Error opening the old database.");
+        return errorResult (ti, "Fehler beim Öffnen der alten Datenbank.");
     }
 
     if (newIndex->CreateIndexFile (FMODE_WriteOnly) != OK) {
@@ -3478,7 +3478,7 @@
         oldIndex->CloseIndexFile();
         delete oldIndex;
         delete newIndex;
-        return errorResult (ti, "Error creating the new dataabse.");
+        return errorResult (ti, "Fehler beim Erstellen der neuen Datenbank.");
     }
 
     MFile * oldMFile = oldIndex->GetMFile();
@@ -3535,7 +3535,7 @@
     newIndex->CloseIndexFile(true); // don't write again the header
 
     if (err == OK  &&  !interruptedProgress()) {
-        if (err != OK) { setResult (ti, "Error writing name file"); }
+        if (err != OK) { setResult (ti, "Fehler beim Schreiben der Namensdatei"); }
     }
 
     delete oldIndex;
@@ -3543,7 +3543,7 @@
 
     if (interruptedProgress()) {
         removeFile (fname, INDEX_SUFFIX);
-        return errorResult (ti, "Upgrading was cancelled.");
+        return errorResult (ti, "Aktualisierung wurde abgebrochen.");
     }
 
     if (err != OK) {
@@ -3579,7 +3579,7 @@
     if ( nb->ReadNameFile() != OK) {
         delete nb;
         delete idx;
-        errorResult (ti, "Error opening name file.");
+        errorResult (ti, "Fehler beim Öffnen der Namensdatei.");
     }
 
     Index * idxTemp = new Index;
@@ -3588,7 +3588,7 @@
         delete idxTemp;
         delete nb;
         delete idx;
-        return errorResult (ti, "Error opening index file.");
+        return errorResult (ti, "Fehler beim Öffnen der Indexdatei.");
     }
     recalcNameFrequencies (nb, idxTemp);
     idxTemp->CloseIndexFile();
@@ -3613,7 +3613,7 @@
             if (frequency > 0) {
                 uint newID;
                 if (nbNew->AddName (nt, name, &newID) != OK) {
-                    errorResult (ti, "Error compacting namebase.");
+                    errorResult (ti, "Fehler beim Komprimieren der Namensdatenbank.");
                     break;
                 }
                 if (newID >= numEntries)
@@ -3625,7 +3625,7 @@
         }
     }
 
-    printf ("New: %u players, %u events, %u sites, %u rounds\n",
+    printf ("Neu: %u Spieler, %u Turniere, %u Orte, %u Runden\n",
             nbNew->GetNumNames(NAME_PLAYER), nbNew->GetNumNames(NAME_EVENT),
             nbNew->GetNumNames(NAME_SITE), nbNew->GetNumNames(NAME_ROUND));
     Index * idxOld = new Index;
@@ -3636,28 +3636,28 @@
     idxOld->SetFileName (tempName);
     idxNew->SetFileName (filename);
 
-    printf ("Renaming %s%s to %s%s in case of error...\n",
+    printf ("Benenne im Fehlerfall %s%s nach %s%s um...\n",
             filename, INDEX_SUFFIX, tempName, INDEX_SUFFIX);
     if (renameFile (filename, tempName, INDEX_SUFFIX) != OK) {
-        errorResult (ti, "Unable to rename the index file!");
+        errorResult (ti, "Indexdatei kann nicht umbenannt werden!");
     }
-    printf ("Renaming %s%s to %s%s in case of error...\n",
+    printf ("Benenne im Fehlerfall %s%s nach %s%s um...\n",
             filename, NAMEBASE_SUFFIX, tempName, NAMEBASE_SUFFIX);
     if (renameFile (filename, tempName, NAMEBASE_SUFFIX) != OK) {
-        errorResult (ti, "Unable to rename the namebase file!");
+        errorResult (ti, "Namensdatenbankdatei kann nicht umbenannt werden!");
     }
     if (idxOld->OpenIndexFile (FMODE_ReadOnly) != OK) {
         renameFile (tempName, filename, INDEX_SUFFIX);
-        errorResult (ti, "Error renaming index file");
+        errorResult (ti, "Fehler beim Umbenennen der Indexdatei");
     }
 
     if (idxNew->CreateIndexFile (FMODE_WriteOnly) != OK) {
         renameFile (tempName, filename, INDEX_SUFFIX);
-        errorResult (ti , "Error creating index file");
+        errorResult (ti , "Fehler beim Erstellen der Indexdatei");
     }
     idxNew->SetType (idxOld->GetType());
 
-    printf ("Writing new name and index files...\n");
+    printf ("Schreibe neue Namens- und Indexdateien...\n");
 
     // For each entry in old index: read it, alter its name ID
     // values to match the new namebase, and write the entry to
@@ -3669,8 +3669,8 @@
         IndexEntry ieOld, ieNew;
         idxOld->ReadEntries (&ieOld, i, 1);
         if (ieOld.Verify (nb) != OK) {
-              fprintf (stderr, "Warning: game %u: ", i+1);
-              fprintf (stderr, "names were corrupt, they may be incorrect.\n");
+              fprintf (stderr, "Warnung: Partie %u: ", i+1);
+              fprintf (stderr, "Namen waren korrumpiert, sie könnten fehlerhaft sein.\n");
         }
         err = idxNew->AddGame (&newNumGames, &ieNew);
         if (err != OK)  { break; }
@@ -3703,13 +3703,13 @@
     }
 
     if (err != OK) {
-        fprintf (stderr, "ERROR: I/O error!\n");
-        fprintf (stderr, "Restoring original file and aborting.\n");
+        fprintf (stderr, "FEHLER: I/O-Fehler!\n");
+        fprintf (stderr, "Stelle Originaldatei wieder her und breche ab.\n");
         removeFile (filename, INDEX_SUFFIX);
         renameFile (tempName, filename, INDEX_SUFFIX);
     }
 
-    printf ("New index file sucessfully created; old index removed.\n");
+    printf ("Neue Indexdatei erfolgreich erstellt; alter Index entfernt.\n");
     removeFile (tempName, INDEX_SUFFIX);
     removeFile (tempName, NAMEBASE_SUFFIX);
 
@@ -3773,8 +3773,8 @@
     int epdID = -1;
     if (argc >= 3) { epdID = strGetInteger (argv[2]) - 1; }
     if (epdID < 0  ||  epdID >= MAX_EPD  ||  pbooks[epdID] == NULL) {
-        Tcl_AppendResult (ti, "Error: sc_epd ", options[index],
-                          ": invalid EPD ID number", NULL);
+        Tcl_AppendResult (ti, "Fehler: sc_epd ", options[index],
+                          ": ungültige EPD-ID-Nummer", NULL);
         return TCL_ERROR;
     }
 
@@ -3804,7 +3804,7 @@
     case EPD_LOAD:
         {
           if (argc != 4) {
-            return errorResult (ti, "Usage: sc_epd load <epdID> <index>");
+            return errorResult (ti, "Aufruf: sc_epd load <epdID> <index>");
           }
           int idx = strGetInteger (argv[3]);
           PBook * pb = pbooks[epdID];
@@ -3836,7 +3836,7 @@
 
     case EPD_SET:   // Sets the text for the current position:
         if (argc != 4) {
-            return errorResult (ti, "Usage: sc_epd set <epdID> <text>");
+            return errorResult (ti, "Aufruf: sc_epd set <epdID> <text>");
         }
         return sc_epd_set (ti, epdID, argv[3]);
 
@@ -3845,7 +3845,7 @@
 
     case EPD_STRIP:
         if (argc != 4) {
-            return errorResult (ti, "Usage: sc_epd strip <epdID> <epdcode>");
+            return errorResult (ti, "Aufruf: sc_epd strip <epdID> <epdcode>");
         }
         return setUintResult (ti, pbooks[epdID]->StripOpcode (argv[3]));
 
@@ -3869,7 +3869,7 @@
           } else if (argc == 4) {
             return setIntResult (ti, pb->SetIndex(strGetUnsigned(argv[3])));
           } else {
-            return errorResult (ti, "Usage: sc_epd index <epdID> [<index>]");
+            return errorResult (ti, "Aufruf: sc_epd index <epdID> [<index>]");
           }
         }
 
@@ -3956,7 +3956,7 @@
 sc_epd_open (Tcl_Interp * ti, int argc, const char ** argv, bool create)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_epd create|open <filename>");
+        return errorResult (ti, "Aufruf: sc_epd create|open <filename>");
     }
 
     const char * filename = argv[2];
@@ -3966,7 +3966,7 @@
     for (epdID = 0; epdID < MAX_EPD; epdID++) {
         if (pbooks[epdID] != NULL  &&
                 strEqual (filename, pbooks[epdID]->GetFileName())) {
-            return errorResult (ti, "The EPD file you selected is already open.");
+            return errorResult (ti, "Die ausgewählte EPD-Datei ist bereits geöffnet.");
         }
     }
 
@@ -3976,7 +3976,7 @@
         if (pbooks[epdID] == NULL) { freeID = epdID; break; }
     }
     if (freeID == -1) {
-        return errorResult (ti, "Too many EPD files are open; close one first.");
+        return errorResult (ti, "Zuviele EPD-Dateien sind geöffnet, bitte erst eine schließen.");
     }
 
     PBook * pb = new PBook;
@@ -3987,8 +3987,8 @@
     if (err != OK) {
         delete pb;
         pbooks[freeID] = NULL;
-        Tcl_AppendResult (ti, "Unable to ", (create ? "create" : "open"),
-                          " EPD file: ", filename, PBOOK_SUFFIX, NULL);
+        Tcl_AppendResult (ti, "Kann EPD-Datei nicht ", (create ? "erstellen: " : "öffnen: "), filename, PBOOK_SUFFIX, NULL);
+                          
         return TCL_ERROR;
     }
     return setIntResult (ti, freeID + 1);
@@ -4011,7 +4011,7 @@
 {
     PBook * pb = pbooks[epdID];
     if (pb->WriteFile() != OK) {
-        return errorResult (ti, "Error writing EPD file.");
+        return errorResult (ti, "Fehler beim Schreiben der EPD-Datei.");
     }
     return TCL_OK;
 }
@@ -4061,7 +4061,7 @@
 sc_clipbase_clear (Tcl_Interp * ti)
 {
     if (! clipbase->inUse) {
-        return errorResult (ti, "The clipbase is not open.");
+        return errorResult (ti, "Die Ablagedatenbank ist nicht geöffnet.");
     }
     clipbase->game->Clear();
     clipbase->nb->Clear();
@@ -4094,10 +4094,10 @@
 {
     // Hmmm - errors currently caught
     if (! clipbase->inUse) {
-        return errorResult (ti, "The clipbase is not open.");
+        return errorResult (ti, "Die Ablagedatenbank ist nicht geöffnet.");
     }
     if (db == clipbase) {
-        return errorResult (ti, "You are already in the clipbase database.");
+        return errorResult (ti, "Sie sind bereits in der Ablagedatenbank.");
     }
     if (clipbase->fileMode == FMODE_ReadOnly) {
          return errorResult (ti, errMsgReadOnly(ti));
@@ -4113,7 +4113,7 @@
     db->bbuf->Empty();
     db->game->SaveState();
     if (db->game->Encode (db->bbuf, NULL) != OK) {
-        return errorResult (ti, "Error encoding game.");
+        return errorResult (ti, "Fehler beim Kodieren der Partie.");
     }
     db->game->RestoreState();
     db->bbuf->BackToStart();
@@ -4120,7 +4120,7 @@
     clipbase->game->Clear();
 
     if (clipbase->game->Decode (db->bbuf, GAME_DECODE_ALL) != OK) {
-        return errorResult (ti, "Error decoding game.");
+        return errorResult (ti, "Fehler beim Dekodieren der Partie.");
     }
 
     // Copy the standard tag values to the clipbase game:
@@ -4164,7 +4164,7 @@
     uint location = clipbase->game->GetPgnOffset (0);
     db->bbuf->Empty();
     if (clipbase->game->Encode (db->bbuf, NULL) != OK) {
-        return errorResult (ti, "Error encoding game.");
+        return errorResult (ti, "Fehler beim Kodieren der Partie.");
     }
 
     // db changes get discarded
@@ -4176,7 +4176,7 @@
     db->gameAltered = true;
 
     if (db->game->Decode (db->bbuf, GAME_DECODE_ALL) != OK) {
-        return errorResult (ti, "Error decoding game.");
+        return errorResult (ti, "Fehler beim Dekodieren der Partie.");
     }
 
     // Copy the standard tag values from the clipbase game:
@@ -4210,7 +4210,7 @@
         return errorResult (ti, errMsgNotOpen(ti));
     }
     if (db->memoryOnly) {
-        return errorResult (ti, "This is a memory-only database, it cannot be compacted.");
+        return errorResult (ti, "Dies ist nur eine Arbeitsspeicherdatenbank, sie kann nicht komprimiert werden.");
     }
 
     if (argc > 1) { index = strUniqueMatch (argv[1], options); }
@@ -4265,11 +4265,11 @@
 
     if (newIdx->CreateIndexFile (FMODE_WriteOnly) != OK) {
         CLEANUP;
-        return errorResult (ti, "Error creating temporary file; compaction cancelled");
+        return errorResult (ti, "Fehler beim Erstellen einer temporären Datei, Komprimierung abgebrochen");
     }
     if (newGfile->Create (newName, FMODE_WriteOnly) != OK) {
         CLEANUP;
-        return errorResult (ti, "Error creating temporary file; compaction cancelled.");
+        return errorResult (ti, "Fehler beim Erstellen einer temporären Datei, Komprimierung abgebrochen.");
     }
 
     gameNumberT newNumGames = 0;
@@ -4286,7 +4286,7 @@
                 update = updateStart;
                 updateProgressBar (ti, i, db->numGames);
                 if (interruptedProgress()) {
-                    errMsg = "User interruption; compaction cancelled.";
+                    errMsg = "Abbruch durch Anwender, Komprimierung abgebrochen.";
                     interrupted = true;
                     break;
                 }
@@ -4313,7 +4313,7 @@
         }
         err = newIdx->AddGame (&newNumGames, &ieNew);
         if (err != OK) {
-            errMsg = "Error in compaction operation; compaction cencelled.";
+            errMsg = "Fehler beim Komprimieren, Komprimierung abgebrochen.";
             interrupted = true;
             break;
         }
@@ -4460,7 +4460,7 @@
                 const char * name = nb->GetName (nt, oldID);
                 err = nbNew->AddName (nt, name, &newID);
                 if (err != OK) {
-                    errorResult (ti, "Error compacting namebase.");
+                    errorResult (ti, "Fehler beim Komprimieren der Namensdatenbank.");
                     break;
                 }
                 nbNew->IncFrequency (nt, newID, frequency);
@@ -4495,7 +4495,7 @@
             ieNew.SetRound (idMapping [NAME_ROUND] [ie->GetRound()]);
             err = db->idx->WriteEntries (&ieNew, i, 1);
             if (err != OK) {
-                errorResult (ti, "Error writing index file.");
+                errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
                 break;
             }
         }
@@ -4508,7 +4508,7 @@
         nbNew->SetFileName (db->fileName);
         err = nbNew->WriteNameFile();
         if (err != OK) {
-            errorResult (ti, "Error writing name file.");
+            errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
         }
         delete db->nb;
         db->nb = nbNew;
@@ -4541,7 +4541,7 @@
 sc_compact_stats (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_compact stats games|names");
+        return errorResult (ti, "Aufruf: sc_compact stats games|names");
     }
 
     if (argv[2][0] == 'n') {
@@ -4557,7 +4557,7 @@
         }
     } else {
         if (argv[2][0] != 'g') {
-          Tcl_AppendResult (ti, "Usage: sc_compact stats [games|names]", NULL);
+          Tcl_AppendResult (ti, "Aufruf: sc_compact stats [games|names]", NULL);
           return TCL_ERROR;
         }
 
@@ -4688,9 +4688,9 @@
 sc_eco_base (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_eco <bool:all_games> <bool:extensions>");
+        return errorResult (ti, "Aufruf: sc_eco <bool:all_games> <bool:extensions>");
     }
-    if (!ecoBook) { return errorResult (ti, "No ECO Book is loaded."); }
+    if (!ecoBook) { return errorResult (ti, "Es wurde kein ECO-Buch geladen."); }
     if (! db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
     }
@@ -4807,7 +4807,7 @@
         if (db->fileMode != FMODE_ReadOnly
                 &&  ie->GetEcoCode() != oldEcoCode) {
             if (db->idx->WriteEntries (ie, i, 1) != OK) {
-                return errorResult (ti, "Error writing index file.");
+                return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
             }
         }
     }
@@ -4815,7 +4815,7 @@
     // Update the index file header:
     if (db->fileMode != FMODE_ReadOnly) {
         if (db->idx->WriteHeader() != OK) {
-            return errorResult (ti, "Error writing index file.");
+            return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
         }
     }
 
@@ -4824,7 +4824,7 @@
 
     int centisecs = timer.CentiSecs();
     char tempStr [100];
-    sprintf (tempStr, "Classified %d game%s in %d%c%02d seconds",
+    sprintf (tempStr, "%d Partien%s in %d%c%02d Sekunden klassifiziert",
              countClassified, strPlural (countClassified),
              centisecs / 100, decimalPointChar, centisecs % 100);
     Tcl_AppendResult (ti, tempStr, NULL);
@@ -4846,7 +4846,7 @@
         if (argc == 3  &&  strIsPrefix (argv[2], "ply")) {
             returnPly = 1;
         } else {
-            return errorResult (ti, "Usage: sc_game eco [ply]");
+            return errorResult (ti, "Aufruf: sc_game eco [ply]");
         }
     }
     if (!ecoBook) { return TCL_OK; }
@@ -4893,12 +4893,12 @@
     errorT err = ecoBook->ReadEcoFile();
     if (err != OK) {
         if (err == ERROR_FileOpen) {
-            Tcl_AppendResult (ti, "Unable to open the ECO file:\n",
+            Tcl_AppendResult (ti, "Die ECO-Datei kann nicht geöffnet werden:\n",
                               argv[2], NULL);
         } else {
-            Tcl_AppendResult (ti, "Unable to load the ECO file:\n",
+            Tcl_AppendResult (ti, "Die ECO-Datei kann nicht geladen werden:\n",
                               argv[2], NULL);
-            Tcl_AppendResult (ti, "\n\nError at line ", NULL);
+            Tcl_AppendResult (ti, "\n\nFehler in Zeile ", NULL);
             appendUintResult (ti, ecoBook->GetLineNumber());
         }
         delete ecoBook;
@@ -4917,7 +4917,7 @@
 {
     bool color = 0;
     if (argc != 3  &&  argc != 4) {
-        return errorResult (ti, "Usage: sc_eco summary <ECO-prefix> [<bool:color>]");
+        return errorResult (ti, "Aufruf: sc_eco summary <ECO-prefix> [<bool:color>]");
     }
     if (argc == 4) { color = strGetBoolean (argv[3]); }
     if (!ecoBook) { return TCL_OK; }
@@ -4980,7 +4980,7 @@
 sc_eco_find (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3 && argc != 4) {
-        return errorResult (ti, "Usage: sc_eco find <string> [color]");
+        return errorResult (ti, "Aufruf: sc_eco find <string> [color]");
     }
     if (!ecoBook) { return TCL_OK; }
 
@@ -5047,7 +5047,7 @@
 sc_eco_translate (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 5) {
-        return errorResult (ti, "Usage: sc_eco translate <lang> <from> <to>");
+        return errorResult (ti, "Aufruf: sc_eco translate <lang> <from> <to>");
     }
 
     ecoTranslateT * trans = new ecoTranslateT;
@@ -5220,7 +5220,7 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
@@ -5235,7 +5235,7 @@
 {
     bool showProgress = startProgressBar();
     if (argc != 4 && argc != 5) {
-        return errorResult (ti, "Usage: sc_filter copy <fromBase> <toBase> [items]");
+        return errorResult (ti, "Aufruf: sc_filter copy <fromBase> <toBase> [items]");
     }
     uint updateStart, update;
     updateStart = update = 1000;  // Update progress bar every 100 games
@@ -5243,21 +5243,21 @@
     int sourceBaseNum = strGetInteger (argv[2]);
     int targetBaseNum = strGetInteger (argv[3]);
     if (sourceBaseNum < 1  ||  sourceBaseNum > MAX_BASES) {
-        return errorResult (ti, "Invalid source base number.");
+        return errorResult (ti, "Ungültige Nummer der Datenbankquelle.");
     }
     if (targetBaseNum < 1  ||  targetBaseNum > MAX_BASES) {
-        return errorResult (ti, "Invalid target base number.");
+        return errorResult (ti, "Ungültige Nummer des Datenbankziels.");
     }
     scidBaseT * sourceBase = &(dbList[sourceBaseNum - 1]);
     scidBaseT * targetBase = &(dbList[targetBaseNum - 1]);
     if (! sourceBase->inUse) {
-        return errorResult (ti, "The source database is not open.");
+        return errorResult (ti, "Die Datenbankquelle ist nicht geöffnet.");
     }
     if (! targetBase->inUse) {
-        return errorResult (ti, "The target database is not open.");
+        return errorResult (ti, "Das Datenbankziel ist nicht geöffnet.");
     }
     if (targetBase->fileMode == FMODE_ReadOnly) {
-        return errorResult (ti, "The target database is read-only.");
+        return errorResult (ti, "Das Datenbankziel kann nur gelesen werden.");
     }
 
     // Currently only used by gamelist context menu gamelist::CopyFilter "Copy to filter", but could be expanded
@@ -5297,7 +5297,7 @@
 	    IndexEntry * ie = sourceBase->idx->FetchEntry (atoi(largv[i])-1);
 	    sourceBase->bbuf->Empty();
 	    if (sourceBase->gfile->ReadGame (sourceBase->bbuf, ie->GetOffset(), ie->GetLength()) != OK) {
-		return errorResult (ti, "Error reading game file.");
+		return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
 	    }
 	    if (sc_savegame (ti, sourceBase, sourceBase->bbuf, ie, targetBase) != TCL_OK) {
 		    return TCL_ERROR;
@@ -5322,7 +5322,7 @@
         sourceBase->bbuf->Empty();
         if (sourceBase->gfile->ReadGame (sourceBase->bbuf, ie->GetOffset(),
                                          ie->GetLength()) != OK) {
-            return errorResult (ti, "Error reading game file.");
+            return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
         }
 
 	if (sc_savegame (ti, sourceBase, sourceBase->bbuf, ie, targetBase) != TCL_OK) {
@@ -5336,10 +5336,10 @@
 
     // Now write the Index file header and the name file:
     if (targetBase->idx->WriteHeader() != OK) {
-        return errorResult (ti, "Error writing index file.");
+        return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
     }
     if (! targetBase->memoryOnly  &&  targetBase->nb->WriteNameFile() != OK) {
-        return errorResult (ti, "Error writing name file.");
+        return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
     }
 
     // Ensure that the Index is still all in memory:
@@ -5389,7 +5389,7 @@
 sc_filter_freq (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     const char * usage =
-        "Usage: sc_filter freq date|elo|move <startDate|minElo|lowerhalfMove> [<endDate|maxElo|higherhalfMove>][GuessElo]";
+        "Aufruf: sc_filter freq date|elo|move <startDate|minElo|lowerhalfMove> [<endDate|maxElo|higherhalfMove>][GuessElo]";
 
     bool eloMode = false;
     bool moveMode = false;
@@ -5539,7 +5539,7 @@
 sc_filter_locate (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_filter locate <gameNumber>");
+        return errorResult (ti, "Aufruf: sc_filter locate <gameNumber>");
     }
     uint filteredCount = 0;
     if (db->inUse) {
@@ -5624,7 +5624,7 @@
 sc_filter_remove (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3  &&  argc != 4) {
-        return errorResult (ti, "Usage: sc_filter remove <from> [<to>]");
+        return errorResult (ti, "Aufruf: sc_filter remove <from> [<to>]");
     }
     if (! db->inUse) { return TCL_OK; }
     uint from = strGetUnsigned (argv[2]);
@@ -5658,7 +5658,7 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     } else {
@@ -5681,7 +5681,7 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
@@ -5706,7 +5706,7 @@
     if (argc > 2) {
         int baseNum = strGetInteger (argv[2]);
         if (baseNum < 1 || baseNum > MAX_BASES) {
-            return errorResult (ti, "Invalid database number.");
+            return errorResult (ti, "Ungültige Datenbanknummer.");
         }
         basePtr = &(dbList[baseNum - 1]);
     }
@@ -5723,7 +5723,7 @@
     enum {STATS_ALL, STATS_ELO, STATS_YEAR};
 
     if (argc < 2 || argc > 5) {
-        return errorResult (ti, "Usage: sc_filter stats [all | elo <xx> | year <xx>]");
+        return errorResult (ti, "Aufruf: sc_filter stats [all | elo <xx> | year <xx>]");
     }
     int statType = STATS_ALL;
     uint min = 0;
@@ -5735,7 +5735,7 @@
     }
     if (statType == STATS_ELO  ||  statType == STATS_YEAR) {
         if (argc < 4) {
-            return errorResult (ti, "Incorrect number of parameters.");
+            return errorResult (ti, "Ungültige Anzahl der Parameter.");
         }
         min = strGetUnsigned (argv[3]);
         max = strGetUnsigned (argv[4]);
@@ -5812,7 +5812,7 @@
     bool (*stringcompare)(const char*, const char*);
 
     if (argc != 5) {
-        return errorResult (ti, "Usage: sc_filter textfind <case_bool> <startGame> <searchText>");
+        return errorResult (ti, "Aufruf: sc_filter textfind <case_bool> <startGame> <searchText>");
     }
 
     if (strGetUnsigned(argv[2])==0)
@@ -5862,7 +5862,7 @@
     uint number_removed = 0;
 
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_filter textfilter <case_bool> <searchText>");
+        return errorResult (ti, "Aufruf: sc_filter textfilter <case_bool> <searchText>");
     }
 
     if (strGetUnsigned(argv[2])==0)
@@ -6035,7 +6035,7 @@
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_flags
-// Usage: sc_flags <gameNum>
+// Aufruf: sc_flags <gameNum>
 // returns a string with all set flags for this game
 //
 // Could be incorporated into sc_game
@@ -6048,7 +6048,7 @@
     gameNumberT gnum;
 
     if (argc < 2 || argc > 3) {
-      return errorResult (ti, "Usage: sc_flags <gamenumber> [verbose]");
+      return errorResult (ti, "Aufruf: sc_flags <gamenumber> [verbose]");
     }
 
     gnum = strGetUnsigned (argv[1]);
@@ -6181,7 +6181,7 @@
 
     case GAME_SET_ALTERED:
         if (argc != 3 ) {
-          return errorResult (ti, "Usage: sc_game setaltered [0|1]");
+          return errorResult (ti, "Aufruf: sc_game setaltered [0|1]");
         }
         db->gameAltered = strGetUnsigned (argv[2]);
         break;
@@ -6291,7 +6291,7 @@
 
     case GAME_UNDO:
 	if (trialMode) 
-	    return errorResult (ti, "'undo' disabled in trial mode");
+	    return errorResult (ti, "'rückgängig' ist im Versuchsmodus deaktiviert");
 
 	if (db->undoIndex <= -1)
 	    return setResult (ti, "0");
@@ -6358,7 +6358,7 @@
 
     case GAME_REDO:
 	if (trialMode)
-	    return errorResult (ti, "'redo' disabled in trial mode");
+	    return errorResult (ti, "'wiederherstellen' ist im Versuchsmodus deaktiviert");
 
 	if (db->undoIndex >= db->undoMax)
 	    return setResult (ti, "0");
@@ -6422,7 +6422,7 @@
     char stemp[1000];
 
     const char * usageMsg =
-        "Usage: sc_game crosstable plain|html|hypertext|filter|count [name|rating|score|country] [allplay|swiss] [(+|-)(colors|countries|tallies|ratings|titles|groups|breaks|numcolumns)] [-gameNumber GAME|-round ROUND]";
+        "Aufruf: sc_game crosstable plain|html|hypertext|filter|count [name|rating|score|country] [allplay|swiss] [(+|-)(colors|countries|tallies|ratings|titles|groups|breaks|numcolumns)] [-gameNumber GAME|-round ROUND]";
 
     static const char * extraOptions [] = {
         "allplay", "knockout", "swiss", "auto",
@@ -6556,18 +6556,18 @@
         g = scratchGame;
         g->Clear();
         if (gameNumber > db->numGames) {
-            return setResult (ti, "Invalid game number");
+            return setResult (ti, "Ungültige Partienummer");
         }
         IndexEntry * ie = db->idx->FetchEntry (gameNumber - 1);
         if (ie->GetLength() == 0) {
-            return errorResult (ti, "Error: empty game file record.");
+            return errorResult (ti, "Fehler: leerer Partiendateidatensatz.");
         }
         if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(),
                                    ie->GetLength()) != OK) {
-            return errorResult (ti, "Error reading game file.");
+            return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
         }
         if (g->Decode (db->bbuf, GAME_DECODE_ALL) != OK) {
-            return errorResult (ti, "Error decoding game.");
+            return errorResult (ti, "Fehler beim Dekodieren der Partie.");
             }
         g->LoadStandardTags (ie, db->nb);
     }
@@ -6695,7 +6695,7 @@
     }
     if (ctable->NumPlayers() < 2) {
         delete ctable;
-        return setResult (ti, "No crosstable for this game.");
+        return setResult (ti, "Keine Kreuztabelle für diese Partie.");
     }
 
     if (option == OPT_LATEX) {
@@ -6714,7 +6714,7 @@
     if (mode == CROSSTABLE_AllPlayAll  &&
             ctable->NumPlayers() > apaLimit  &&
             !tableFullMessage) {
-        Tcl_AppendResult (ti, "Warning: Too many players for all-play-all; try displaying as a swiss tournament.\n\n", NULL);
+        Tcl_AppendResult (ti, " Warnung: zuviele Spieler für jeder gegen jeden; versuche, als Schweizer-System-Turnier anzuzeigen.\n\n", NULL);
     }
 
     sprintf (stemp, "%s%s%s, ", g->GetEventStr(), newlineStr, g->GetSiteStr());
@@ -6768,7 +6768,7 @@
 sc_game_find (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 9) {
-        return errorResult (ti, "sc_game_find: Incorrect parameters");
+        return errorResult (ti, "sc_game_find: fehlerhafte Parameter");
     }
 
     uint gnum = strGetUnsigned (argv[2]);
@@ -6838,7 +6838,7 @@
 sc_game_firstMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_game firstMoves <gameNum> <numMoves>");
+        return errorResult (ti, "Aufruf: sc_game firstMoves <gameNum> <numMoves>");
     }
     if (!db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -6846,7 +6846,7 @@
 
     uint gNum = strGetUnsigned (argv[2]);
     if (gNum > db->numGames) {
-        return errorResult (ti, "Invalid game number.");
+        return errorResult (ti, "Ungültige Partienummer.");
     }
 
     int plyCount = strGetInteger (argv[3]);
@@ -6858,17 +6858,17 @@
         db->bbuf->Empty();
         IndexEntry * ie = db->idx->FetchEntry (gNum - 1);
         if (ie->GetLength() == 0) {
-            return setResult (ti, "(This game has no move data)");
+            return setResult (ti, "(Diese Partie hat keine Zugdaten)");
         }
 
         if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(),
                                  ie->GetLength()) != OK) {
-            return errorResult (ti, "Error reading game.");
+            return errorResult (ti, "Fehler beim Lesen der Partie.");
         }
 
         g->Clear();
         if (g->Decode (db->bbuf, GAME_DECODE_NONE) != OK) {
-            return errorResult (ti, "Error decoding game.");
+            return errorResult (ti, "Fehler beim Dekodieren der Partie.");
         }
     }
 
@@ -6896,7 +6896,7 @@
 int
 sc_game_flag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_game flag <flag> <gameNum> [0|1]";
+    const char * usage = "Aufruf: sc_game flag <flag> <gameNum> [0|1]";
     if (argc < 3  ||  argc > 5) {
         return errorResult (ti, usage);
     }
@@ -6919,7 +6919,7 @@
         char desc[CUSTOM_FLAG_DESC_LENGTH+1];
         uint num = IndexEntry::CharToFlag (argv[2][0]) - 15;
         if (num < 1 || num > CUSTOM_FLAG_MAX )
-          return errorResult (ti, "Custom flag number out of range");
+          return errorResult (ti, "Zahl für benutzerdefinierte Markierung ist außerhalb des Bereichs");
         db->idx->GetCustomFlagDesc(desc, num);
         Tcl_AppendResult (ti, desc, NULL);
         return TCL_OK;
@@ -6930,7 +6930,7 @@
       } else {
         uint num = IndexEntry::CharToFlag (argv[2][0]) - 15;
         if (num < 1 || num > CUSTOM_FLAG_MAX )
-          return errorResult (ti, "Custom flag number out of range");
+          return errorResult (ti, "Zahl für benutzerdefinierte Markierung ist außerhalb des Bereichs");
         db->idx->SetCustomFlagDesc( argv[4], num);
         return TCL_OK;
       }
@@ -6953,7 +6953,7 @@
         // specified number exceeds the number of games, return an error:
         if (gNum == 0) { return TCL_OK; }
         if (gNum > db->numGames) {
-            return errorResult (ti, "Invalid game number.");
+            return errorResult (ti, "Ungültige Partienummer.");
         }
         gNum--;   // Set numbering to be from 0, rather than 1.
         if (argc == 4) {  // Get current flag value:
@@ -6996,7 +6996,7 @@
 sc_game_import (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_game import <pgn-text>");
+        return errorResult (ti, "Aufruf: sc_game import <pgn-text>");
     }
     PgnParser parser (argv[2]);
     errorT err = parser.ParseGame (db->game);
@@ -7010,13 +7010,13 @@
     }
     db->gameAltered = true;
     if (err == OK  &&  parser.ErrorCount() == 0) {
-        return setResult (ti, "PGN text imported with no errors or warnings.");
+        return setResult (ti, "PGN-Text wurde ohne Fehler oder Warnungen importiert.");
     }
-    Tcl_AppendResult (ti, "Errors/warnings importing PGN text:\n",
+    Tcl_AppendResult (ti, "Fehler/Warnungen beim Import von PGN-Text:\n",
                           parser.ErrorMessages(), NULL);
     if (err == ERROR_NotFound) {
-        Tcl_AppendResult (ti, "ERROR: No PGN header tag (e.g. ",
-                          "[Result \"1-0\"]) found.", NULL);
+        Tcl_AppendResult (ti, "FEHLER: kein PGN-Kopfmerkmal (z.B. ",
+                          "[Result \"1-0\"]) gefunden.", NULL);
     }
     return (err == OK ? TCL_OK : TCL_ERROR);
 }
@@ -7127,7 +7127,7 @@
 
     if (fullReport) {
         char tempStr [80];
-        sprintf (tempStr, "Won %u  Drawn %u  Loss %u  ? %u",
+        sprintf (tempStr, "Gewonnen %u  Remis %u  Verloren %u  ? %u",
                  winCount, drawCount, lossCount, unknownCount);
         dstr->Append (tempStr);
         int prevScore = -9999999;   // Lower than any possible TB score
@@ -7849,7 +7849,7 @@
 {
     bool showProgress = startProgressBar();
     if (argc != 5  &&  argc != 6) {
-        return errorResult (ti, "Usage: sc_game list <start> <count> [!]<format> [<file>]");
+        return errorResult (ti, "Aufruf: sc_game list <start> <count> [!]<format> [<file>]");
     }
     if (! db->inUse) { return TCL_OK; }
 
@@ -8001,7 +8001,7 @@
         return errorResult (ti, errMsgNotOpen(ti));
     }
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_game load <gameNumber>");
+        return errorResult (ti, "Aufruf: sc_game load <gameNumber>");
     }
 
     sc_game_undo_reset(db);
@@ -8022,7 +8022,7 @@
 
     // Check the game number is valid::
     if (gnum < 1  ||  gnum > db->numGames) {
-        return errorResult (ti, "Invalid game number.");
+        return errorResult (ti, "Ungültige Partienummer.");
     }
 
     // We number games from 0 internally, so subtract one:
@@ -8035,7 +8035,7 @@
         return errorResult (ti, errorStr);
     }
     if (db->game->Decode (db->bbuf, GAME_DECODE_ALL) != OK) {
-        sprintf (errorStr, "Error decoding game %u.", gnum+1);
+        sprintf (errorStr, "Fehler beim Dekodieren der Partie %u.", gnum+1);
         return errorResult (ti, errorStr);
     }
 
@@ -8067,7 +8067,7 @@
 int
 sc_game_merge (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_game merge <baseNum> <gameNum> [<endPly>]";
+    const char * usage = "Aufruf: sc_game merge <baseNum> <gameNum> [<endPly>]";
     scidBaseT * base = db;
     if (argc < 4  ||  argc > 5) { return errorResult (ti, usage); }
 
@@ -8081,10 +8081,10 @@
 
     // Check we have a valid database and game number:
     if (! base->inUse) {
-        return errorResult (ti, "The selected database is not open.");
+        return errorResult (ti, "Die gewählte Datenbank ist nicht geöffnet.");
     }
     if (gnum < 1  ||  gnum > base->numGames) {
-        return errorResult (ti, "Invalid game number.");
+        return errorResult (ti, "Ungültige Partienummer.");
     }
     // Number games from 0 internally:
     gnum--;
@@ -8091,13 +8091,13 @@
 
     // Check that the specified game can be merged:
     if (base == db  &&  (int)gnum == db->gameNumber) {
-        return errorResult (ti, "Game cannot be merged into itself.");
+        return errorResult (ti, "Partie kann nicht mit sich selbst verschmolzen werden.");
     }
     if (db->game->AtStart()  &&  db->game->AtEnd()) {
-        return errorResult (ti, "The current game has no moves.");
+        return errorResult (ti, "Die aktuelle Partie hat keine Züge.");
     }
     if (db->game->HasNonStandardStart()) {
-        return errorResult (ti, "The current game has a non-standard start position.");
+        return errorResult (ti, "Die aktuelle Partie hat keine standardmäßige Anfangsstellung.");
     }
 
     // Load the merge game:
@@ -8106,12 +8106,12 @@
     base->bbuf->Empty();
     if (base->gfile->ReadGame (base->bbuf, ie->GetOffset(),
                                ie->GetLength()) != OK) {
-        return errorResult (ti, "Error loading game.");
+        return errorResult (ti, "Fehler beim Laden der Partie.");
     }
     Game * merge = scratchGame;
     merge->Clear();
     if (merge->Decode (base->bbuf, GAME_DECODE_NONE) != OK) {
-        return errorResult (ti, "Error decoding game.");
+        return errorResult (ti, "Fehler beim Dekodieren der Partie.");
     }
     merge->LoadStandardTags (ie, base->nb);
 
@@ -8147,7 +8147,7 @@
     delete[] mergeBoards;
 
     if (matchPly == 0) {
-        return errorResult (ti, "No matching position found.");
+        return errorResult (ti, "Keine passende Stellung gefunden.");
     }
 
     // Now the games match at the locations matchPly in the current
@@ -8220,7 +8220,7 @@
     uint MAXMOVES = g->GetCurrentPly() + 10; // overhead
     sanStringT * moveStrings = new sanStringT [MAXMOVES];
 
-    const char * usage = "Usage: sc_game moves [coord | nonums]";
+    const char * usage = "Aufruf: sc_game moves [coord | nonums]";
 
     if (argc > 3) {
         return errorResult (ti, usage);
@@ -8332,7 +8332,7 @@
         translate (ti, "NoveltyNone", "No novelty was found for this game");
 
     const char * usage =
-        "Usage: sc_game novelty [-older|-all] [-updatelabel <label>] [base]";
+        "Aufruf: sc_game novelty [-older|-all] [-updatelabel <label>] [base]";
 
     bool olderGamesOnly = false;
     dateT currentDate = db->game->GetDate();
@@ -8368,11 +8368,11 @@
     }
 
     if (! base->inUse) {
-        return errorResult (ti, "The selected database is not open.");
+        return errorResult (ti, "Die gewählte Datenbank ist nicht geöffnet.");
     }
 
     if (db->game->HasNonStandardStart()) {
-        return errorResult (ti, "This game has a non-standard start position.");
+        return errorResult (ti, "Diese Partie hat keine standardmäßige Anfangsstellung.");
     }
 
     if (updateLabel != NULL) {
@@ -8474,7 +8474,7 @@
 
             if (base->gfile->ReadGame (db->bbuf, ie->GetOffset(),
                                      ie->GetLength()) != OK) {
-                return errorResult (ti, "Error reading game file.");
+                return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
             }
             if (g->ExactMatch (pos, db->bbuf, NULL)) {
                 foundMatch = true;
@@ -8554,8 +8554,8 @@
     while (thisArg < argc) {
         int index = strUniqueMatch (argv[thisArg], options);
         if (index == -1) {
-            Tcl_AppendResult (ti, "Invalid option to sc_game pgn: ",
-                              argv[thisArg], "; valid options are: ", NULL);
+            Tcl_AppendResult (ti, "Ungültige Option für sc_game pgn: ",
+                              argv[thisArg], "; gültige Optionen sind: ", NULL);
             for (const char ** s = options; *s != NULL; s++) {
                 Tcl_AppendResult (ti, *s, " ", NULL);
             }
@@ -8564,8 +8564,8 @@
 
         // Check that our option has a value:
         if (thisArg+1 == argc) {
-            Tcl_AppendResult (ti, "Invalid option value: sc_game pgn ",
-                              options[index], " requires a value.", NULL);
+            Tcl_AppendResult (ti, " Ungültiger Optionswert: sc_game pgn ",
+                              options[index], " erfordert einen Wert.", NULL);
             return TCL_ERROR;
         }
 
@@ -8579,7 +8579,7 @@
                 base = &(dbList[value - 1]);
             }
             if (! base->inUse) {
-                return setResult (ti, "The selected database is not in use.");
+                return setResult (ti, "Die ausgewählte Datenbank ist nicht in Gebrauch.");
             }
             g = base->game;
 
@@ -8589,18 +8589,18 @@
             g = scratchGame;
             g->Clear();
             if (value < 1  ||  value > base->numGames) {
-                return setResult (ti, "Invalid game number");
+                return setResult (ti, "Ungültige Partienummer");
             }
             IndexEntry * ie = base->idx->FetchEntry (value - 1);
             if (ie->GetLength() == 0) {
-                return errorResult (ti, "Error: empty game file record.");
+                return errorResult (ti, "Fehler: leerer Partiendateidatensatz.");
             }
             if (base->gfile->ReadGame (base->bbuf, ie->GetOffset(),
                                      ie->GetLength()) != OK) {
-                return errorResult (ti, "Error reading game file.");
+                return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
             }
             if (g->Decode (base->bbuf, GAME_DECODE_ALL) != OK) {
-                return errorResult (ti, "Error decoding game.");
+                return errorResult (ti, "Fehler beim Dekodieren der Partie.");
             }
             g->LoadStandardTags (ie, base->nb);
 
@@ -8607,7 +8607,7 @@
         } else if (index == OPT_FORMAT) {
             // The option value should be "plain", "html" or "latex".
             if (! g->SetPgnFormatFromString (argv[thisArg+1])) {
-                return errorResult (ti, "Invalid -format option.");
+                return errorResult (ti, "Ungültige -format-Option.");
             }
 
         } else {
@@ -8641,7 +8641,7 @@
                 case OPT_STRIPBRACES:
                     bitmask = PGN_STYLE_STRIP_BRACES;    break;
                 default: // unreachable!
-                    return errorResult (ti, "Invalid option.");
+                    return errorResult (ti, "Ungültige Option.");
             };
             if (bitmask > 0) {
                 if (value) {
@@ -8731,7 +8731,7 @@
 int
 sc_game_reorder (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_game reorder GameNum GameDest.";
+    const char * usage = "Aufruf: sc_game reorder GameNum GameDest.";
 
     if ( argc != 4 ) {
         Tcl_AppendResult (ti, usage, NULL);
@@ -8740,7 +8740,7 @@
 
     // unneeded  / wrong ?
     if (!db->idx->AllInMemory()) {
-      Tcl_AppendResult (ti, "NOT in memory", NULL);
+      Tcl_AppendResult (ti, "NICHT im Speicher", NULL);
       return TCL_ERROR;
     }
 
@@ -8748,19 +8748,19 @@
     int direction;
 
     if (sscanf (argv[2], "%u", &gnum ) != 1 || gnum == 0) {
-	Tcl_AppendResult (ti, "Game Reorder: invalid game number.", NULL);
+	Tcl_AppendResult (ti, "Partieumordnung: ungültige Partienummer.", NULL);
         return TCL_ERROR;
     }
     gnum--;
 
     if (sscanf (argv[3], "%u", &newgame ) != 1 || newgame == 0 || newgame > db->numGames ) {
-	Tcl_AppendResult (ti, "Game Reorder: invalid destination.", NULL);
+	Tcl_AppendResult (ti, "Partieumordnung: ungültiges Ziel.", NULL);
         return TCL_ERROR;
     }
     newgame--;
 
     if (newgame == gnum) {
-	Tcl_AppendResult (ti, "Game Reorder: game and destination are the same.", NULL);
+	Tcl_AppendResult (ti, "Partieumordnung: Partie und Ziel sind gleich.", NULL);
         return TCL_ERROR;
     }
 
@@ -8788,12 +8788,12 @@
 	ie_next_Filter = db->filter->Get(i + direction);
 
 	if (ie_next == NULL) {
-	  Tcl_AppendResult (ti, "Game Reorder: game out of bounds, bad.", NULL);
+	  Tcl_AppendResult (ti, "Partieumordnung: Partie außerhalb Grenzen, schlecht.", NULL);
 	  return TCL_ERROR;
 	}
 
         if (db->idx->WriteEntries (ie_next, i, 1) != OK) {
-          Tcl_AppendResult (ti, "Game Reorder: error writing index file.", NULL);
+          Tcl_AppendResult (ti, "Partieumordnung: Fehler beim Schreiben der Indexdatei.", NULL);
           return TCL_ERROR;
         }
 
@@ -8803,7 +8803,7 @@
     // Write original game to new position
 
     if (db->idx->WriteEntries (&ie_gnum, newgame, 1) != OK) {
-      Tcl_AppendResult (ti, "Game Reorder: error writing source game into index file.", NULL);
+      Tcl_AppendResult (ti, "Partieumordnung: Fehler beim Schreiben der Ursprungspartie in die Indexdatei.", NULL);
       return TCL_ERROR;
     }
 
@@ -8835,7 +8835,7 @@
         return TCL_ERROR;
     }
     if (base == clipbase   &&  base->numGames >= clipbaseMaxGames) {
-        sprintf (temp, "The clipbase has a limit of %u games.\n", clipbaseMaxGames);
+        sprintf (temp, "Die Ablagedatenbank hat ein Limit von %u Partien.\n", clipbaseMaxGames);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
     }
@@ -8856,10 +8856,10 @@
     errorT result;
     if ((result = game->Encode (base->bbuf, &iE)) != OK) {
       if (result == ERROR_GameFull) {
-	sprintf (temp, "Error encoding game. Game size %u, Max game size %u. \n", base->bbuf->GetByteCount(), MAX_GAME_LENGTH);
+	sprintf (temp, "Fehler beim Kodieren der Partie. Game size %u, Max game size %u. \n", base->bbuf->GetByteCount(), MAX_GAME_LENGTH);
         Tcl_AppendResult (ti, temp, NULL);
       } else {
-        Tcl_AppendResult (ti, "Error encoding game.\n", NULL);
+        Tcl_AppendResult (ti, "Fehler beim Kodieren der Partie.\n", NULL);
       }
       return TCL_ERROR;
     }
@@ -8876,7 +8876,7 @@
     } else {
       // add game without resetting the index, because it has been filled by game->encode above
       if (base->idx->AddGame (&gNumber, &iE, false) != OK) {
-        sprintf (temp, "Scid maximum games (%u) reached.\n", MAX_GAMES);
+        sprintf (temp, "Maximalanzahl an Partien (%u) für Scid erreicht.\n", MAX_GAMES);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
       }
@@ -8888,7 +8888,7 @@
     // Now try writing the game to the gfile:
     uint offset = 0;
     if (base->gfile->AddGame (base->bbuf, &offset) != OK) {
-        Tcl_AppendResult (ti, "Error writing game file.", NULL);
+        Tcl_AppendResult (ti, "Fehler beim Schreiben der Partiendatei.", NULL);
         return TCL_ERROR;
     }
     iE.SetOffset (offset);
@@ -8902,7 +8902,7 @@
     // WHITE:
     s = game->GetWhiteStr();  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_PLAYER, s, &id) == ERROR_NameBaseFull) {
-        sprintf (temp, "Player Name limit of %u exceeded\n", NAME_MAX_ID [NAME_PLAYER]);
+        sprintf (temp, "Limit von %u für Spielernamen überschritten\n", NAME_MAX_ID [NAME_PLAYER]);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
     }
@@ -8912,7 +8912,7 @@
     // BLACK:
     s = game->GetBlackStr();  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_PLAYER, s, &id) == ERROR_NameBaseFull) {
-        sprintf (temp, "Player Name limit of %u exceeded\n", NAME_MAX_ID [NAME_PLAYER]);
+        sprintf (temp, "Limit von %u für Spielernamen überschritten\n", NAME_MAX_ID [NAME_PLAYER]);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
     }
@@ -8922,7 +8922,7 @@
     // EVENT:
     s = game->GetEventStr();  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_EVENT, s, &id) == ERROR_NameBaseFull) {
-        sprintf (temp, "Event Name limit of %u exceeded\n", NAME_MAX_ID [NAME_EVENT]);
+        sprintf (temp, "Limit von %u für Veranstaltungsnamen überschritten\n", NAME_MAX_ID [NAME_EVENT]);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
     }
@@ -8932,7 +8932,7 @@
     // SITE:
     s = game->GetSiteStr();  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_SITE, s, &id) == ERROR_NameBaseFull) {
-        sprintf (temp, "Site Name limit of %u exceeded\n", NAME_MAX_ID [NAME_SITE]);
+        sprintf (temp, "Limit von %u für Ortsnamen überschritten\n", NAME_MAX_ID [NAME_SITE]);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
     }
@@ -8942,7 +8942,7 @@
     // ROUND:
     s = game->GetRoundStr();  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_ROUND, s, &id) == ERROR_NameBaseFull) {
-        sprintf (temp, "Round Name limit of %u exceeded\n", NAME_MAX_ID [NAME_ROUND]);
+        sprintf (temp, "Limit von %u für Rundennamen überschritten\n", NAME_MAX_ID [NAME_ROUND]);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
     }
@@ -8969,7 +8969,7 @@
     // writing them now would then be a waste of time.
 
     if (base->idx->WriteEntries (&iE, gNumber, 1) != OK) {
-        Tcl_AppendResult (ti, "Error writing index file.", NULL);
+        Tcl_AppendResult (ti, "Fehler beim Schreiben der Indexdatei.", NULL);
         return TCL_ERROR;
     }
 
@@ -9006,7 +9006,7 @@
         return TCL_ERROR;
     }
     if (base == clipbase   &&  base->numGames >= clipbaseMaxGames) {
-        sprintf (temp, "The clipbase has a limit of %u games.\n",
+        sprintf (temp, "Die Ablagedatenbank hat ein Limit von %u Partien.\n",
                  clipbaseMaxGames);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
@@ -9024,7 +9024,7 @@
 
     // add game without resetting the index, because it has been filled by game->encode above
     if (base->idx->AddGame (&gNumber, &iE, false) != OK) {
-        sprintf (temp, "Scid maximum games (%u) reached.\n", MAX_GAMES);
+        sprintf (temp, "Maximalanzahl an Partien (%u) für Scid erreicht.\n", MAX_GAMES);
         Tcl_AppendResult (ti, temp, NULL);
         return TCL_ERROR;
     }
@@ -9035,7 +9035,7 @@
     // Now try writing the game to the gfile:
     uint offset = 0;
     if (base->gfile->AddGame (bbuf, &offset) != OK) {
-        Tcl_AppendResult (ti, "Error writing game file.", NULL);
+        Tcl_AppendResult (ti, "Fehler beim Schreiben der Partiendatei.", NULL);
         return TCL_ERROR;
     }
     iE.SetOffset (offset);
@@ -9049,7 +9049,7 @@
     // WHITE:
 	s = srcIe->GetWhiteName( sourceBase->nb);  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_PLAYER, s, &id) == ERROR_NameBaseFull) {
-        Tcl_AppendResult (ti, "Too many player names.", NULL);
+        Tcl_AppendResult (ti, "Zuviele Spielernamen.", NULL);
         return TCL_ERROR;
     }
     base->nb->IncFrequency (NAME_PLAYER, id, 1);
@@ -9058,7 +9058,7 @@
     // BLACK:
     s = srcIe->GetBlackName( sourceBase->nb);  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_PLAYER, s, &id) == ERROR_NameBaseFull) {
-        Tcl_AppendResult (ti, "Too many player names.", NULL);
+        Tcl_AppendResult (ti, "Zuviele Spielernamen.", NULL);
         return TCL_ERROR;
     }
     base->nb->IncFrequency (NAME_PLAYER, id, 1);
@@ -9067,7 +9067,7 @@
     // EVENT:
     s = srcIe->GetEventName( sourceBase->nb);  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_EVENT, s, &id) == ERROR_NameBaseFull) {
-        Tcl_AppendResult (ti, "Too many event names.", NULL);
+        Tcl_AppendResult (ti, "Zuviele Turniernamen.", NULL);
         return TCL_ERROR;
     }
     base->nb->IncFrequency (NAME_EVENT, id, 1);
@@ -9076,7 +9076,7 @@
     // SITE:
     s = srcIe->GetSiteName( sourceBase->nb);  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_SITE, s, &id) == ERROR_NameBaseFull) {
-        Tcl_AppendResult (ti, "Too many site names.", NULL);
+        Tcl_AppendResult (ti, "Zuviele Ortsnamen.", NULL);
         return TCL_ERROR;
     }
     base->nb->IncFrequency (NAME_SITE, id, 1);
@@ -9085,7 +9085,7 @@
     // ROUND:
     s = srcIe->GetRoundName( sourceBase->nb);  if (!s) { s = "?"; }
     if (base->nb->AddName (NAME_ROUND, s, &id) == ERROR_NameBaseFull) {
-        Tcl_AppendResult (ti, "Too many round names.", NULL);
+        Tcl_AppendResult (ti, "Zuviele Rundennamen.", NULL);
         return TCL_ERROR;
     }
     base->nb->IncFrequency (NAME_ROUND, id, 1);
@@ -9096,7 +9096,7 @@
     // writing them now would then be a waste of time.
 
     if (base->idx->WriteEntries (&iE, gNumber, 1) != OK) {
-        Tcl_AppendResult (ti, "Error writing index file.", NULL);
+        Tcl_AppendResult (ti, "Fehler beim Schreiben der Indexdatei.", NULL);
         return TCL_ERROR;
     }
 
@@ -9126,7 +9126,7 @@
 {
 
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_game save <gameNumber>");
+        return errorResult (ti, "Aufruf: sc_game save <gameNumber>");
     }
     if (! db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -9140,7 +9140,7 @@
     if (gnum > db->numGames) {
         char tempStr[20];
         sprintf (tempStr, "%u", db->numGames);
-        Tcl_AppendResult (ti, "Invalid game number; there are only ",
+        Tcl_AppendResult (ti, "Ungültige Partienummer; there are only ",
                           tempStr, " games in this database.", NULL);
         return TCL_ERROR;
     }
@@ -9150,10 +9150,10 @@
     db->gfile->FlushAll();
     db->game->RestoreState ();
     if (db->idx->WriteHeader() != OK) {
-        return errorResult (ti, "Error writing index file.");
+        return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
     }
     if (! db->memoryOnly  &&  db->nb->WriteNameFile() != OK) {
-        return errorResult (ti, "Error writing name file.");
+        return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
     }
 
     if (gnum == 0) {
@@ -9241,7 +9241,7 @@
     bool inv_b = false;
 
     if (argc != 4)
-        return errorResult (ti, "Usage: sc_game scores invert_white invert_black");
+        return errorResult (ti, "Aufruf: sc_game scores invert_white invert_black");
 
     inv_w = atoi (argv[2]);
     inv_b = atoi (argv[3]);
@@ -9266,7 +9266,7 @@
 sc_game_values (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3)
-        return errorResult (ti, "Usage: sc_game values <type>");
+        return errorResult (ti, "Aufruf: sc_game values <type>");
 
     int moveCounter = 0;
 
@@ -9316,7 +9316,7 @@
     if (argc == 2) {
         return setBoolResult (ti, db->game->HasNonStandardStart());
     } else if (argc != 3) {
-        return errorResult (ti, "Usage: sc_game startBoard <fenString>");
+        return errorResult (ti, "Aufruf: sc_game startBoard <fenString>");
     }
     const char * str = argv[2];
     if (strIsPrefix ("random:", str)) {
@@ -9325,12 +9325,12 @@
         // set of material is generated. For example, "random:krpkr"
         // generates a random legal Rook+Pawn-vs-Rook position.
         if (scratchPos->Random (str+7) != OK) {
-            return errorResult (ti, "Invalid material string.");
+            return errorResult (ti, "Ungültige Materialzeichenkette.");
         }
     } else {
         if (scratchPos->ReadFromFEN (str) != OK) {
             if (scratchPos->ReadFromLongStr (str) != OK) {
-                return errorResult (ti, "Invalid FEN string.");
+                return errorResult (ti, "Ungültiger FEN-Text.");
             }
         }
         // ReadFromFEN checks that there is one king of each side, but it
@@ -9340,10 +9340,10 @@
            squareT wk = scratchPos->GetKingSquare (WHITE);
            squareT bk = scratchPos->GetKingSquare (BLACK);
            if (square_Adjacent (wk, bk)) {
-               return errorResult (ti, "Illegal position: adjacent kings.");
+               return errorResult (ti, "Ungültige Stellung: beieinanderstehende Könige.");
            }
            // No adjacent kings, so enemy king must be in check.
-           return errorResult (ti, "Illegal position: enemy king in check.");
+           return errorResult (ti, "Ungültige Stellung: gegnerischer König im Schach.");
         }
     }
     db->game->SetStartPos (scratchPos);
@@ -9369,7 +9369,7 @@
 sc_game_strip (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     const char * usage =
-        "Usage: sc_game strip [comments|variations] [all|filter]";
+        "Aufruf: sc_game strip [comments|variations] [all|filter]";
 
     const char * options[] = { "comments", "variations", NULL };
     enum { OPT_COMS, OPT_VARS };
@@ -9413,7 +9413,7 @@
 	parser.Reset ((const char *) db->tbuf->GetBuffer());
 	scratchGame->Clear();
 	if (parser.ParseGame (scratchGame)) {
-	    return errorResult (ti, "Error: unable to strip this game.");
+	    return errorResult (ti, "Fehler: kann diese Partie nicht abschneiden.");
 	}
 	parser.Reset ((const char *) db->tbuf->GetBuffer());
 	db->game->Clear();
@@ -9483,7 +9483,7 @@
 
 	    // Load the game.
 	    if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(), ie->GetLength()) != OK) {
-		return errorResult (ti, "Error reading game file.");
+		return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
 	    }
 	    g->Clear();
 	    if (g->Decode (db->bbuf, GAME_DECODE_ALL) != OK)
@@ -9504,7 +9504,7 @@
 // necessary ??
 	    db->gfile->FlushAll();
 	    if (db->idx->WriteHeader() != OK) {
-		return errorResult (ti, "Error writing index file.");
+		return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
 	    }
 
 	}
@@ -9515,7 +9515,7 @@
 // 
 // !!!!!!!!!!!!!!!!!!! S.A. 28/9/2020
     if (! db->memoryOnly  &&  db->nb->WriteNameFile() != OK) {
-        return errorResult (ti, "Error writing name file.");
+        return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
     }
 
     db->gameAltered = false;
@@ -9556,7 +9556,7 @@
 int
 sc_game_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_game summary [-base <baseNum>] [-gameNumber <gameNum>] header|boards|moves";
+    const char * usage = "Aufruf: sc_game summary [-base <baseNum>] [-gameNumber <gameNum>] header|boards|moves";
 
     const char * options[] = {
         "-base", "-gameNumber", NULL
@@ -9600,20 +9600,20 @@
     } else {
         // Load the specified game number:
         if (! base->inUse) {
-            return errorResult (ti, "This database is not in use.");
+            return errorResult (ti, "Diese Datenbank ist nicht in Benutzung.");
         }
         if (gnum > base->numGames) {
-            return errorResult (ti, "Invalid game number.");
+            return errorResult (ti, "Ungültige Partienummer.");
         }
         gnum--;
         IndexEntry * ie = base->idx->FetchEntry (gnum);
         base->bbuf->Empty();
         if (base->gfile->ReadGame (base->bbuf, ie->GetOffset(), ie->GetLength()) != OK) {
-            return errorResult (ti, "Error loading game.");
+            return errorResult (ti, "Fehler beim Laden der Partie.");
         }
         g->Clear();
         if (g->Decode (base->bbuf, GAME_DECODE_NONE) != OK) {
-            return errorResult (ti, "Error decoding game.");
+            return errorResult (ti, "Fehler beim Dekodieren der Partie.");
         }
         g->LoadStandardTags (ie, base->nb);
     }
@@ -9749,7 +9749,7 @@
         T_EDate, T_EYear, T_EMonth, T_EDay, T_Extra
     };
 
-    const char * usage = "Usage: sc_game tags get [-last] <tagName>";
+    const char * usage = "Aufruf: sc_game tags get [-last] <tagName>";
     const char * tagName;
     Game * g = db->game;
 
@@ -9772,10 +9772,10 @@
             IndexEntry * ie = db->idx->FetchEntry (prevgame);
             if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(),
                                      ie->GetLength()) != OK) {
-                return errorResult (ti, "Error reading game file.");
+                return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
             }
             if (g->Decode (db->bbuf, GAME_DECODE_ALL) != OK) {
-                return errorResult (ti, "Error decoding game.");
+                return errorResult (ti, "Fehler beim Dekodieren der Partie.");
             }
             g->LoadStandardTags (ie, db->nb);
         }
@@ -9911,7 +9911,7 @@
 
     int arg = 3;
     if (((argc-arg) % 2) != 0) {
-        return errorResult (ti, "Odd number of parameters.");
+        return errorResult (ti, "Ungerade Anzahl an Parametern.");
     }
 
     // Process each pair of parameters:
@@ -9952,7 +9952,7 @@
                     if (Tcl_SplitList (ti, value, &largc,
                                        (CONST84 char ***) &largv) != TCL_OK) {
                         // Error from Tcl_SplitList!
-                        return errorResult (ti, "Error parsing extra tags.");
+                        return errorResult (ti, "Fehler beim Parsen zusätzlicher Markierungen.");
                     }
 
                     // Extract each tag-value pair and add it to the game:
@@ -10013,7 +10013,7 @@
 sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     const char * usage =
-        "Usage: sc_game tags share [check|update] <gameNumber1> <gameNumber2>";
+        "Aufruf: sc_game tags share [check|update] <gameNumber1> <gameNumber2>";
     if (argc != 6) { return errorResult (ti, usage); }
     bool updateMode = false;
     if (strIsPrefix (argv[3], "check")) {
@@ -10311,7 +10311,7 @@
 
     case INFO_VALIDDATE:
         if (argc != 3) {
-            return errorResult (ti, "Usage: sc_info validDate <datestring>");
+            return errorResult (ti, "Aufruf: sc_info validDate <datestring>");
         }
         setBoolResult (ti, date_ValidString (argv[2]));
         break;
@@ -10325,7 +10325,7 @@
         break;
     case INFO_LANGUAGE:
       if (argc != 3) {
-        return errorResult (ti, "Usage: sc_info language <lang>");
+        return errorResult (ti, "Aufruf: sc_info language <lang>");
       }
       if ( strcmp(argv[2], "en") == 0) {language = 0;}
       if ( strcmp(argv[2], "fr") == 0) {language = 1;}
@@ -10360,7 +10360,7 @@
 sc_info_fsize (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_info fsize <filename>");
+        return errorResult (ti, "Aufruf: sc_info fsize <filename>");
     }
     const char * fname = argv[2];
     const char * lastSuffix = strFileSuffix (fname);
@@ -10399,7 +10399,7 @@
 
     MFile pgnFile;
     if (pgnFile.Open (fname, FMODE_ReadOnly) != OK) {
-        return errorResult (ti, "Error opening file");
+        return errorResult (ti, "Fehler beim Öffnen der Datei");
     }
 
     const uint maxBytes = 65536;
@@ -10409,7 +10409,7 @@
     if (pgnFile.ReadNBytes (buffer, bytes) != OK) {
         pgnFile.Close();
         delete[] buffer;
-        return errorResult (ti, "Error reading file");
+        return errorResult (ti, "Fehler beim Lesen der Datei");
     }
     pgnFile.Close();
 
@@ -10531,7 +10531,7 @@
 sc_info_priority (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
 #ifdef _WIN32
-    const char * usage = "Usage: sc_info priority <pid> [normal|idle]";
+    const char * usage = "Aufruf: sc_info priority <pid> [normal|idle]";
     if (argc < 3  ||  argc > 4) { return errorResult (ti, usage); }
 
     int pid = strGetInteger(argv[2]);
@@ -10548,7 +10548,7 @@
         // Try to obtain a process handle for setting the priority class:
         HANDLE hProcess = OpenProcess (PROCESS_SET_INFORMATION, false, pid);
         if (hProcess == NULL) {
-            return errorResult (ti, "Unable to set process priority.");
+            return errorResult (ti, "Kann für den Prozess keine Priorität setzen.");
         }
 
         // Set the process class to NORMAL or IDLE:
@@ -10559,7 +10559,7 @@
     // Now return the process priority:
     HANDLE hProcess = OpenProcess (PROCESS_QUERY_INFORMATION, false, pid);
     if (hProcess == NULL) {
-        return errorResult (ti, "Unable to get process priority.");
+        return errorResult (ti, "Kann für den Prozess keine Priorität erhalten.");
     }
     uint priorityClass = GetPriorityClass (hProcess);
     CloseHandle (hProcess);
@@ -10576,7 +10576,7 @@
 
 #else  // #ifdef _WIN32
 
-    const char * usage = "Usage: sc_info priority <pid> [<priority>]";
+    const char * usage = "Aufruf: sc_info priority <pid> [<priority>]";
     if (argc < 3  ||  argc > 4) { return errorResult (ti, usage); }
 
     int pid = strGetInteger(argv[2]);
@@ -10585,7 +10585,7 @@
         // Try to assign a new priority:
         int newpriority = strGetInteger(argv[3]);
         if (setpriority (PRIO_PROCESS, pid, newpriority) != 0) {
-            return errorResult (ti, "Unable to set process priority.");
+            return errorResult (ti, "Kann für den Prozess keine Priorität setzen.");
         }
     }
     // Now return the process priority:
@@ -10634,7 +10634,7 @@
 sc_info_tb (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     const char * usage =
-        "Usage: sc_info tb [<directory>|available <material>|cache <size-kb>]";
+        "Aufruf: sc_info tb [<directory>|available <material>|cache <size-kb>]";
 
     if (argc == 2) {
         // Command: sc_info tb
@@ -10738,7 +10738,7 @@
 
     case MOVE_PLY:
         if (argc != 3) {
-            return errorResult (ti, "Usage: sc_move ply <plynumber>");
+            return errorResult (ti, "Aufruf: sc_move ply <plynumber>");
         }
         {
             uint ply = strGetUnsigned (argv[2]);
@@ -10765,7 +10765,7 @@
 {
 
     if (argc != 5) {
-        return errorResult (ti, "Usage: sc_move add <sq> <sq> <promo>");
+        return errorResult (ti, "Aufruf: sc_move add <sq> <sq> <promo>");
     }
 
     uint sq1 = strGetUnsigned (argv[2]);
@@ -10794,7 +10794,7 @@
             return TCL_OK;
         }
     }
-    return errorResult (ti, "Error adding move.");
+    return errorResult (ti, "Fehler beim Hinzufügen eines Zuges.");
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -10819,7 +10819,7 @@
         parser.SetResultWarnings (false);
         errorT err = parser.ParseMoves (db->game, buf, 1000);
         if (err != OK  ||  parser.ErrorCount() > 0) {
-            Tcl_AppendResult (ti, "Error reading move(s): ", *argPtr, NULL);
+            Tcl_AppendResult (ti, "Fehler beim Lesen eines Zuges/von Zügen: ", *argPtr, NULL);
             return TCL_ERROR;
         }
         db->gameAltered = true;
@@ -10944,7 +10944,7 @@
 sc_move_pgn (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_move pgn <offset>");
+        return errorResult (ti, "Aufruf: sc_move pgn <offset>");
     }
     db->tbuf->Empty();
     db->tbuf->SetWrapColumn (99999);
@@ -11125,7 +11125,7 @@
 sc_pos_addNag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_pos addNag <nagvalue>");
+        return errorResult (ti, "Aufruf: sc_pos addNag <nagvalue>");
     }
     const char * nagStr = argv[2];
     byte nag = game_parseNag (nagStr);
@@ -11146,7 +11146,7 @@
 int
 sc_pos_analyze (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_pos analyze [<option> <value> ...]";
+    const char * usage = "Aufruf: sc_pos analyze [<option> <value> ...]";
 
     uint searchTime = 1000;   // Default = 1000 milliseconds
     uint hashTableKB = 1024;  // Default: one-megabyte hash table.
@@ -11220,7 +11220,7 @@
 sc_pos_bestSquare (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_pos bestSquare <square>");
+        return errorResult (ti, "Aufruf: sc_pos bestSquare <square>");
     }
 
     Position * pos = db->game->GetCurrentPos();
@@ -11232,7 +11232,7 @@
       if (sqInt >= 0  &&  sqInt <= 63) { sq = sqInt; }
     }
     if (sq == NULL_SQUARE) {
-        return errorResult (ti, "Usage: sc_pos bestSquare <square>");
+        return errorResult (ti, "Aufruf: sc_pos bestSquare <square>");
     }
 
     // Generate all legal moves:
@@ -11332,7 +11332,7 @@
 int
 sc_pos_hash (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_pos hash [full|pawn]";
+    const char * usage = "Aufruf: sc_pos hash [full|pawn]";
     bool pawnHashOnly = false;
     if (argc > 3) { return errorResult (ti, usage); }
     if (argc == 3) {
@@ -11361,7 +11361,7 @@
 int
 sc_pos_html (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_pos html [-flip <boolean>] [-path <path>] [<style:0|1>]";
+    const char * usage = "Aufruf: sc_pos html [-flip <boolean>] [-path <path>] [<style:0|1>]";
     uint style = htmlDiagStyle;
     bool flip = false;
     int arg = 2;
@@ -11419,7 +11419,7 @@
         return setBoolResult (ti, db->game->AtVarEnd());
 
     default:
-        return errorResult (ti, "Usage: sc_pos isAt start|end|vstart|vend");
+        return errorResult (ti, "Aufruf: sc_pos isAt start|end|vstart|vend");
     }
     return TCL_OK;
 }
@@ -11432,7 +11432,7 @@
 sc_pos_isPromo (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_move isPromo <square> <square>");
+        return errorResult (ti, "Aufruf: sc_move isPromo <square> <square>");
     }
 
     Position * pos = db->game->GetCurrentPos();
@@ -11440,7 +11440,7 @@
     int toSq = strGetInteger (argv[3]);
 
     if (fromSq < A1  ||  fromSq > H8  ||  toSq < A1  ||  toSq > H8) {
-        return errorResult (ti, "Usage: sc_move isPromo <square> <square>");
+        return errorResult (ti, "Aufruf: sc_move isPromo <square> <square>");
     }
 
     setBoolResult (ti, pos->IsPromoMove ((squareT) fromSq, (squareT) toSq));
@@ -11452,7 +11452,7 @@
 sc_pos_isInsufficient (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 2)
-        return errorResult (ti, "Usage: sc_pos isInsufficient");
+        return errorResult (ti, "Aufruf: sc_pos isInsufficient");
 
     Position * pos = db->game->GetCurrentPos();
     uint numPieces = pos->TotalMaterial();
@@ -11474,7 +11474,7 @@
 sc_pos_isLegal (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_pos isLegal <square> <square>");
+        return errorResult (ti, "Aufruf: sc_pos isLegal <square> <square>");
     }
 
     Position * pos = db->game->GetCurrentPos();
@@ -11505,7 +11505,7 @@
 sc_pos_matchMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3  &&  argc != 4) {
-        return errorResult (ti, "Usage: sc_pos matchMoves <movetext-prefix>");
+        return errorResult (ti, "Aufruf: sc_pos matchMoves <movetext-prefix>");
     }
     bool coordMoves = false;
     const char * prefix = argv[2];
@@ -11596,7 +11596,7 @@
 sc_pos_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 2) {
-        return errorResult (ti, "Usage: sc_pos moves");
+        return errorResult (ti, "Aufruf: sc_pos moves");
     }
     Position * p = db->game->GetCurrentPos();
     sanListT sanList;
@@ -11612,7 +11612,7 @@
 sc_pos_moves_uci (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 2) {
-        return errorResult (ti, "Usage: sc_pos moves");
+        return errorResult (ti, "Aufruf: sc_pos moves");
     }
     Position * p = db->game->GetCurrentPos();
     sanListT sanList;
@@ -11634,7 +11634,7 @@
 sc_pos_pgnBoard (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_pos pgnBoard <pgn-text>");
+        return errorResult (ti, "Aufruf: sc_pos pgnBoard <pgn-text>");
     }
 
     Game * g = scratchGame;
@@ -11669,7 +11669,7 @@
 int
 sc_pos_probe (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_pos probe [score|report|optimal|board <sq>]";
+    const char * usage = "Aufruf: sc_pos probe [score|report|optimal|board <sq>]";
     static const char * options[] = {
         "score", "report", "optimal", "board", NULL
     };
@@ -11718,7 +11718,7 @@
 int
 sc_pos_probe_board (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_pos probe board <square>";
+    const char * usage = "Aufruf: sc_pos probe board <square>";
 
     Position * pos = scratchPos;
     pos->CopyFrom (db->game->GetCurrentPos());
@@ -11770,7 +11770,7 @@
 sc_pos_setComment (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_pos setComment <comment-text>");
+        return errorResult (ti, "Aufruf: sc_pos setComment <comment-text>");
     }
     const char * str = argv[2];
     const char * oldComment = db->game->GetMoveComment();
@@ -11829,7 +11829,7 @@
 
     default:
         return errorResult (ti,
-                "Usage: sc_progressBar [canvas tagName width height]");
+                "Aufruf: sc_progressBar [canvas tagName width height]");
     }
     return TCL_OK;
 }
@@ -11899,7 +11899,7 @@
 
     if (! NameBase::IsValidNameType(nt)) {
         return errorResult (ti,
-                "Usage: sc_name correct p|e|s|r <corrections>");
+                "Aufruf: sc_name correct p|e|s|r <corrections>");
     }
     if (!db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -11970,7 +11970,7 @@
         delete[] startDate;
         delete[] endDate;
 
-        return setResult (ti, "No valid corrections were found.");
+        return setResult (ti, "Keine gültigen Korrekturen gefunden.");
     }
 
     // Write the name file first, for safety:
@@ -11978,7 +11978,7 @@
         delete[] newIDs;
         delete[] startDate;
         delete[] endDate;
-        return errorResult (ti, "Error writing name file.");
+        return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
     }
 
     // Now go through the index making each necessary change:
@@ -12068,7 +12068,7 @@
 		delete[] newIDs;
 		delete[] startDate;
 		delete[] endDate;
-                return errorResult (ti, "Error writing index file.");
+                return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
             }
         }
     }
@@ -12078,7 +12078,7 @@
     delete[] endDate;
 
     if (db->idx->WriteHeader() != OK) {
-        return errorResult (ti, "Error writing index file.");
+        return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
     }
 
     recalcNameFrequencies (db->nb, db->idx);
@@ -12087,7 +12087,7 @@
              correctionCount,
              NAME_TYPE_STRING[nt],
              strPlural (correctionCount),
-             instanceCount, strPlural (instanceCount));
+             instanceCount);
     Tcl_AppendResult (ti, temp, NULL);
     if (datefailedCount > 0) {
       sprintf (temp, "\n\n%u player name changes were ignored because of player age/game date considerations.", datefailedCount);
@@ -12110,7 +12110,7 @@
 int
 sc_name_edit (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_name edit <type> <editSelection> <oldName> <newName> <useRegexp>";
+    const char * usage = "Aufruf: sc_name edit <type> <editSelection> <oldName> <newName> <useRegexp>";
 
     if (!db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -12215,7 +12215,7 @@
     // skip this check is we are globbing or useRegexp, or the field is DATE or EVENT_DATE
     if (option != OPT_DATE  &&  option != OPT_EVENTDATE && ! glob && ! useRegexp) {
         if (db->nb->FindExactName (nt, oldName, &oldID) != OK) {
-            Tcl_AppendResult (ti, "The ", NAME_TYPE_STRING[nt], " name \"", oldName, "\" does not exist.", NULL);
+            Tcl_AppendResult (ti, "Der ", NAME_TYPE_STRING[nt], "name \"", oldName, "\" existiert nicht.", NULL);
             return TCL_ERROR;
         }
     }
@@ -12226,10 +12226,10 @@
     if (editSelection == EDIT_CTABLE) {
         Game * g = db->game;
         if (db->nb->FindExactName (NAME_EVENT, g->GetEventStr(), &eventId) != OK) {
-            return errorResult (ti, "There are no crosstable games.");
+            return errorResult (ti, "Es gibt keine Kreuztabellenpartien.");
         }
         if (db->nb->FindExactName (NAME_SITE, g->GetSiteStr(), &siteId) != OK) {
-            return errorResult (ti, "There are no crosstable games.");
+            return errorResult (ti, "Es gibt keine Kreuztabellenpartien.");
         }
 
         if (date_GetMonthDay (g->GetDate()) == 0) {
@@ -12247,12 +12247,12 @@
     idNumberT newID = 0;
     if (option != OPT_RATING  &&  option != OPT_DATE  &&  option != OPT_EVENTDATE) {
         if (db->nb->AddName (nt, newName, &newID) == ERROR_NameBaseFull) {
-            return errorResult (ti, "Name file is full; cannot add name.");
+            return errorResult (ti, "Die Namensdatei ist voll, Name kann nicht hinzugefügt werden.");
         }
 
         // Write the namebase to disk, if this is not a memory-only database:
         if (! db->memoryOnly  &&  db->nb->WriteNameFile() != OK) {
-            return errorResult (ti, "Error writing name file.");
+            return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
         }
     }
 
@@ -12413,7 +12413,7 @@
         // Write this entry if any edits were made:
         if (edits != 0) {
             if (db->idx->WriteEntries (&newIE, i, 1) != OK) {
-                return errorResult (ti, "Error writing index file.");
+                return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
             }
             if (option != OPT_RATING  &&  option != OPT_DATE && option != OPT_EVENTDATE) {
                 db->nb->IncFrequency (nt, newID, edits);
@@ -12424,15 +12424,15 @@
     }
 
     if (db->idx->WriteHeader() != OK) {
-        return errorResult (ti, "Error writing index file.");
+        return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
     }
 
     char temp[500];
     if (option == OPT_RATING) {
-        sprintf (temp, "Edited rating for %u games of \"%s\".",
+        sprintf (temp, "Rating für %u Partien von \"%s\" bearbeitet.",
                  numChanges, oldName);
     } else {
-        sprintf (temp, "Changed %u of \"%s\" to \"%s\".",
+        sprintf (temp, "%u von \"%s\" nach \"%s\" geändert.",
                  numChanges, oldName, newName);
     }
     Tcl_AppendResult (ti, temp, NULL);
@@ -12445,7 +12445,7 @@
 int
 sc_name_retrievename (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usageStr = "Usage: sc_name retrievename <player>";
+    const char * usageStr = "Aufruf: sc_name retrievename <player>";
     SpellChecker * spChecker = spellChecker[NAME_PLAYER];
 
     if (argc != 3 ) { return errorResult (ti, usageStr); }
@@ -12483,7 +12483,7 @@
 {
     static char * lastPlayerName = NULL;
     // this needs overhauling S.A
-    const char * usageStr = "Usage: sc_name info [-ratings[:YEAR] -elo:ELO|-htext] <player> ";
+    const char * usageStr = "Aufruf: sc_name info [-ratings[:YEAR] -elo:ELO|-htext] <player> ";
     uint startYear = 1900;
     uint startElo = 0;
     extern spellingT countryTable[];
@@ -12662,10 +12662,10 @@
 	      if (titleTable[i].id[0] != 0) {
 		// this is a little confusing, just to get the multiple "titles" on one line
 		if (count==0 && mark)
-		  Tcl_AppendResult (ti, startHeading, translate (ti,"Title"), ":	", endHeading, titleTable[i].data, NULL);
+		  Tcl_AppendResult (ti, startHeading, translate (ti, "Titel"), ":	", endHeading, titleTable[i].data, NULL);
 		else {
 		  if (count==0)
-		    Tcl_AppendResult (ti, startHeading, translate (ti,"Title"), ":	", endHeading, titleTable[i].data, "  ", t_elo, newline,  NULL);
+		    Tcl_AppendResult (ti, startHeading, translate (ti, "Titel"), ":	", endHeading, titleTable[i].data, "  ", t_elo, newline,  NULL);
 		  else {
 		    if (mark)
 		      Tcl_AppendResult (ti, ",  ", titleTable[i].data, NULL);
@@ -12684,7 +12684,7 @@
 		    mark2++;
 		  Tcl_AppendResult (ti, startHeading, translate (ti,"Elo"), ":	", endHeading, mark2, newline, NULL);
 		} else {
-		  Tcl_AppendResult (ti, startHeading, translate (ti,"Title"), ":	", endHeading, t_title, "  ", t_elo, newline, NULL);
+		  Tcl_AppendResult (ti, startHeading, translate (ti, "Titel"), ":	", endHeading, t_title, "  ", t_elo, newline, NULL);
 		}
 	      }
 
@@ -12724,10 +12724,10 @@
 
 	      if (t_country[0] != '-') {
 		if (count==0 && !mark)
-		  Tcl_AppendResult (ti, startHeading, translate (ti,"Country"), ":	", endHeading, temp , newline, NULL);
+		  Tcl_AppendResult (ti, startHeading, translate (ti, "Land"), ":	", endHeading, temp , newline, NULL);
 		else {
 		  if (count==0)
-		    Tcl_AppendResult (ti, startHeading, translate (ti,"Country"), ":	", endHeading, temp , NULL);
+		    Tcl_AppendResult (ti, startHeading, translate (ti, "Land"), ":	", endHeading, temp , NULL);
 		  else {
 		    if (mark)
 		      Tcl_AppendResult (ti, ",  ", temp , NULL);
@@ -12746,7 +12746,7 @@
 
 	    // Birthyear
 	    if (*t_year) {
-	      Tcl_AppendResult (ti, startHeading, "Born:	", endHeading, t_year, newline, NULL);
+	      Tcl_AppendResult (ti, startHeading, "Geboren:	", endHeading, t_year, newline, NULL);
 	    }
 
 	}
@@ -12754,7 +12754,7 @@
 	// biography
 	const bioNoteT * note = spChecker->GetBioData (playerName);
 	if (note != NULL) {
-	    Tcl_AppendResult (ti, startHeading, translate (ti, "Biography"), ":", endHeading, newline, NULL);
+	    Tcl_AppendResult (ti, startHeading, translate (ti, "Biografie"), ":", endHeading, newline, NULL);
 	    while (note != NULL) {
 		Tcl_AppendResult (ti, "	", note->text, newline, NULL);
 		note = note->next;
@@ -12937,9 +12937,9 @@
     char trWhite[128];
     char trBlack[128];
     char trTotal[128];
-    strcpy (trWhite , translate (ti, "White"));
-    strcpy (trBlack , translate (ti, "Black"));
-    strcpy (trTotal , translate (ti, "Total"));
+    strcpy (trWhite , translate (ti, "Weiß"));
+    strcpy (trBlack , translate (ti, "Schwarz"));
+    strcpy (trTotal , translate (ti, "Gesamt"));
 
     uint wWidth = strLength (trWhite);
     uint bWidth = strLength (trBlack);
@@ -12969,7 +12969,7 @@
     if (ratingsOnly) { goto doRatings; }
 
     if (totalcount[STATS_ALL] == 0) {
-      Tcl_AppendResult (ti, "0 ", translate (ti, "games"), NULL);
+      Tcl_AppendResult (ti, "0 ", translate (ti, "Partien"), NULL);
       return TCL_OK;
     }
 
@@ -12977,7 +12977,7 @@
              htextOutput ? "<green><run sc_name info -faA {}; ::playerInfoRefresh>" : "",
              totalcount[STATS_ALL],
              (totalcount[STATS_ALL] == 1 ?
-              translate (ti, "game") : translate (ti, "games")),
+              translate (ti, "Partie") : translate (ti, "Partien")),
              htextOutput ? "</run></green>" : "");
     Tcl_AppendResult (ti, temp, NULL);
 
@@ -12989,7 +12989,7 @@
     if (lastGameDate > firstGameDate) {
         date_DecodeToString (lastGameDate, temp);
         strTrimDate (temp);
-        Tcl_AppendResult (ti, "  to  ", temp, NULL);
+        Tcl_AppendResult (ti, "  bis  ", temp, NULL);
     }
 
     Tcl_AppendResult (ti, newline, NULL);
@@ -13000,7 +13000,7 @@
 	       htextOutput ? "<green><run sc_name info -F {}; ::playerInfoRefresh>" : "",
 	       totalcount[STATS_FILTER],
 	       (totalcount[STATS_FILTER] == 1 ?
-		translate (ti, "game") : translate (ti, "games")),
+		translate (ti, "Partie") : translate (ti, "Partien")),
 	       htextOutput ? "</run></green>" : "");
       Tcl_AppendResult (ti, temp, NULL);
     }
@@ -13011,9 +13011,9 @@
             startHeading,
 	    htextOutput ? "<tt>" : "",
 	    wbtWidth+18,
-	    "Won",
-	    "Lost",
-	    "Drawn",
+	    "Gew.",
+	    "Verl.",
+	    "Remis",
 	    htextOutput ? "</tt>" : "",
             endHeading);
 
@@ -13381,7 +13381,7 @@
 sc_name_match (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     const char * usage = \
-        "Usage: sc_name match [-elo] <nameType> <prefix> <maxMatches>";
+        "Aufruf: sc_name match [-elo] <nameType> <prefix> <maxMatches>";
 
     int arg = 2;
     int argsleft = argc - 2;
@@ -13510,7 +13510,7 @@
 int
 sc_name_plist (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
-    const char * usage = "Usage: sc_name plist [-<option> <value> ...]";
+    const char * usage = "Aufruf: sc_name plist [-<option> <value> ...]";
 
     const char * namePrefix = "";
     const char * country = "";
@@ -13741,14 +13741,14 @@
         return errorResult (ti, errMsgReadOnly(ti));
     }
     if (sp == NULL) {
-        Tcl_AppendResult (ti, "A spellcheck file has not been loaded.\n\n",
-                          "You can load one from the Options menu.", NULL);
+        Tcl_AppendResult (ti, "Eine Schreibkorrekturdatei wurde nicht geladen.\n\n",
+                          "Sie können eine aus dem Optionenmenü laden.", NULL);
         return TCL_ERROR;
     }
     if (! sp->HasEloData()) {
-        Tcl_AppendResult (ti, "The current spelling file does not have Elo ratings.\n\n",
-                          "Please load \"ratings.ssp\" (available from the Scid website) ",
-                          "as your spellcheck file.", NULL);
+        Tcl_AppendResult (ti, "Die aktuelle Schreibkorrekturdatei hat keine Elo-Ratings.\n\n",
+                          "Bitte laden Sie \"ratings.ssp\" (auf der Internetseite von Scid verfügbar) ",
+                          "als Ihre Schreibkorrekturdatei", NULL);
 
         return TCL_ERROR;
     }
@@ -13820,7 +13820,7 @@
                     newIE.SetBlackRatingType (RATING_Elo);
                 }
                 if (db->idx->WriteEntries (&newIE, gnum, 1) != OK) {
-                    return errorResult (ti, "Error writing index file.");
+                    return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
                 }
             }
         }
@@ -13852,7 +13852,7 @@
     }
 
     if (argc > 5) {
-        return errorResult (ti, "Usage: sc_name read <spellcheck-file> [-checkPlayerOrder <bool>]");
+        return errorResult (ti, "Aufruf: sc_name read <spellcheck-file> [-checkPlayerOrder <bool>]");
     }
     const char * filename = argv[2];
     bool checkPlayerOrder = false;
@@ -13873,7 +13873,7 @@
         if (temp_spellChecker->ReadSpellCheckFile (filename, checkPlayerOrder) != OK) {
             delete temp_spellChecker;
             Tcl_ResetResult (ti);
-            return errorResult (ti, "Error reading name spellcheck file.");
+            return errorResult (ti, "Fehler beim Lesen der Namenskorrekturdatei.");
         }
         if (spellChecker[nt] != NULL) { delete spellChecker[nt]; }
         spellChecker[nt] = temp_spellChecker;
@@ -13919,7 +13919,7 @@
     nameT nt = NAME_INVALID;
     bool doSurnames = false;
     bool ambiguous = true;
-    const char * usage = "Usage: sc_name spellcheck [-surnames <boolean>] [-ambiguous <boolean>] players|events|sites|rounds";
+    const char * usage = "Aufruf: sc_name spellcheck [-surnames <boolean>] [-ambiguous <boolean>] players|events|sites|rounds";
 
     const char * options[] = {
         "-surnames", "-ambiguous", NULL
@@ -13961,8 +13961,8 @@
         return errorResult (ti, errMsgReadOnly(ti));
     }
     if (spellChecker[nt] == NULL) {
-        Tcl_AppendResult (ti, "A spellcheck file has not been loaded.\n\n",
-                          "You can load one from the Options menu.", NULL);
+        Tcl_AppendResult (ti, "Eine Schreibkorrekturdatei wurde nicht geladen.\n\n",
+                          "Sie können eine aus dem Optionenmenü laden.", NULL);
         return TCL_ERROR;
     }
 
@@ -14132,7 +14132,7 @@
 
     // Generate message
 
-    sprintf (tempStr, "Scid found %u %s name correction%s.",
+    sprintf (tempStr, "Scid hat %u Namenskorrekturen für %s gefunden%s.",
              correctionCount, NAME_TYPE_STRING[nt],
              strPlural (correctionCount));
     Tcl_AppendResult (ti, tempStr, NULL);
@@ -14178,7 +14178,7 @@
     };
 
     static const char * usage =
-        "Usage: sc_report opening|player <command> [<options...>]";
+        "Aufruf: sc_report opening|player <command> [<options...>]";
     OpTable * report = NULL;
     if (argc < 2) {
         return errorResult (ti, usage);
@@ -14209,7 +14209,7 @@
     switch (index) {
     case OPT_AVGLENGTH:
         if (argc != 4) {
-            return errorResult (ti, "Usage: sc_report player|opening avgLength 1|=|0|*");
+            return errorResult (ti, "Aufruf: sc_report player|opening avgLength 1|=|0|*");
         } else {
             resultT result = strGetResult (argv[3]);
             appendUintElement (ti, report->AvgLength (result));
@@ -14219,7 +14219,7 @@
 
     case OPT_BEST:
         if (argc != 5) {
-            return errorResult (ti, "Usage: sc_report opening|player best w|b|a|o|n <count>");
+            return errorResult (ti, "Aufruf: sc_report opening|player best w|b|a|o|n <count>");
         }
         dstr = new DString;
         report->BestGames (dstr, strGetUnsigned(argv[4]), argv[3]);
@@ -14246,7 +14246,7 @@
 
     case OPT_ELO:
         if (argc != 4) {
-            return errorResult (ti, "Usage: sc_report opening|player elo white|black");
+            return errorResult (ti, "Aufruf: sc_report opening|player elo white|black");
         } else {
             colorT color = WHITE;
             uint count = 0;
@@ -14264,14 +14264,14 @@
     case OPT_ENDMAT:
         dstr = new DString;
         report->EndMaterialReport (dstr,
-                       translate (ti, "OprepReportGames", "Report games"),
-                       translate (ti, "OprepAllGames", "All games"));
+                       translate (ti, "OprepReportGames", "Partienbericht"),
+                       translate (ti, "OprepAllGames", "Alle Partien"));
         Tcl_AppendResult (ti, dstr->Data(), NULL);
         break;
 
     case OPT_FORMAT:
         if (argc != 4) {
-            return errorResult (ti, "Usage: sc_report opening|player format latex|html|text|ctext");
+            return errorResult (ti, "Aufruf: sc_report opening|player format latex|html|text|ctext");
         }
         report->SetFormat (argv[3]);
         break;
@@ -14278,7 +14278,7 @@
 
     case OPT_FREQ:
         if (argc != 4) {
-            return errorResult (ti, "Usage: sc_report opening|player frequency 1|=|0|*");
+            return errorResult (ti, "Aufruf: sc_report opening|player frequency 1|=|0|*");
         } else {
             resultT result = strGetResult (argv[3]);
             appendUintElement (ti, report->PercentFreq (result));
@@ -14300,11 +14300,11 @@
         } else if (argc == 4  &&  argv[3][0] == 'r') {
             return setUintResult (ti, OPTABLE_MAX_ROWS);
         }
-        return errorResult (ti, "Usage: sc_report opening|player max games|rows");
+        return errorResult (ti, "Aufruf: sc_report opening|player max games|rows");
 
     case OPT_MOVEORDERS:
         if (argc != 4) {
-            return errorResult (ti, "Usage: sc_report opening|player moveOrders <count>");
+            return errorResult (ti, "Aufruf: sc_report opening|player moveOrders <count>");
         }
         dstr = new DString;
         report->PopularMoveOrders (dstr, strGetUnsigned(argv[3]));
@@ -14313,7 +14313,7 @@
 
     case OPT_NOTES:
         if (argc < 4  ||  argc > 5) {
-            return errorResult (ti, "Usage: sc_report opening|player notes <0|1> [numrows]");
+            return errorResult (ti, "Aufruf: sc_report opening|player notes <0|1> [numrows]");
         }
         report->ClearNotes ();
         if (strGetBoolean (argv[3])  &&  report->GetNumLines() > 0) {
@@ -14331,7 +14331,7 @@
 
     case OPT_PLAYERS:
         if (argc != 5) {
-            return errorResult (ti, "Usage: sc_report opening|player players w|b <count>");
+            return errorResult (ti, "Aufruf: sc_report opening|player players w|b <count>");
         } else {
             colorT color = WHITE;
             if (argv[3][0] == 'B'  ||  argv[3][0] == 'b') { color = BLACK; }
@@ -14343,7 +14343,7 @@
 
     case OPT_PRINT:
         if (argc < 3  ||  argc > 6) {
-            return errorResult (ti, "Usage: sc_report opening|players print [numrows] [title] [comment]");
+            return errorResult (ti, "Aufruf: sc_report opening|players print [numrows] [title] [comment]");
         }
         report->GuessNumRows ();
         if (argc > 3) {
@@ -14406,7 +14406,7 @@
     uint maxTableLines = OPTABLE_MAX_TABLE_LINES;
     uint maxLines = OPTABLE_MAX_LINES;
     static const char * usage =
-        "Usage: sc_report opening|player create [maxExtraMoves] [maxTableGames] [maxGames] [excludeMove]";
+        "Aufruf: sc_report opening|player create [maxExtraMoves] [maxTableGames] [maxGames] [excludeMove]";
 
     uint reportType = 0;
     if (argc < 2) {
@@ -14472,10 +14472,10 @@
         IndexEntry * ie = db->idx->FetchEntry (gnum);
         if (ply != 0) {
             if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(), ie->GetLength()) != OK) {
-                return errorResult (ti, "Error reading game file.");
+                return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
             }
             if (scratchGame->Decode (db->bbuf, GAME_DECODE_ALL) != OK) {
-                return errorResult (ti, "Error decoding game.");
+                return errorResult (ti, "Fehler beim Dekodieren der Partie.");
             }
             scratchGame->LoadStandardTags (ie, db->nb);
             scratchGame->MoveToPly (ply - 1);
@@ -14506,7 +14506,7 @@
 sc_report_select (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     static const char * usage =
-        "Usage: sc_report opening|player select <eg|note|mo|theme|all> <number>";
+        "Aufruf: sc_report opening|player select <eg|note|mo|theme|all> <number>";
     if (argc != 5) {
         return errorResult (ti, usage);
     }
@@ -14606,7 +14606,7 @@
 sc_tree_best (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 7) {
-        return errorResult (ti, "Usage: sc_tree best <baseNum> <count> <results> <sort> <formatStr>");
+        return errorResult (ti, "Aufruf: sc_tree best <baseNum> <count> <results> <sort> <formatStr>");
     }
 
     scidBaseT * base = db;
@@ -14782,7 +14782,7 @@
 sc_tree_clean (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc < 3 || argc > 4) {
-        return errorResult (ti, "Usage: sc_tree clean <baseNum> [updateFilter]");
+        return errorResult (ti, "Aufruf: sc_tree clean <baseNum> [updateFilter]");
     }
 
     scidBaseT * base = db;
@@ -14834,7 +14834,7 @@
 sc_tree_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_tree move <baseNum> <lineNum>");
+        return errorResult (ti, "Aufruf: sc_tree move <baseNum> <lineNum>");
     }
 
     scidBaseT * base = db;
@@ -14921,7 +14921,7 @@
     }
 
     if (base->treeCache->WriteFile (base->fileName) != OK) {
-        return errorResult (ti, "Error writing Scid tree cache file.");
+        return errorResult (ti, "Fehler beim Schreiben der Zwischenspeicherdatei für den Scid-Baum.");
     }
     return setUintResult (ti, fileSize (base->fileName, TREEFILE_SUFFIX));
 }
@@ -14984,7 +14984,7 @@
 sc_tree_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     static const char * usageStr =
-	"Usage: sc_tree search [-hideMoves <0|1>] [-sort alpha|eco|frequency|score] [-time <0|1>] [-epd <0|1>] [-list <0|1>] [-fastmode <0|1>] [-adjust <0|1>] [-short <0|1>] [-base <baseNumber>]";
+	"Aufruf: sc_tree search [-hideMoves <0|1>] [-sort alpha|eco|frequency|score] [-time <0|1>] [-epd <0|1>] [-list <0|1>] [-fastmode <0|1>] [-adjust <0|1>] [-short <0|1>] [-base <baseNumber>]";
 
       // Sort options: these should match the moveSortE enumerated type.
       static const char * sortOptions[] = {
@@ -15605,7 +15605,7 @@
 sc_tree_cachesize (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
   if (argc != 4) {
-    return errorResult (ti, "Usage: sc_tree cachesize <base> <size>");
+    return errorResult (ti, "Aufruf: sc_tree cachesize <base> <size>");
   }
   scidBaseT * base = NULL;
   int baseNum = strGetInteger (argv[2]);
@@ -15624,7 +15624,7 @@
 sc_tree_cacheinfo (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
   if (argc != 3) {
-    return errorResult (ti, "Usage: sc_tree cacheinfo <base>");
+    return errorResult (ti, "Aufruf: sc_tree cacheinfo <base>");
   }
   scidBaseT * base = NULL;
   int baseNum = strGetInteger (argv[2]);
@@ -15716,7 +15716,7 @@
 sc_search_board (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     const char * usageStr =
-	"Usage: sc_search board <filterOp> <searchType> <searchInVars> <flip> [<base>]";
+	"Aufruf: sc_search board <filterOp> <searchType> <searchInVars> <flip> [<base>]";
     bool showProgress = startProgressBar();
     if (!db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -15888,7 +15888,7 @@
         // At this point, the game needs to be loaded:
         if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(),
                                  ie->GetLength()) != OK) {
-            return errorResult (ti, "Error reading game file.");
+            return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
         }
         uint ply = 0;
         if (useVars) {
@@ -15949,7 +15949,7 @@
              centisecs / 100, decimalPointChar, centisecs % 100);
     Tcl_AppendResult (ti, temp, NULL);
 #ifdef SHOW_SKIPPED_STATS
-    sprintf(temp, "  Skipped %u games.", skipcount);
+    sprintf(temp, "  %u Partien übersprungen.", skipcount);
     Tcl_AppendResult (ti, temp, NULL);
 #endif
 
@@ -15969,7 +15969,7 @@
 sc_search_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     const char * usageStr =
-	"Usage: sc_search moves <filterOp> <moves> <checkTest> <sideToMove>";
+	"Aufruf: sc_search moves <filterOp> <moves> <checkTest> <sideToMove>";
     bool showProgress = startProgressBar();
     char **m_argv;
     int m_argc;
@@ -16062,7 +16062,7 @@
         // At this point, the game needs to be loaded:
         if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(),
                                  ie->GetLength()) != OK) {
-            return errorResult (ti, "Error reading game file.");
+            return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
         }
 
 	g->Decode (db->bbuf, GAME_DECODE_NONE);
@@ -16091,7 +16091,7 @@
              centisecs / 100, decimalPointChar, centisecs % 100);
     Tcl_AppendResult (ti, temp, NULL);
 #ifdef SHOW_SKIPPED_STATS
-    sprintf(temp, "  Skipped %u games.", skipcount);
+    sprintf(temp, "  %u Partien übersprungen.", skipcount);
     Tcl_AppendResult (ti, temp, NULL);
 #endif
     Tcl_Free((char *) m_argv);
@@ -16107,7 +16107,7 @@
 {
     uint gameNum;
     const char * usageStr =
-      "Usage: sc_search cql <filterOp> <stripSwitch> <silentSwitch> <syntax>";
+      "Aufruf: sc_search cql <filterOp> <stripSwitch> <silentSwitch> <syntax>";
     bool showProgress = startProgressBar();
 
     if (argc != 6)
@@ -16153,7 +16153,7 @@
     if (setjmp(jump_buffer) != 0 ) {
       CqlReset();
       if (cqlErrMsg) Tcl_AppendResult (ti, cqlErrMsg, NULL);
-      else Tcl_AppendResult (ti, "Error reported back from CQL engine", NULL);
+      else Tcl_AppendResult (ti, "Von der CQL-Engine zurückgemeldeter Fehler", NULL);
       return TCL_OK;
     }
 
@@ -16229,7 +16229,7 @@
 
         // Load the game.
         if (db->gfile->ReadGame (db->bbuf, ie->GetOffset(), ie->GetLength()) != OK) {
-            return errorResult (ti, "Error reading game file.");
+            return errorResult (ti, "Fehler beim Lesen der Partiendatei.");
         }
 
         g->Decode (db->bbuf, GAME_DECODE_ALL); // variations, comments and non-standards
@@ -16290,13 +16290,13 @@
     if (dirtyFlag) {
         db->gfile->FlushAll();
         if (db->idx->WriteHeader() != OK) {
-            return errorResult (ti, "Error writing index file.");
+            return errorResult (ti, "Fehler beim Schreiben der Indexdatei.");
         }
         // Not sure this is absolutely necessary, only that counts are
         // bumped up and down when game is replaced.  But why should that
         // matter... it's a wash.
         if (! db->memoryOnly  &&  db->nb->WriteNameFile() != OK) {
-            return errorResult (ti, "Error writing name file.");
+            return errorResult (ti, "Fehler beim Schreiben der Namensdatei.");
         }
     }
 
@@ -16306,7 +16306,7 @@
     // If the jump flag is set, we're falling out with an exception.
     if (jumpFlag) {
       if (cqlErrMsg) Tcl_AppendResult (ti, cqlErrMsg, NULL);
-      else Tcl_AppendResult (ti, "Error reported back from CQL engine", NULL);
+      else Tcl_AppendResult (ti, "Von der CQL-Engine zurückgemeldeter Fehler", NULL);
     } else {
       char temp[200];
       int centisecs = timer.CentiSecs();
@@ -16318,7 +16318,7 @@
              centisecs / 100, decimalPointChar, centisecs % 100);
       Tcl_AppendResult (ti, temp, NULL);
 #ifdef SHOW_SKIPPED_STATS
-      sprintf(temp, "  Skipped %u games.", skipcount);
+      sprintf(temp, "  %u Partien übersprungen.", skipcount);
       Tcl_AppendResult (ti, temp, NULL);
 #endif
     }
@@ -16451,7 +16451,7 @@
 {
     bool showProgress = startProgressBar();
     if (! db->inUse) {
-        return errorResult (ti, "Not an open database.");
+        return errorResult (ti, "Keine geöffnete Datenbank.");
     }
 
     uint minMoves = 0;
@@ -16549,7 +16549,7 @@
 
         case OPT_PATTERN:
             if (parsePattern (value, &tempPatt) != OK) {
-                Tcl_AppendResult (ti, "Invalid pattern: ", value, NULL);
+                Tcl_AppendResult (ti, "Ungültiges Muster: ", value, NULL);
                 return TCL_ERROR;
             }
             // Only add to lists if a pattern was specified:
@@ -16579,7 +16579,7 @@
             return InvalidCommand (ti, "sc_search material", options);
         }
     }
-    if (arg != argc) { return errorResult (ti, "Odd number of parameters."); }
+    if (arg != argc) { return errorResult (ti, "Ungerade Anzahl an Parametern."); }
 
     // Sanity check of values:
     if (max[WQ] < min[WQ]) { max[WQ] = min[WQ]; }
@@ -16827,7 +16827,7 @@
              centisecs / 100, decimalPointChar, centisecs % 100);
     Tcl_AppendResult (ti, temp, NULL);
 #ifdef SHOW_SKIPPED_STATS
-    sprintf(temp, "  Skipped %u games.", skipcount);
+    sprintf(temp, "  %u Partien übersprungen.", skipcount);
     Tcl_AppendResult (ti, temp, NULL);
 #endif
 
@@ -17198,7 +17198,7 @@
     int pgnTextCount = 0;
     char ** sPgnText = NULL;
     bool ignoreCase = 0;
-    char gameEnd = 'A'; // Any
+    char gameEnd = 'B'; // Beliebig
 
     const char * options[] = {
         "white", "black", "event", "site", "round",
@@ -17394,7 +17394,7 @@
             return InvalidCommand (ti, "sc_search header", options);
         }
     }
-    if (arg != argc) { return errorResult (ti, "Odd number of parameters."); }
+    if (arg != argc) { return errorResult (ti, "Ungerade Anzahl an Parametern."); }
 
     // Set up White name matches array:
     if (sWhite != NULL  &&  sWhite[0] != 0) {
@@ -17621,7 +17621,7 @@
         filterOp = FILTEROP_AND;
     }
 
-    bool readGame = ((sTag && sTag[0]) || pgnTextCount > 0 || gameEnd == 'S' || gameEnd == 'C' || preComment || postComment);
+    bool readGame = ((sTag && sTag[0]) || pgnTextCount > 0 || gameEnd == 'P' || gameEnd == 'M' || preComment || postComment);
 
     // Here is the loop that searches on each game:
     for (uint i=0; i < db->numGames; i++) {
@@ -17755,11 +17755,11 @@
 
             if (match) {
 
-	      if (gameEnd == 'S' || gameEnd == 'C') {
+	      if (gameEnd == 'P' || gameEnd == 'M') {
                 // Game is actually at endPos, so this line should be removed
 		while (scratchGame->MoveForward() == OK) {} ;
 		Position * p = scratchGame->GetCurrentPos();
-		if (gameEnd == 'S') {
+		if (gameEnd == 'P') {
 		     match = (p->IsStaleMate());
 		} else {
 		     match = (p->IsKingInMate());
@@ -17840,7 +17840,7 @@
              centisecs / 100, decimalPointChar, centisecs % 100);
     Tcl_AppendResult (ti, temp, NULL);
 #ifdef SHOW_SKIPPED_STATS
-    sprintf(temp, "  Skipped %u games.", skipcount);
+    sprintf(temp, "  %u Partien übersprungen.", skipcount);
     Tcl_AppendResult (ti, temp, NULL);
 #endif
 
@@ -17934,12 +17934,12 @@
 {
 
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_var deletefree <number>");
+        return errorResult (ti, "Aufruf: sc_var deletefree <number>");
     }
 
     uint varNumber = strGetUnsigned (argv[2]);
     if (varNumber >= db->game->GetNumVariations()) {
-        return errorResult (ti, "No such variation!");
+        return errorResult (ti, "Keine solche Variante!");
     }
     db->game->DeleteVariationAndFree (varNumber);
     db->gameAltered = true;
@@ -17954,12 +17954,12 @@
 {
 
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_var delete <number>");
+        return errorResult (ti, "Aufruf: sc_var delete <number>");
     }
 
     uint varNumber = strGetUnsigned (argv[2]);
     if (varNumber >= db->game->GetNumVariations()) {
-        return errorResult (ti, "No such variation!");
+        return errorResult (ti, "Keine solche Variante!");
     }
     db->game->DeleteVariation (varNumber);
     db->gameAltered = true;
@@ -17973,12 +17973,12 @@
 sc_var_first (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_var first <number>");
+        return errorResult (ti, "Aufruf: sc_var first <number>");
     }
 
     uint varNumber = strGetUnsigned (argv[2]);
     if (varNumber >= db->game->GetNumVariations()) {
-        return errorResult (ti, "No such variation!");
+        return errorResult (ti, "Keine solche Variante!");
     }
     db->game->FirstVariation (varNumber);
     db->gameAltered = true;
@@ -18012,12 +18012,12 @@
 sc_var_enter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_var enter <number>");
+        return errorResult (ti, "Aufruf: sc_var enter <number>");
     }
 
     uint varNumber = strGetUnsigned (argv[2]);
     if (varNumber >= db->game->GetNumVariations()) {
-        return errorResult (ti, "No such variation!");
+        return errorResult (ti, "Keine solche Variante!");
     }
 
     db->game->MoveIntoVariation (varNumber);
@@ -18038,12 +18038,12 @@
 sc_var_promote (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_var promote <number>");
+        return errorResult (ti, "Aufruf: sc_var promote <number>");
     }
 
     uint varNumber = strGetUnsigned (argv[2]);
     if (varNumber >= db->game->GetNumVariations()) {
-        return errorResult (ti, "No such variation!");
+        return errorResult (ti, "Keine solche Variante!");
     }
     db->game->MainVariation (varNumber);
     db->gameAltered = true;
@@ -18098,7 +18098,7 @@
 sc_book_load (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_book load bookfile slot");
+        return errorResult (ti, "Aufruf: sc_book load bookfile slot");
     }
 
     uint slot = strGetUnsigned (argv[3]);
@@ -18106,7 +18106,7 @@
     int bookstate = polyglot_open(argv[2], slot);
 
     if (bookstate == -1 ) {
-       return errorResult (ti, "Unable to load book");
+       return errorResult (ti, "Buch kann nicht geladen werden");
     }
     if (bookstate  >  0 ) {
        // state == 1: book is read only
@@ -18115,7 +18115,7 @@
     return TCL_OK;
 
 //--//    if (polyglot_open(argv[2], slot) == -1 ) {
-//--//			return errorResult (ti, "Unable to load book");
+//--//			return errorResult (ti, "Buch kann nicht geladen werden");
 //--//		}
 //--//    return TCL_OK;
 }
@@ -18127,11 +18127,11 @@
 sc_book_close (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_book close slot");
+        return errorResult (ti, "Aufruf: sc_book close slot");
     }
     uint slot = strGetUnsigned (argv[2]);
     if (polyglot_close(slot) == -1 ) {
-        return errorResult (ti, "Error closing book");
+        return errorResult (ti, "Fehler beim Schließen des Buches");
     }
     return TCL_OK;
 }
@@ -18146,7 +18146,7 @@
     char boardStr[100];
 
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_book moves slot");
+        return errorResult (ti, "Aufruf: sc_book moves slot");
     }
     uint slot = strGetUnsigned (argv[2]);
     db->game->GetCurrentPos()->PrintFEN (boardStr, FEN_ALL_FIELDS);
@@ -18165,7 +18165,7 @@
     char boardStr[100];
 
     if (argc != 3) {
-        return errorResult (ti, "Usage: sc_book positions slot");
+        return errorResult (ti, "Aufruf: sc_book positions slot");
     }
     uint slot = strGetUnsigned (argv[2]);
     db->game->GetCurrentPos()->PrintFEN (boardStr, FEN_ALL_FIELDS);
@@ -18182,7 +18182,7 @@
 sc_book_update (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 4) {
-        return errorResult (ti, "Usage: sc_book update <probs> slot");
+        return errorResult (ti, "Aufruf: sc_book update <probs> slot");
     }
     uint slot = strGetUnsigned (argv[3]);
     scid_book_update( (char*) argv[2], slot );
@@ -18196,7 +18196,7 @@
 sc_book_movesupdate (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 {
     if (argc != 6) {
-        return errorResult (ti, "Usage: sc_book movesupdate <moves> <probs> slot tempfile");
+        return errorResult (ti, "Aufruf: sc_book movesupdate <moves> <probs> slot tempfile");
     }
     uint slot = strGetUnsigned (argv[4]);
     scid_book_movesupdate( (char*) argv[2], (char*) argv[3], slot, (char*) argv[5] );
Index: tcl/bitmaps.tcl
===================================================================
--- tcl/bitmaps.tcl	(revision 3386)
+++ tcl/bitmaps.tcl	(working copy)
@@ -71,19 +71,19 @@
 ### Process custom chess pieces
 
 if {[file isdirectory $scidPiecesDir]} {
-  ::splash::add "User Pieces: reading $scidPiecesDir"
+  ::splash::add "Benutzerfiguren: lese $scidPiecesDir"
   set pwd [pwd]
   cd $scidPiecesDir
   foreach i [glob -nocomplain *] {
       if {[ catch {source $i}]} {
-        ::splash::add "Loading file $i failed"
+        ::splash::add "Laden der Datei $i fehlgeschlagen"
       } else {
-        ::splash::add "Loaded file $i"
+        ::splash::add "Datei $i geladen"
       }
   }
   cd $pwd
 } else {
-  ::splash::add "User Pieces: no such directory $scidPiecesDir"
+  ::splash::add "Benutzerfiguren: kein Verzeichnis $scidPiecesDir vorhanden"
 }
 
 # To test images use -
@@ -104978,7 +104978,7 @@
         # probably better to have a blank image than program fail
         $p$size copy $p[expr {$size/2}] -zoom 2 2
       }]} {
-        ::splash::add "Error creating $font piece size $size" error
+        ::splash::add "Fehler beim Erstellen von $font Figurengröße $size" error
       }
       incr x $size
     }
@@ -106666,7 +106666,7 @@
 set user_textures 0
 set jpg_loaded 0
 if {[file isdirectory $scidTexturesDir]} {
-  ::splash::add "User Textures: processing $scidTexturesDir"
+  ::splash::add "Benutzertexturen: verarbeite $scidTexturesDir"
   set pwd [pwd]
   cd $scidTexturesDir
   foreach i [glob -nocomplain *_l.*] {
@@ -106674,9 +106674,9 @@
     set ext  [file extension $i]
     if {[string match .jp* $ext] && !$jpg_loaded} {
       if {[ catch {package require img::jpeg}]} {
-	::splash::add "Loading package img::jpeg failed"
+	::splash::add "Laden des Pakets img::jpeg fehlgeschlagen"
       } else {
-	::splash::add "Loaded package img::jpeg"
+	::splash::add "Paket img::jpeg geladen"
       }
       set jpg_loaded 1
     }
@@ -106688,15 +106688,15 @@
 	image create photo temptexture -file $i
 	image create photo temptexture -file $j
       }]} {
-	::splash::add "   Texture $base unhandled."
+	::splash::add "   Texturen $base unbearbeitet."
 	continue
      }
       image create photo ${k}-l -file $i
       image create photo ${k}-d -file $j
-      ::splash::add "   Adding texture $base"
+      ::splash::add "   Füge Textur $base hinzu"
       incr user_textures
       if {$user_textures == 10} {
-	::splash::add "   10 user textures found (max)."
+	::splash::add "   10 Benutzertexturen gefunden (max)."
         break
       }
     }
@@ -106703,7 +106703,7 @@
   }
   cd $pwd
 } else {
-  ::splash::add "User Textures: no such directory $scidTexturesDir"
+  ::splash::add "Benutzertexturen: kein Verzeichnis $scidTexturesDir vorhanden"
 }
 
 ### end of bitmaps.tcl
Index: tcl/board.tcl
===================================================================
--- tcl/board.tcl	(revision 3388)
+++ tcl/board.tcl	(working copy)
@@ -3012,7 +3012,7 @@
   if {[catch {
   package require img::window
   } result ]} {
-    set result "Screenshot requires Tcl package TkImg (libtk-img).\n\n$result"
+    set result "Bildschirmfoto erfordert Tcl-Paket TkImg (libtk-img).\n\n$result"
     tk_messageBox -type ok -icon error -title Scid -message $result
     return
   }
@@ -3060,7 +3060,7 @@
         -initialfile $filename.$format \
         -initialdir $::env(HOME) \
         -defaultextension .$format \
-        -title {Board Screenshot}]
+        -title {Schachbrettfoto}]
   }
 
   if {[llength $filename]} {
Index: tcl/config.tcl
===================================================================
--- tcl/config.tcl	(revision 3386)
+++ tcl/config.tcl	(working copy)
@@ -44,18 +44,18 @@
 
 ### Display directories
 
-::splash::add "scidShareDir is $scidShareDir"
+::splash::add "scidShareDir ist $scidShareDir"
 
 if {[file isdirectory $::scidBasesDir]} {
-  ::splash::add "scidBasesDir is $scidBasesDir"
+  ::splash::add "scidBasesDir ist $scidBasesDir"
 } else {
-  ::splash::add "scidBasesDir $scidBasesDir not found!" error
+  ::splash::add "scidBasesDir $scidBasesDir nicht gefunden!" error
 }
 
 if {[file isdirectory $::scidBooksDir]} {
-  ::splash::add "scidBooksDir is $scidBooksDir"
+  ::splash::add "scidBooksDir ist $scidBooksDir"
 } else {
-  ::splash::add "scidBooksDir $scidBooksDir not found!" error
+  ::splash::add "scidBooksDir $scidBooksDir nicht gefunden!" error
 }
 
 ### Setup for truetype (and PGN figurine) support
Index: tcl/edit.tcl
===================================================================
--- tcl/edit.tcl	(revision 3386)
+++ tcl/edit.tcl	(working copy)
@@ -5,9 +5,9 @@
 proc fenErrorDialog {{msg {}}} {
 
   if {[winfo exists .setup]} {
-    tk_messageBox -icon info -type ok -title "Scid: Invalid FEN" -message $msg -parent .setup
+    tk_messageBox -icon info -type ok -title "Scid: ungültiges FEN" -message $msg -parent .setup
   } else {
-    tk_messageBox -icon info -type ok -title "Scid: Invalid FEN" -message $msg 
+    tk_messageBox -icon info -type ok -title "Scid: ungültiges FEN" -message $msg 
   }
 
 }
@@ -465,7 +465,7 @@
   updateBoard -pgn
 
   toplevel $w
-  wm title $w "Setup Board"
+  wm title $w "Brett aufstellen"
   setWinLocation $w
 
   set selectedSq -1
@@ -511,9 +511,9 @@
 
   if {!$::macOS} {
   frame $sl.hints
-  label $sl.hints.label2 -text {Left button - Paste} -font font_SmallItalic
-  label $sl.hints.label3 -text {Middle - Select} -font font_SmallItalic
-  label $sl.hints.label4 -text {Right button - Clear} -font font_SmallItalic
+  label $sl.hints.label2 -text {Linke Maustaste - Einfügen} -font font_SmallItalic
+  label $sl.hints.label3 -text {Mittlere Maustaste - Auswählen} -font font_SmallItalic
+  label $sl.hints.label4 -text {Rechte Maustaste - Löschen} -font font_SmallItalic
   pack $sl.hints -side top -fill x
   pack $sl.hints.label2 $sl.hints.label3 $sl.hints.label4 -side left -expand yes -fill x
   }
@@ -669,7 +669,7 @@
   # Are these bullet-proof and correct ? 
   # but make them a little smaller, as they are hardly used
 
-  button $sr.b.swap -text {Swap Colours} -command {
+  button $sr.b.swap -text {Farben tauschen} -command {
     set tmp {}
     foreach char [split $setupBd {}] {
       append tmp [::utils::string::invertcase $char]
@@ -693,7 +693,7 @@
     makeSetupFen
   } -width 10 -font font_Small
 
-  button $sr.b.invert -text Invert -command {
+  button $sr.b.invert -text Invertieren -command {
     # reverse line order
     set tmp [lindex $setupBd 0] ; # sometimes setupBd has trailing side-to-move. Correct ???
     set setupBd {}
@@ -707,7 +707,7 @@
     makeSetupFen
   } -width 10 -font font_Small
 
-  button $sr.b.transpose -text Transpose -command {
+  button $sr.b.transpose -text Umstellen -command {
     # reverse each line
     set tmp [lindex $setupBd 0] ; # sometimes setupBd has trailing side-to-move. Correct ???
     set setupBd {}
Index: tcl/end.tcl
===================================================================
--- tcl/end.tcl	(revision 3394)
+++ tcl/end.tcl	(working copy)
@@ -124,7 +124,7 @@
   sc_game pop
   if {$err} {
     tk_messageBox -title Scid -type ok -icon info \
-        -message "Unable to merge the selected game:\n$result"
+        -message "Kann die gewählte Partie nicht zusammenfügen:\n$result"
     return
   }
   set merge(base) $base
@@ -147,7 +147,7 @@
   pack $w.f.text -side left -fill both -expand yes
   pack $w.f -fill both -expand yes
 
-  label $w.b.label -text "Up to move  " -font font_Regular
+  label $w.b.label -text "Am Zug      " -font font_Regular
   pack $w.b.label -side left -padx 2
   foreach i {5 10 15 20 25 30 35 40} {
     radiobutton $w.b.m$i -text [format "%2i" $i] -variable merge(ply) -value [expr {$i * 2}] \
@@ -204,9 +204,9 @@
     return 1
   } else {
     if {[winfo exists $w]} {
-      tk_messageBox -type ok -icon error -title "Error" -message "Base $base is no longer open." -parent $w
+      tk_messageBox -type ok -icon error -title "Error" -message "Datenbank $base ist nicht länger geöffnet." -parent $w
     } else {
-      tk_messageBox -type ok -icon error -title "Error" -message "Base $base is no longer open."
+      tk_messageBox -type ok -icon error -title "Error" -message "Datenbank $base ist nicht länger geöffnet."
     }
     return 0
   }
@@ -226,7 +226,7 @@
 
   toplevel $w
   wm withdraw $w
-  wm title $w "Set $exportType file export text"
+  wm title $w "Dateiexporttext für $exportType setzen"
   if {$exportType == "Latex"} {
       bind $w <F1> {helpWindow LaTeX}
   }
@@ -237,8 +237,8 @@
   set pane [::utils::pane::Create $w.pane start end 500 400 0.7]
   ::utils::pane::SetRange $w.pane 0.3 0.7
   pack $pane -side top -expand true -fill both
-  foreach f [list $pane.start $pane.end] type {start end} {
-    label $f.title -font font_Bold -text "Text at $type of $exportType file"
+  foreach f [list $pane.start $pane.end] type {Anfang Ende} {
+    label $f.title -font font_Bold -text "Text am $type der ${exportType}-Datei"
     text $f.text -wrap none  \
         -yscroll "$f.ybar set" -xscroll "$f.xbar set"
     scrollbar $f.ybar -orient vertical -command "$f.text yview"
@@ -256,18 +256,18 @@
   
   # Additional Latex options
   if {$exportType == "Latex"} {
-    label $w.descr -font font_Bold -text "LaTeX System Options"
+    label $w.descr -font font_Bold -text "LaTeX-Systemoptionen"
     pack $w.descr -side top
 
     foreach f {rendering viewer} {
       pack [frame $w.$f] -fill x -side top -pady 3
-      pack [label $w.$f.label -text "Command for $f:"] -side left
+      pack [label $w.$f.label -text "Befehl für $f:"] -side left
       pack [entry $w.$f.entry -width 30] -side right -padx 2
     }
     $w.rendering.entry insert 0  $latexRendering(engine)
     $w.viewer.entry    insert 0  $latexRendering(viewer)
 
-    button $w.buttons.default -text "Reset to Default" -command "
+    button $w.buttons.default -text "Auf Voreinstellung zurücksetzen" -command "
       $pane.start.text delete 1.0 end
       $pane.start.text insert end \$default_exportStartFile(Latex)
       $pane.end.text delete 1.0 end
@@ -287,7 +287,7 @@
     "        
     addHorizontalRule $w
   } else {
-    button $w.buttons.default -text "Reset to Default" -command "
+    button $w.buttons.default -text "Auf Voreinstellung zurücksetzen" -command "
     $pane.start.text delete 1.0 end
     $pane.start.text insert end \$default_exportStartFile($exportType)
     $pane.end.text delete 1.0 end
@@ -465,7 +465,7 @@
 
   # Extra option for PGN format: handling of null moves
   if {$exportType == "PGN"} {
-    label $w.o.nullMoves -text "Convert null moves to comments"
+    label $w.o.nullMoves -text "Nullzüge in Kommentare umwandeln"
     radiobutton $w.o.convertNullMoves -text $::tr(Yes) -variable exportFlags(convertNullMoves) -value 1
     radiobutton $w.o.keepNullMoves -text $::tr(No) -variable exportFlags(convertNullMoves) -value 0
     grid $w.o.nullMoves        -row $row -column 0 -sticky w
@@ -474,7 +474,7 @@
     incr row
   }
 
-    label $w.o.utf8 -text "Character encoding"
+    label $w.o.utf8 -text "Zeichenkodierung"
     radiobutton $w.o.utf8True -text Utf-8 -variable exportFlags(utf8) -value 1
     radiobutton $w.o.utf8False -text Latin-1 -variable exportFlags(utf8) -value 0
     grid $w.o.utf8       -row $row -column 0 -sticky w
@@ -485,7 +485,7 @@
   # Extra option for HTML format: diagram image set
   if {$exportType == "HTML"} {
     label $w.o.space3 -text ""
-    label $w.o.hdiag -text "Diagram"
+    label $w.o.hdiag -text "Diagramm"
     radiobutton $w.o.hb0 -text "bitmaps" -variable exportFlags(htmldiag) -value 0
     radiobutton $w.o.hb1 -text "bitmaps2" -variable exportFlags(htmldiag) -value 1
     label $w.o.hl0 -image htmldiag0
@@ -531,13 +531,13 @@
   if {$exportFilter} {
     # Check that we have some games to export:
     if {![sc_base inUse]} {
-      tk_messageBox -title "Scid: Empty database" -type ok -icon info \
-          -message "This is an empty database, there are no games to export."
+      tk_messageBox -title "Scid: leere Datenbank" -type ok -icon info \
+          -message "Dies ist eine leere Datenbank, es gibt keine Partien zu exportieren."
       return
     }
     if {[sc_filter count] == 0} {
-      tk_messageBox -title "Scid: Filter empty" -type ok -icon info \
-          -message "The filter contains no games."
+      tk_messageBox -title "Scid: Filter leer" -type ok -icon info \
+          -message "Der Filter enthält keine Partien."
       return
     }
   }
@@ -557,7 +557,7 @@
     "HTML" {
       sc_info html $exportFlags(htmldiag)
       set ftype {
-        { "HTML files" {".html" ".htm"} }
+        { "HTML-Dateien" {".html" ".htm"} }
         { "All files" {"*"} }
       }
       set title "an HTML file"
@@ -566,7 +566,7 @@
     }
     "Latex" {
       set ftype {
-        { "LaTeX files" {".tex" ".ltx"} }
+        { "LaTeX-Dateien" {".tex" ".ltx"} }
         { "All files" {"*"} }
       }
       set title "a LaTeX file"
@@ -601,7 +601,7 @@
   if {$exportFilter} {
     progressWindow Scid "Exporting games" $::tr(Stop) sc_progressBar
   }
- # tk_messageBox -title "Debug" -type ok -icon error -message "Export Type $exportType" 
+ # tk_messageBox -title "Debug" -type ok -icon error -message "Exporttyp $exportType" 
   busyCursor .
   set error [catch {
   sc_base export $selection $exportType $fName -append $exportFlags(append) \
@@ -620,7 +620,7 @@
   unbusyCursor .
 
   if {$error} {
-    tk_messageBox -title "Scid: Oops" -type ok -icon error -message "File export/save failed."
+    tk_messageBox -title "Scid: Hoppla" -type ok -icon error -message "Dateiexport/-speichern fehlgeschlagen."
   }
 
   if {$exportType == "HTML"} {
@@ -640,7 +640,7 @@
 
   if {[sc_filter count] < 1} {
     tk_messageBox -type ok -icon info -title Scid \
-      -message "There are no games in the filter." -parent .glistWin
+      -message "Es gibt keine Partien im Filter." -parent .glistWin
     return
   }
 
@@ -681,7 +681,7 @@
   pack $w.preview -side top -fill x
   pack $w.xbar -side top -fill x
   pack [frame $w.b] -side bottom -fill x -pady 5
-  dialogbutton $w.b.default -text "Default" -command {set glexport $glexportDefault}
+  dialogbutton $w.b.default -text "Voreinstellung" -command {set glexport $glexportDefault}
   dialogbutton $w.b.ok -text "OK" -command saveExportGList
   dialogbutton $w.b.close -textvar ::tr(Cancel) -command "destroy $w"
   bind $w <Escape> "destroy $w"
@@ -717,7 +717,7 @@
   global glexport env
   set ftypes {{"Text files" {.txt}} {"All files" *}}
   set fname [tk_getSaveFile -filetypes $ftypes -parent .glexport \
-               -title "Save Game List" -initialdir $env(HOME)]
+               -title "Speichere Partienliste" -initialdir $env(HOME)]
   if {$fname == ""} { return }
   set showProgress 0
   if {[sc_filter count] >= 20000} { set showProgress 1 }
@@ -1059,20 +1059,20 @@
 
   if {![sc_base inUse]} {
     # We can't load a game, no database is open
-    tk_messageBox -title "Scid: No database open" -type ok -icon info \
-        -message "No database is open; open or create one first."
+    tk_messageBox -title "Scid: keine Datenbank geöffnet" -type ok -icon info \
+        -message "Keine Datenbank geöffnet; öffnen oder erstellen Sie eine zuerst."
     return
   }
 
   if {[sc_base isReadOnly]} {
-    tk_messageBox -type ok -icon error -title "Scid: Oops" \
-      -message "Database \"[file tail [sc_base filename]]\" is read-only."
+    tk_messageBox -type ok -icon error -title "Scid: Hoppla" \
+      -message "Datenbank \"[file tail [sc_base filename]]\" kann nur gelesen werden."
     return
   }
 
   if {$::trialMode} {
-    tk_messageBox -type ok -icon error -title "Scid: Trial Mode" \
-      -message "Game Saves disabled in Trial Mode."
+    tk_messageBox -type ok -icon error -title "Scid: Testmodus" \
+      -message "Partie speichern ist im Testmodus nicht aktiv."
     return
   }
 
@@ -1220,7 +1220,7 @@
 
   # Eco
 
-  label $f.ecolabel -text "ECO Code"
+  label $f.ecolabel -text "ECO-Code"
   ttk::entry $f.ecoentry -width 6  -textvariable eco -justify right
   grid $f.ecolabel -row 10 -column 0 -sticky w
   grid $f.ecoentry -row 10 -column 2 -sticky w
@@ -1342,13 +1342,13 @@
 
   frame $w.buttons
   if {$gnum == 0} {
-    button $w.buttons.prev -text "As last game" -command {
+    button $w.buttons.prev -text "Als letzte Partie" -command {
     }
   }
   dialogbutton $w.buttons.save -textvar ::tr(Save) -underline 0 -command {
     if {[string is integer -strict $eyear] && ![string is integer -strict $year]} {
-      tk_messageBox -type ok -icon error -title "Scid: Oops" \
-	-message "Event date can't exist without Game date." -parent .save
+      tk_messageBox -type ok -icon error -title "Scid: Hoppla" \
+	-message "Turnierdatum kann nicht ohne Partiedatum vorhanden sein." -parent .save
     } else {
       set extraTags [.save.g.extratext get 1.0 end-1c]
       if {[gsave $gsaveNum]} {
@@ -1437,13 +1437,13 @@
       set $i "?"
     }
     if {[string bytelength [set $i]] > 255} {
-      tk_messageBox -type ok -icon info -parent .save -title "Oops" -message "\"[string totitle $i]\" is larger than 255 bytes."
+      tk_messageBox -type ok -icon info -parent .save -title "Hoppla" -message "\"[string totitle $i]\" ist größer als 255 Bytes."
       return 0
     }
     foreach j $extraTagsList {
       if {[string trim $j] != {} && ![regexp {^[^ ]*  *".*"$} [string trim $j]]} {
-	tk_messageBox -type ok -icon info -parent .save -title "Oops" -message \
-        "Tag\n  $j\nis not in format\n  TagName \"TagData\""
+	tk_messageBox -type ok -icon info -parent .save -title "Hoppla" -message \
+        "Kennzeichen\n  $j\nist nicht im Format\n  TagName \"TagData\""
 	return 0
       }
     }
@@ -1941,7 +1941,7 @@
         "dock" -
         "nodock" {} ; # handled later
         default {
-          ::splash::add "Warning: unknown option: \"$arg\"" error
+          ::splash::add "Warnung: unbekannte Option: \"$arg\"" error
         }
       }
     } else {
@@ -1967,7 +1967,7 @@
 # Try to find tablebases:
 if {$loadAtStart(tb)} {
   if {[sc_info tb]} {
-    ::splash::add "Checking for endgame tablebase files."
+    ::splash::add "Prüfe auf Dateien für Endspieldatenbank."
     set tbDirs {}
     foreach i {1 2 3 4} {
       if {$initialDir(tablebase$i) != ""} {
@@ -1981,9 +1981,9 @@
       set result [sc_info tb $tbDirs]
     }
     if {$result == 0} {
-      ::splash::add "    No tablebases were found."
+      ::splash::add "    Keine Endspieldatenbanken gefunden."
     } else {
-      ::splash::add "    Tablebases with up to $result pieces were found."
+      ::splash::add "    Endspieldatenbanken mit bis zu $result Steinen gefunden."
     }
   }
 }
@@ -1996,12 +1996,12 @@
   if {[catch { sc_eco read $ecoFile_fullname } result]} {
     # Hmmm - failed. So try "scid.eco" in the current directory:
     if {[catch {sc_eco read "scid.eco"} result]} {
-      ::splash::add "Unable to open the ECO file: $ecoFile" error
+      ::splash::add "Kann ECO-Datei nicht öffnen: $ecoFile" error
     } else {
-      ::splash::add "ECO file \"./scid.eco\" loaded: $result positions."
+      ::splash::add "ECO-Datei \"./scid.eco\" geladen: $result Stellungen."
     }
   } else {
-    ::splash::add "ECO file \"$ecoFile_fullname\"  loaded: $result positions."
+    ::splash::add "ECO-Datei \"$ecoFile_fullname\"  geladen: $result Stellungen."
   }
 }
 
@@ -2010,10 +2010,10 @@
 set spellCheckFileExists 0
 if {$loadAtStart(spell)} {
   if {[catch {sc_name read $spellCheckFile} result]} {
-    ::splash::add "Unable to load the default spellcheck file: $spellCheckFile" error
+    ::splash::add "Kann Rechtschreibdatei nicht laden: $spellCheckFile" error
   } else {
-    ::splash::add "Spellcheck file \"$spellCheckFile\" loaded:"
-    ::splash::add "    [lindex $result 0] players, [lindex $result 1] events, [lindex $result 2] sites, [lindex $result 3] rounds."
+    ::splash::add "Rechtschreibdatei \"$spellCheckFile\" geladen:"
+    ::splash::add "    [lindex $result 0] Spieler, [lindex $result 1] Turniere, [lindex $result 2] Orte, [lindex $result 3] Runden."
     set spellCheckFileExists 1
   }
 }
@@ -2030,15 +2030,15 @@
 if {$defaultDBs != {}} {
   if {$argc == 0 && $mac_args == 0} {
     if {[file readable [lindex $defaultDBs 0]] || [file readable "[lindex $defaultDBs 0].si4"]} {
-      ::splash::add "Using default bases: $defaultDBs"
+      ::splash::add "Verwende Standarddatenbanken: $defaultDBs"
       set argv $defaultDBs
       set argc [llength $argv]
     } else {
-      ::splash::add "Not loading default bases as file [lindex $defaultDBs 0] not readble." error
+      ::splash::add "Standarddatenbanken nicht geladen, da Datei [lindex $defaultDBs 0] nicht gelesen werden kann." error
       set defaultDBs {}
     }
   } else {
-    ::splash::add "Not loading default bases as other command line args."
+    ::splash::add "Standarddatenbanken aufgrund anderer Kommandozeilenargumente nicht geladen."
   }
 }
 
@@ -2063,22 +2063,22 @@
     break
   }
   if {[string match "*.epd*" $startbase]} {
-    ::splash::add "Opening EPD file: $startbase"
+    ::splash::add "Öffne EPD-Datei: $startbase"
     if {![::epd::newEpdWin openSilent $startbase]} {
-      ::splash::add "   Error opening EPD file: $startbase" error
+      ::splash::add "   Fehler beim Öffnen der EPD-Datei: $startbase" error
     }
     set initialDir(epd) [file dirname $startbase]
     ::recentFiles::add $startbase
   } elseif {[string match "*.sso" $startbase]} {
-    ::splash::add "Opening search file: $startbase"
+    ::splash::add "Öffne Suchdatei: $startbase"
     if {[catch {uplevel "#0" source $startbase} err]} {
-      ::splash::add "   Error opening $startbase: $err" error
+      ::splash::add "   Fehler beim Öffnen von $startbase: $err" error
     } else {
       after idle {::search::usefile $startbase}
     }
   } else {
     busyCursor .
-    ::splash::add "Opening database: $startbase"
+    ::splash::add "Öffne Datenbank: $startbase"
     set errMessage ""
     set err [catch { ::file::Open $startbase} errMessage]
     if {$err} {
@@ -2086,9 +2086,9 @@
       ### Umm... they are. ? S.A.
       set errMessage "$errMessage\nCould not open database \"$startbase\""
       ::splash::add $errMessage error
-      tk_messageBox -title "Scid: Oops" -type ok -icon error -message $errMessage
+      tk_messageBox -title "Scid: Hoppla" -type ok -icon error -message $errMessage
     } else {
-      ::splash::add "   Database \"$startbase\" opened: [sc_base numGames] games."
+      ::splash::add "   Datenbank \"$startbase\" geöffnet: [sc_base numGames] Partien."
       set initialDir(base) [file dirname $startbase]
       set initialDir(file) [file tail $startbase]
       # this sets initialDir(file) for all files, not just pgn... 
Index: tcl/file.tcl
===================================================================
--- tcl/file.tcl	(revision 3386)
+++ tcl/file.tcl	(working copy)
@@ -93,7 +93,7 @@
 proc ::file::New {} {
   if {[sc_base count free] == 0} {
     tk_messageBox -title Scid -type ok -icon info \
-        -message "Too many databases open; close one first"
+        -message "Zuviele Datenbanken geöffnet; bitte erst eine schließen"
     return
   }
   set ftype {
@@ -104,7 +104,7 @@
   if {! [file isdirectory $::initialDir(base)] } {
     set ::initialDir(base) $::env(HOME)
   }
-  set fName [tk_getSaveFile -initialdir $::initialDir(base) -filetypes $ftype -title "Create a Scid database"]
+  set fName [tk_getSaveFile -initialdir $::initialDir(base) -filetypes $ftype -title "Erstelle eine Scid-Datenbank"]
   if {$fName == {}} {
     return
   } elseif {[file extension $fName] == ".epd"} {
@@ -117,7 +117,7 @@
     } 
     if {[catch {sc_base create $fName} result]} {
       tk_messageBox -icon warning -type ok -parent . \
-          -title "Scid: error" -message "$result\nCan't create $fName"
+          -title "Scid: Fehler" -message "$result\nKann $fName nicht erstellen"
       return
     }
     # set default icon
@@ -140,7 +140,7 @@
 
   if {[sc_base count free] == 0} {
     tk_messageBox -type ok -icon info -title Scid \
-        -message "Too many databases are open; close one first" -parent $parent
+        -message "Zuviele Datenbanken geöffnet; bitte erst eine schließen" -parent $parent
     return
   }
 
@@ -164,7 +164,7 @@
       set ::file::finder::data(dir) $::env(HOME)
     }
     set fName [tk_getOpenFile -initialdir $::file::finder::data(dir) -filetypes $ftype \
-                 -title "Open a Scid file" -parent $parent]
+                 -title "Eine Scid-Datei öffnen" -parent $parent]
     if {$fName == ""} { return }
   }
 
@@ -211,7 +211,7 @@
       }
       unbusyCursor .
       tk_messageBox -icon warning -type ok -parent $parent \
-          -title "Scid: Error opening file" -message "$result"
+          -title "Scid: Fehler beim Öffnen der Datei" -message "$result"
       ::recentFiles::remove "$fName.si4"
       return -1
     } else {
@@ -235,7 +235,7 @@
       ::recentFiles::remove $fName
       unbusyCursor .
       tk_messageBox -icon warning -type ok -parent $parent \
-          -title "Scid: Error opening file" -message "File $fName doesn't exist."
+          -title "Scid: Fehler beim Öffnen der Datei" -message "Datei $fName nicht vorhanden."
     } else {
       if {$ext != ".pgn" && $ext != ".PGN"} {
 	puts {Unknown file type, assuming PGN.}
@@ -242,15 +242,15 @@
       }
       ## note : .zip isn't supported by zlib. Only .pgn.gz is supported.
 
-      set result "File $fName is not readable."
+      set result "Datei $fName ist nicht lesbar."
       if {(![file readable $fName])  || \
 	    [catch {sc_base create $fName true} result]} {
 	set err 1
 	unbusyCursor .
 	tk_messageBox -icon warning -type ok -parent $parent \
-	    -title "Scid: Error opening file" -message $result
+	    -title "Scid: Fehler beim Öffnen der Datei" -message $result
       } else {
-	doPgnFileImport $fName "Opening [file tail $fName] read-only\n"
+	doPgnFileImport $fName "Öffne [file tail $fName] im Nur-Lesen-Modus\n"
 	sc_base type [sc_base current] 3
 	::recentFiles::add $fName
 	set ::initialDir(pgn) [file dirname $fName]
@@ -415,7 +415,7 @@
   closeProgressWindow
   if {$err} {
     tk_messageBox -title Scid -type ok -icon warning \
-        -message "Unable to upgrade the database:\n$res"
+        -message "Kann Datenbank nicht aktualisieren:\n$res"
     return
   } else  {
     # rename game and name files, delete old .si3
@@ -568,7 +568,7 @@
 
   if {[sc_base count free] == 0} {
     tk_messageBox -type ok -icon info -title Scid \
-        -message "Too many databases are open; close one first"
+        -message "Zuviele Datenbanken geöffnet; bitte erst eine schließen"
     return
   }
 
@@ -589,7 +589,7 @@
     if {! [file isdirectory $::initialDir(base)] } {
       set ::initialDir(base) $::env(HOME)
     }
-    set fName [tk_getOpenFile -initialdir $::initialDir(base) -filetypes $ftype -title "Open a Scid file"]
+    set fName [tk_getOpenFile -initialdir $::initialDir(base) -filetypes $ftype -title "Eine Scid-Datei öffnen"]
     if {$fName == ""} { return }
 
     set fName [fullname $fName]
@@ -628,7 +628,7 @@
     if {[catch {openBase $fName} result]} {
       unbusyCursor .
       set err 1
-      tk_messageBox -icon warning -type ok -parent . -title "Scid: Error opening file" -message $result
+      tk_messageBox -icon warning -type ok -parent . -title "Scid: Fehler beim Öffnen der Datei" -message $result
       return
     } else {
       set ::initialDir(base) [file dirname $fName]
@@ -642,10 +642,10 @@
           [catch {sc_base create $fName true} result]} {
       unbusyCursor .
       set err 1
-      tk_messageBox -icon warning -type ok -parent . -title "Scid: Error opening file" -message $result
+      tk_messageBox -icon warning -type ok -parent . -title "Scid: Fehler beim Öffnen der Datei" -message $result
       return
     } else {
-      doPgnFileImport $fName "Opening [file tail $fName] read-only\n"
+      doPgnFileImport $fName "Öffne [file tail $fName] im Nur-Lesen-Modus\n"
       sc_base type [sc_base current] 3
       set ::initialDir(pgn) [file dirname $fName]
       set ::initialDir(file) [file tail $fName]
Index: tcl/game.tcl
===================================================================
--- tcl/game.tcl	(revision 3386)
+++ tcl/game.tcl	(working copy)
@@ -125,16 +125,16 @@
 proc ::game::LoadNextPrev {action {raise 1}} {
   global pgnWin statusBar
   if {![sc_base inUse]} {
-    set statusBar "  There is no $action game: this is an empty database."
+    set statusBar "  In dieser Richtung gibt es keine Partie: dies ist eine leere Datenbank."
     return
   }
   set number [sc_filter $action]
   if {$number == 0} {
-    set statusBar "  There is no $action game in the current filter."
+    set statusBar "  In dieser Richtung gibt es keine weitere Partie im aktuellen Filter."
     return
   }
   if {$number == [sc_game number]} {
-    set statusBar "  Game $number already loaded."
+    set statusBar "  Partie $number bereits geladen."
     return
   }
   ::game::Load $number 1 $raise
Index: tcl/language.tcl
===================================================================
--- tcl/language.tcl	(revision 3391)
+++ tcl/language.tcl	(working copy)
@@ -124,8 +124,8 @@
 
   lassign $args lang tag label underline helpMsg
   if {![string is integer -strict $underline]} {
-    tk_messageBox -icon error -type ok -title "$::scidName Menu Error" \
-      -message "menuText $args\n\nNot enough args, or fourth arg is not an integer."
+    tk_messageBox -icon error -type ok -title "$::scidName Menüfehler" \
+      -message "menuText $args\n\nNicht genügend Argumente oder das vierte Argument ist kein Integer."
     exit
   }
 
Index: tcl/main.tcl
===================================================================
--- tcl/main.tcl	(revision 3386)
+++ tcl/main.tcl	(working copy)
@@ -1039,7 +1039,7 @@
   catch {source $fname}
   set newcount [expr {[array size ::photo] - $oldcount}]
   if {$newcount > 0} {
-    ::splash::add "    Found $newcount photos in [file tail $fname]"
+    ::splash::add "    $newcount Fotos in [file tail $fname] gefunden"
   }
 }
 
@@ -1059,7 +1059,7 @@
 
 ### Read all Scid photo files (*.spf) in the data/user/config directories
 
-::splash::add "Searching for player photos."
+::splash::add "Suche nach Spielerfotos."
 
 foreach photofile [glob -nocomplain -directory $scidDataDir "*.spf"] {
   readPhotoFile $photofile
@@ -1077,7 +1077,7 @@
 ### Custom photos
 
 if {[file isdirectory $scidPhotosDir]} {
-  ::splash::add "Searching for custom photos (gifs) in $scidPhotosDir"
+  ::splash::add "Suche nach Fotos (gifs) in $scidPhotosDir"
   set pwd [pwd]
   cd $scidPhotosDir
   set count 0
@@ -1096,13 +1096,13 @@
       set ::photo($p) $i
     }] || [catch {image create photo tmpimage -file $i} result]} {
       unset ::photo($p)
-      ::splash::add "   Error processing photo $i: $result" error
+      ::splash::add "   Fehler beim Verarbeiten von Foto $i: $result" error
     } else {
       incr count
       # ::splash::add "   Ok processing photo $i" 
     }
   }
-  ::splash::add "    $count custom photos successfully loaded."
+  ::splash::add "    $count Fotos erfolgreich geladen."
   cd $pwd
 } else {
   # ::splash::add "User Photos: no such directory $scidPhotosDir"
@@ -1249,7 +1249,7 @@
   if {$::macOS} {
     wm transient $w .
   }
-  wm title $w "Promotion"
+  wm title $w "Umwandlung"
   wm resizable $w 0 0
 
   set col "w"
@@ -1359,7 +1359,7 @@
   }
   if {$nullmove && [sc_pos isCheck]} {
       # dont add null move in check or mate
-      tk_messageBox -type ok -message {Null Move while in Check is not allowed.} -parent .main.board -icon info
+      tk_messageBox -type ok -message {Nullzug während Schachgebot nicht erlaubt.} -parent .main.board -icon info
       return
   }
 
@@ -1655,7 +1655,7 @@
 
   toplevel $w
   wm state $w withdrawn
-  wm title $w {Move Delay}
+  wm title $w {Zugverzögerung}
 
   label $w.label -text $::tr(AnnotateTime)
   pack $w.label -side top -pady 5 -padx 5
Index: tcl/menus.tcl
===================================================================
--- tcl/menus.tcl	(revision 3386)
+++ tcl/menus.tcl	(working copy)
@@ -84,7 +84,7 @@
 $m add command -label FileNew -command ::file::New
 set helpMessage($m,[incr menuindex]) FileNew
 
-$m add command -label FileOpen -acc "control-o" -command ::file::Open
+$m add command -label FileOpen -acc "Strg-o" -command ::file::Open
 bind .main <Control-o> ::file::Open
 set helpMessage($m,[incr menuindex]) FileOpen
 
@@ -91,7 +91,7 @@
 $m add command -label FileSavePgn  -command {::pgn::savePgn .}
 set helpMessage($m,[incr menuindex]) FileSavePgn
 
-$m add command -label FileClose -acc "control-w" -command ::file::Close
+$m add command -label FileClose -acc "Strg-w" -command ::file::Close
 bind .main <Control-w> ::file::Close
 set helpMessage($m,[incr menuindex]) FileClose
 
@@ -98,7 +98,7 @@
 $m add command -label FileReadOnly -command makeBaseReadOnly
 set helpMessage($m,[incr menuindex]) FileReadOnly
 
-$m add command -label FileFinder -acc "control-/" -command ::file::finder::Open
+$m add command -label FileFinder -acc "Strg-/" -command ::file::finder::Open
 bind .main <Control-slash> ::file::finder::Open
 set helpMessage($m,[incr menuindex]) FileFinder
 
@@ -134,7 +134,7 @@
 $m add separator
 incr menuindex
 
-$m add command -label FileExit -accelerator "control-q" -command ::file::Exit
+$m add command -label FileExit -accelerator "Strg-q" -command ::file::Exit
 bind .main <Control-q> ::file::Exit
 set helpMessage($m,[incr menuindex]) FileExit
 
@@ -144,19 +144,19 @@
 set menuindex -1
 set m .menu.edit
 
-$m add command -label EditSetup -command setupBoard -accelerator "control-B"
+$m add command -label EditSetup -command setupBoard -accelerator "Strg-B"
 set helpMessage($m,[incr menuindex]) EditSetup
 
-$m add command -label EditCopyBoard -accelerator "control-C" -command copyFEN
+$m add command -label EditCopyBoard -accelerator "Strg-C" -command copyFEN
 set helpMessage($m,[incr menuindex]) EditCopyBoard
 
 $m add command -label EditCopyPGN -command ::pgn::copyPgn
 set helpMessage($m,[incr menuindex]) EditCopyPGN
 
-$m add command -label EditPasteBoard -accelerator "control-V" -command pasteFEN
+$m add command -label EditPasteBoard -accelerator "Strg-V" -command pasteFEN
 set helpMessage($m,[incr menuindex]) EditPasteBoard
 
-$m add command -label EditPastePGN -command importPgnGame -accelerator "control-I"
+$m add command -label EditPastePGN -command importPgnGame -accelerator "Strg-I"
 set helpMessage($m,[incr menuindex]) EditPastePGN
 
 $m add separator
@@ -170,11 +170,11 @@
 }
 set helpMessage($m,[incr menuindex]) EditReset
 
-$m add command -label EditCopy -accelerator "control-c" -command copyGame
+$m add command -label EditCopy -accelerator "Strg-c" -command copyGame
 bind .main <Control-c> copyGame
 set helpMessage($m,[incr menuindex]) EditCopy
 
-$m add command -label EditPaste -accelerator "control-v" -command pasteGame
+$m add command -label EditPaste -accelerator "Strg-v" -command pasteGame
 bind .main <Control-v> pasteGame
 set helpMessage($m,[incr menuindex]) EditPaste
 
@@ -207,7 +207,7 @@
 $m add separator
 incr menuindex
 
-$m add command -label EditAdd -accel "control-a" -command {sc_var create; updateBoard -pgn}
+$m add command -label EditAdd -accel "Strg-a" -command {sc_var create; updateBoard -pgn}
 set helpMessage($m,[incr menuindex]) EditAdd
 
 $m add command -label EditPasteVar -command importVar
@@ -226,7 +226,7 @@
 set helpMessage($m,[incr menuindex]) EditMain
 
 $m add checkbutton -label EditTrial -variable trialMode \
-    -accelerator "control-space" -command {setTrialMode menu}
+    -accelerator "Strg-Leer" -command {setTrialMode menu}
 bind .main <Control-space> { setTrialMode toggle }
 set helpMessage($m,[incr menuindex]) EditTrial
 
@@ -245,15 +245,15 @@
 ### Game menu:
 set menuindex -1
 set m .menu.game
-$m add command -label GameNew -accelerator "control-N" -command ::game::Clear
+$m add command -label GameNew -accelerator "Strg-N" -command ::game::Clear
 bind .main <Control-N> ::game::Clear
 set helpMessage($m,[incr menuindex]) GameNew
 
-$m add command -label GameReplace -command gameReplace -accelerator "control-s"
+$m add command -label GameReplace -command gameReplace -accelerator "Strg-s"
 bind .main <Control-s> { .menu.game invoke [tr GameReplace] }
 set helpMessage($m,[incr menuindex]) GameReplace
 
-$m  add command -label GameAdd -command gameAdd  -accelerator "control-S"
+$m  add command -label GameAdd -command gameAdd  -accelerator "Strg-S"
 bind .main <Control-S> gameAdd
 set helpMessage($m,[incr menuindex]) GameAdd
 
@@ -266,13 +266,13 @@
 $m add command -label GameBrowse -command {::gbrowser::new [sc_base current] [sc_game number] [sc_pos location]}
 set helpMessage($m,[incr menuindex]) GameBrowse
 
-$m add command -label GameList -accel "control-l" -command ::windows::gamelist::Open 
+$m add command -label GameList -accel "Strg-l" -command ::windows::gamelist::Open 
 set helpMessage($m,[incr menuindex]) GameList
 
 $m add separator
 incr menuindex
 
-$m  add command -label GameDelete -accel "control-delete" -command ::game::Delete -underline 0
+$m  add command -label GameDelete -accel "Strg-Entf" -command ::game::Delete -underline 0
 set helpMessage($m,[incr menuindex]) GameDelete
 if {$::macOS} {
   bind .main <Control-BackSpace> ::game::Delete
@@ -286,26 +286,26 @@
 $m add separator
 incr menuindex
 
-$m add command -label GameFirst -accelerator "control-home" \
+$m add command -label GameFirst -accelerator "Strg-Pos1" \
     -command {::game::LoadNextPrev first}
 set helpMessage($m,[incr menuindex]) GameFirst
 
-$m add command -label GameLast -accelerator "control-end" \
+$m add command -label GameLast -accelerator "Strg-Ende" \
     -command {::game::LoadNextPrev last}
 set helpMessage($m,[incr menuindex]) GameLast
 
-$m add command -label GameNext -accelerator "control-down" \
+$m add command -label GameNext -accelerator "Strg-↓" \
     -command {::game::LoadNextPrev next}
 set helpMessage($m,[incr menuindex]) GameNext
 
-$m add command -label GamePrev -accelerator "control-up" \
+$m add command -label GamePrev -accelerator "Strg-↑" \
     -command {::game::LoadNextPrev previous}
 set helpMessage($m,[incr menuindex]) GamePrev
 
-$m add command -label GameRandom -command ::game::LoadRandom -accelerator "control-?"
+$m add command -label GameRandom -command ::game::LoadRandom -accelerator "Strg-?"
 set helpMessage($m,[incr menuindex]) GameRandom
 
-$m add command -label GameNumber -command ::game::LoadNumber -accelerator "control-u"
+$m add command -label GameNumber -command ::game::LoadNumber -accelerator "Strg-u"
 set helpMessage($m,[incr menuindex]) GameNumber
 
 $m add separator
@@ -323,7 +323,7 @@
 
 set helpMessage($m,[incr menuindex]) GameDeepest
 
-$m add command -label GameGotoMove -accelerator "control-g" \
+$m add command -label GameGotoMove -accelerator "Strg-g" \
     -command ::game::GotoMoveNumber
 set helpMessage($m,[incr menuindex]) GameGotoMove
 bind .main <Control-g> ::game::GotoMoveNumber
@@ -335,12 +335,12 @@
 ### Search menu:
 set menuindex -1
 set m .menu.search
-$m  add command -label SearchReset -acc "control-r" \
+$m  add command -label SearchReset -acc "Strg-r" \
     -command ::search::filter::reset
 bind .main <Control-r> ::search::filter::reset
 set helpMessage($m,[incr menuindex]) SearchReset
 
-$m  add command -label SearchNegate -acc "control-n" \
+$m  add command -label SearchNegate -acc "Strg-n" \
     -command ::search::filter::negate
 bind .main <Control-n> ::search::filter::negate
 set helpMessage($m,[incr menuindex]) SearchNegate
@@ -352,7 +352,7 @@
 incr menuindex
 
 $m  add command -label SearchHeader \
-    -command ::search::header -accelerator "control-G"
+    -command ::search::header -accelerator "Strg-G"
 set helpMessage($m,[incr menuindex]) SearchHeader
 
 $m  add command -label SearchCurrent -command ::search::board
@@ -359,7 +359,7 @@
 set helpMessage($m,[incr menuindex]) SearchCurrent
 
 $m  add command -label SearchMaterial \
-    -command ::search::material -accelerator "control-M"
+    -command ::search::material -accelerator "Strg-M"
 bind .main <Control-M> ::search::material
 set helpMessage($m,[incr menuindex]) SearchMaterial
 
@@ -372,10 +372,10 @@
 $m  add separator
 incr menuindex
 
-$m add command -label WindowsPList -command ::plist::Open -accelerator "control-P"
+$m add command -label WindowsPList -command ::plist::Open -accelerator "Strg-P"
 set helpMessage($m,[incr menuindex]) WindowsPList
 
-$m add command -label WindowsTmt -command ::tourney::Open -accelerator "control-T"
+$m add command -label WindowsTmt -command ::tourney::Open -accelerator "Strg-T"
 set helpMessage($m,[incr menuindex]) WindowsTmt
 
 $m  add separator
@@ -461,29 +461,29 @@
 set menuindex 0
 set m .menu.windows
 
-$m  add command -label WindowsGameinfo -accelerator "control-i" -command toggleGameInfo 
+$m  add command -label WindowsGameinfo -accelerator "Strg-i" -command toggleGameInfo 
 bind .main <Control-i> toggleGameInfo
 set helpMessage($m,[incr menuindex]) WindowsGameinfo
 
-$m  add command -label WindowsComment -command ::commenteditor::Open -accelerator "control-e"
+$m  add command -label WindowsComment -command ::commenteditor::Open -accelerator "Strg-e"
 set helpMessage($m,[incr menuindex]) WindowsComment
 
-$m  add command -label WindowsGList -command ::windows::gamelist::Open -accelerator "control-l"
+$m  add command -label WindowsGList -command ::windows::gamelist::Open -accelerator "Strg-l"
 set helpMessage($m,[incr menuindex]) WindowsGList
 
-$m  add command -label WindowsPGN -command ::pgn::Open  -accelerator "control-p"
+$m  add command -label WindowsPGN -command ::pgn::Open  -accelerator "Strg-p"
 set helpMessage($m,[incr menuindex]) WindowsPGN
 
-$m  add command -label WindowsCross -command ::crosstab::Open  -accelerator "control-X"
+$m  add command -label WindowsCross -command ::crosstab::Open  -accelerator "Strg-X"
 set helpMessage($m,[incr menuindex]) WindowsCross
 
-$m add command -label WindowsPList -command ::plist::Open -accelerator "control-P"
+$m add command -label WindowsPList -command ::plist::Open -accelerator "Strg-P"
 set helpMessage($m,[incr menuindex]) WindowsPList
 
-$m add command -label WindowsTmt -command ::tourney::Open -accelerator "control-T"
+$m add command -label WindowsTmt -command ::tourney::Open -accelerator "Strg-T"
 set helpMessage($m,[incr menuindex]) WindowsTmt
 
-$m add command -label WindowsMaint -accelerator "control-m" -command ::maint::Open
+$m add command -label WindowsMaint -accelerator "Strg-m" -command ::maint::Open
 set helpMessage($m,[incr menuindex]) WindowsMaint
 
 $m add separator
@@ -496,14 +496,14 @@
 bind .main <Control-i> ::windows::stats::Open
 set helpMessage($m,[incr menuindex]) WindowsStats
 
-$m add command -label WindowsTree -command ::tree::Open -accelerator "control-t"
+$m add command -label WindowsTree -command ::tree::Open -accelerator "Strg-t"
 set helpMessage($m,[incr menuindex]) WindowsTree
 
-$m add command -label WindowsTB -command ::tb::Open -accelerator "control-="
+$m add command -label WindowsTB -command ::tb::Open -accelerator "Strg-="
 bind .main <Control-equal> ::tb::Open
 set helpMessage($m,[incr menuindex]) WindowsTB
 
-$m add command -label WindowsBook -command ::book::Open -accelerator "control-b"
+$m add command -label WindowsBook -command ::book::Open -accelerator "Strg-b"
 set helpMessage($m,[incr menuindex]) WindowsBook
 
 $m add command -label WindowsCorrChess -command ::CorrespondenceChess::CCWindow 
@@ -513,7 +513,7 @@
 set menuindex -1
 set m .menu.tools
 $m  add command -label ToolsAnalysis \
-    -command ::enginelist::choose -accelerator "control-A"
+    -command ::enginelist::choose -accelerator "Strg-A"
 bind .main <Control-A> ::enginelist::choose
 set helpMessage($m,[incr menuindex]) ToolsAnalysis
 
@@ -537,7 +537,7 @@
 $m add cascade -label ToolsMaint -menu .menu.tools.utils
 set helpMessage($m,[incr menuindex]) ToolsMaint
 
-$m.utils add command -label ToolsMaintWin -accelerator "control-m" -command ::maint::Open
+$m.utils add command -label ToolsMaintWin -accelerator "Strg-m" -command ::maint::Open
 set helpMessage($m.utils,0) ToolsMaintWin
 
 $m.utils add command -label ToolsMaintNameEditor -command nameEditor 
@@ -617,7 +617,7 @@
 $m add command -label ToolsFilterGraph -command tools::graphs::filter::Open
 set helpMessage($m,[incr menuindex]) ToolsFilterGraph
 
-$m add command -label ToolsAbsFilterGraph -accelerator "control-J" -command ::tools::graphs::absfilter::Open
+$m add command -label ToolsAbsFilterGraph -accelerator "Strg-J" -command ::tools::graphs::absfilter::Open
 bind .main <Control-J> ::tools::graphs::absfilter::Open
 set helpMessage($m,[incr menuindex]) ToolsAbsFilterGraph
 
@@ -625,7 +625,7 @@
 set helpMessage($m,[incr menuindex]) ToolsRating
 
 $m add command -label ToolsScore \
-    -accelerator "control-Z" -command ::tools::graphs::score::Raise
+    -accelerator "Strg-Z" -command ::tools::graphs::score::Raise
 bind .main <Control-Z> ::tools::graphs::score::Raise
 set helpMessage($m,[incr menuindex]) ToolsScore
 
@@ -679,8 +679,8 @@
 
 $m.exportfilter add command -label ToolsExpFilterLatex -command {
   if {[sc_filter count] > 5} {
-    tk_messageBox -type ok -icon info -title "Scid: Latex Preview" \
-	-message {Latex Preview has a maximum of 5 games.}
+    tk_messageBox -type ok -icon info -title "Scid: LaTeX-Vorschau"\
+	-message {Die LaTeX-Vorschau hat ein Maximum von fünf Partien.}
   } else {
     set latexFilename Games-Preview
     if {[exportGames filter Latex [file join $::scidLogDir $latexFilename.tex]] != "0"} { 
@@ -693,13 +693,13 @@
 $m.exportfilter add command -label ToolsExpFilterEPD -command {
   # Check that we have some games to export:
   if {![sc_base inUse]} {
-    tk_messageBox -title "Scid: Empty database" -type ok -icon info \
-	-message "This is an empty database, there are no games to export."
+    tk_messageBox -title "Scid: leere Datenbank" -type ok -icon info \
+	-message "Dies ist eine leere Datenbank, es gibt keine Partien zu exportieren."
     return
   }
   if {[sc_filter count] == 0} {
-    tk_messageBox -title "Scid: Filter empty" -type ok -icon info \
-	-message "The filter contains no games."
+    tk_messageBox -title "Scid: Filter leer" -type ok -icon info \
+	-message "Der Filter enthält keine Partien."
     return
   }
   set confirm [::game::ConfirmDiscard]
@@ -712,7 +712,7 @@
     { "All files" {"*"} }
   }
   set idir $::initialDir(epd)
-  set fName [tk_getSaveFile -initialdir $idir -filetypes $ftype -defaultextension ".epd" -title "Create an EPD file"]
+  set fName [tk_getSaveFile -initialdir $idir -filetypes $ftype -defaultextension ".epd" -title "Eine EPD-Datei erstellen"]
   if {$fName == ""} {
     return
   }
@@ -721,8 +721,8 @@
   }
 
   if {[catch {open $fName w} epdFile]} {
-    tk_messageBox -title "Scid: Unable to write file" -type ok -icon warning \
-	-message "Unable to write file: $fName"
+    tk_messageBox -title "Scid: kann Datei nicht schreiben" -type ok -icon warning \
+	-message "Kann Datei nicht schreiben: $fName"
     return
   } 
 
@@ -760,7 +760,7 @@
 $m add separator
 incr menuindex
 
-$m add command -label ToolsImportOne -accelerator "control-I" -command importPgnGame
+$m add command -label ToolsImportOne -accelerator "Strg-I" -command importPgnGame
 bind .main <Control-I> importPgnGame
 set helpMessage($m,[incr menuindex]) ToolsImportOne
 
@@ -827,9 +827,9 @@
   set w .tablebaseDialog
   toplevel $w
   wm state $w withdrawn
-  wm title $w Tablebases
+  wm title $w Endspieldatenbanken
 
-  label $w.title -text "Select up to 4 tablebase directories:"
+  label $w.title -text "Wählen Sie bis zu 4 Endspieldatenbankverzeichnisse:"
   pack $w.title -side top
   foreach i {1 2 3 4} {
     set tempDir(tablebase$i) $initialDir(tablebase$i)
@@ -873,7 +873,7 @@
   } else {
     set msg "Tablebases with up to $npieces pieces found.\n\nTo use these tablebases whenever you start Scid, select \"Save Options\" from the Options menu."
   }
-  tk_messageBox -type ok -icon info -title "Scid: Tablebase results" \
+  tk_messageBox -type ok -icon info -title "Scid: Endspieldatenbankergebnisse" \
       -message $msg
 
 }
@@ -885,7 +885,7 @@
   if {$idir == ""} { set idir [pwd] }
 
   set fullname [tk_chooseDirectory -mustexist 1 -initialdir $idir -parent .tablebaseDialog \
-      -title "Select a Tablebase directory"]
+      -title "Ein Endspieldatenbankverzeichnis auswählen"]
   if {$fullname == ""} { return }
 
   set tempDir(tablebase$i) $fullname
@@ -915,7 +915,7 @@
 
 proc setTacticsBasesDir {} {
   global scidBasesDir
-  set dir [tk_chooseDirectory -initialdir $scidBasesDir -mustexist 1 -title "Bases [tr Directory]"]
+  set dir [tk_chooseDirectory -initialdir $scidBasesDir -mustexist 1 -title "Datenbanken [tr Directory]"]
   if {$dir != ""} {
     set scidBasesDir $dir
   }
@@ -952,8 +952,8 @@
 $m add command -label OptionsSave -command {
   set optionF ""
   if {[catch {open [scidConfigFile options] w} optionF]} {
-    tk_messageBox -title "Scid: Unable to write file" -type ok -icon warning \
-        -message "Unable to write options file: [scidConfigFile options]\n$optionF"
+    tk_messageBox -title "Scid: kann Datei nicht schreiben" -type ok -icon warning \
+        -message "Kann Optionendatei nicht schreiben:" [scidConfigFile options]\n$optionF"
   } else {
     puts $optionF "# Scid vs. PC (version $scidVersion) Options file"
     puts $optionF "# This file contains commands in the Tcl language format."
@@ -1084,7 +1084,7 @@
     }
 
     close $optionF
-    set ::statusBar "Options saved to [scidConfigFile options]"
+    set ::statusBar "Optionen nach [scidConfigFile options] gespeichert"
   }
 }
 set helpMessage($m,[incr menuindex]) OptionsSave
@@ -1095,7 +1095,7 @@
 if {$::macOS} {
 # God-fucking-awful hack to fix broken OS X non-handling of magic mouse wheel 
 # The hardware has a very sensitive wheel, but nowhere to disable it. S.A
-$m add checkbutton -label "Enable Wheelmouse " -variable macWheelMouse -command {
+$m add checkbutton -label "Aktiviere Mausrad " -variable macWheelMouse -command {
   if {$::macWheelMouse} {
     bind .main <MouseWheel> {
       if {[expr -%D] < 0} { ::move::Back }
@@ -1584,7 +1584,7 @@
     # Only show menu items for open database slots
     if {$fname != {[empty]} } {
       $m.file.switch add command -command "set ::currentSlot $i" \
-	  -label "$fname" -underline 5 -accelerator "control-$i" \
+	  -label "$fname" -underline 5 -accelerator "Strg-$i" \
           -command "::file::SwitchToBase $i"
       bind .main <Control-Key-$i> "::file::SwitchToBase $i"
 
@@ -1615,7 +1615,7 @@
   }
   set idx [$m.file index end]
   incr idx
-  $m.file add command -label [tr FileExit] -accelerator "control-q" \
+  $m.file add command -label [tr FileExit] -accelerator "Strg-q" \
       -command ::file::Exit
   set helpMessage($m.file,$idx) FileExit
 
Index: tcl/search/header.tcl
===================================================================
--- tcl/search/header.tcl	(revision 3386)
+++ tcl/search/header.tcl	(working copy)
@@ -92,7 +92,7 @@
   set sIgnoreCol No
   set sSideToMove wb
   set sPgncase 0
-  set sGameEnd Any
+  set sGameEnd Beliebig
   set preComment 0
   set postComment 0
   set sTag ""
@@ -269,7 +269,7 @@
   pack $w.res.l1 -side left -padx 3
   foreach i { win     loss     draw     other    } \
           v { sResWin sResLoss sResDraw sResOther} \
-       text { {1-0 }  {0-1 }   {Draw }     {No Result }     } {
+       text { {1-0 }  {0-1 }   {Remis }     {Kein Ergebnis }     } {
     checkbutton $w.res.e$i -text $text -variable $v -font $regular 
     pack $w.res.e$i -side left -padx 3
   }
@@ -294,7 +294,7 @@
   entry $w.eco.emax -textvariable sEcoMax -width 5 -font $regular
   bindFocusColors $w.eco.emin
   bindFocusColors $w.eco.emax
-  button $w.eco.range -text Choose -font $regular -pady 2 -padx 6 -width 7 -command {
+  button $w.eco.range -text Wähle -font $regular -pady 2 -padx 6 -width 7 -command {
     set tempResult [chooseEcoRange]
     if {[scan $tempResult "%\[A-E0-9a-z\]-%\[A-E0-9a-z\]" sEcoMin_tmp sEcoMax_tmp] == 2} {
       set sEcoMin $sEcoMin_tmp
@@ -325,7 +325,7 @@
   # Checkmate ?
 
   label $w.ends.endslabel -textvar tr(GameEnd) -font $bold
-  ttk::combobox $w.ends.ending -font $regular -width 12 -values {Any Checkmate Stalemate} -textvariable sGameEnd -state readonly
+  ttk::combobox $w.ends.ending -font $regular -width 12 -values {Beliebig Matt Patt} -textvariable sGameEnd -state readonly
   pack $w.ends.ending -side right
   pack $w.ends.endslabel -side right -padx 3
 
@@ -367,7 +367,7 @@
   # requires " (" to be in the translated tagsDescript eg {Extra tags (eg: Annotator "Anand")}
   label $f.label -text "[string range $tr(tagsDescript) 0 [string first " (" $tr(tagsDescript)]]           " -font $bold
   entry $f.tag -textvariable sTag -width 15 -font $regular
-  label $f.label2 -text "  ($tr(value))"
+  label $f.label2 -text "  ($tr(value))" -font $regular
   entry $f.tagvalue -textvariable sTagValue -width 15 -font $regular
   pack $f.label -side left
   pack $f.tag $f.label2 $f.tagvalue -side left -padx 5
@@ -557,7 +557,7 @@
     pack forget .sh.b.stop
     unbusyCursor .
 
-    .sh.status configure -text "Result: $str"
+    .sh.status configure -text "Ergebnis: $str"
     set glstart 1
 
     ::search::loadFirstGame
@@ -600,7 +600,7 @@
   global sResWin sResLoss sResDraw sResOther glstart sPgntext sPgncase sGameEnd
 
   set ftype { { "Scid SearchOptions files" {".sso"} } }
-  set fName [tk_getSaveFile -initialdir $::initialDir(sso) -filetypes $ftype -title "Create a SearchOptions file" -parent .sh]
+  set fName [tk_getSaveFile -initialdir $::initialDir(sso) -filetypes $ftype -title "Eine Suchoptionendatei erstellen" -parent .sh]
   if {$fName == ""} { return }
   set ::initialDir(sso) [file dirname $fName]
 
@@ -609,8 +609,8 @@
   }
 
   if {[catch {set searchF [open [file nativename $fName] w]} ]} {
-    tk_messageBox -title "Error: Unable to open file" -type ok -icon error \
-        -message "Unable to create SearchOptions file: $fName"
+    tk_messageBox -title "Fehler: Datei kann nicht geöffnet werden" -type ok -icon error \
+        -message "Suchoptionendatei kann nicht erstellt werden: $fName"
     return
   }
   puts $searchF "# $::scidName search options file"
@@ -632,8 +632,8 @@
     puts $searchF "set sPgntext($i) [list $sPgntext($i)]"
   }
 
-  tk_messageBox -type ok -icon info -title "Search Options saved" \
-      -message "Header search options saved to: $fName"
+  tk_messageBox -type ok -icon info -title "Suchoptionen gespeichert" \
+      -message "Partiedatensuchoptionen gespeichert nach: $fName"
   close $searchF
 }
 
@@ -722,7 +722,7 @@
   toplevel $w
   wm withdraw $w
 
-  wm title $w "Choose ECO Range"
+  wm title $w "ECO-Bereich wählen"
   wm minsize $w 30 5
 
   listbox $w.list -yscrollcommand "$w.ybar set" -height 20 -width 60 \
Index: tcl/start.tcl
===================================================================
--- tcl/start.tcl	(revision 3386)
+++ tcl/start.tcl	(working copy)
@@ -69,7 +69,7 @@
     append msg "tkscid program \nit uses is version [sc_info version].\n"
     append msg "Check that the path to tkscid is correct."
   }
-  tk_messageBox -type ok -icon error -title "Scid: version error" -message $msg
+  tk_messageBox -type ok -icon error -title "Scid: Versionsfehler" -message $msg
   exit 1
 }
 
@@ -1386,7 +1386,7 @@
     if {$isMacBaseReady == 0} {
       if {$mac_args != 0} {
         tk_messageBox -type ok -icon info -title Scid -message \
-            "Please, wait until Scid finish starting up."
+            "Bitte warten, bis Scid den Startvorgang beendet hat."
         return
       } else {
         # Save file names for later use:
@@ -1398,7 +1398,7 @@
     # Are we busy opening files? if so, display message and do nothing
     if {$mac_busy != 0} {
       tk_messageBox -type ok -icon info -title Scid -message \
-          "Please, wait until the previous database(s) are opened and try again."
+          "Bitte warten bis die vorherige(n) Datenbank(en) geöffnet sind und versuchen Sie dann nochmal."
       return
     }
 
@@ -1415,8 +1415,8 @@
       # Check for available slots:
       if {[sc_base count free] == 0} {
         tk_messageBox -type ok -icon info -title Scid \
-            -message "Too many databases are open; close at least one \n\
-            before opening more databases"
+            -message "Zuviele Datenbanken geöffnet; bitte wenigstens eine schließen \n\
+            before weitere Datenbanken geöffnet werden"
         #::splash::add "No slot available."
         return
       }
@@ -1430,8 +1430,8 @@
       if {$ext == ".sso"} {
         set ::fName $file
         if {[catch {uplevel "#0" {source $::fName}} errmsg]} {
-          tk_messageBox -title "Scid: Error reading file" -type ok -icon warning \
-              -message "Unable to open or read SearchOptions file: $file"
+          tk_messageBox -title "Scid: Fehler beim Lesen der Datei" -type ok -icon warning \
+              -message "Kann Suchoptionendatei nicht öffnen oder lesen: $file"
         } else {
           switch -- $::searchType {
             "Material" { ::search::material }
@@ -1556,19 +1556,19 @@
 
 set optionsFile [scidConfigFile options]
 
-::splash::add "Command line is \"$::argv0 $::argv\""
-::splash::add "User directory is \"$scidUserDir\""
+::splash::add "Die Befehlszeile lautet \"$::argv0 $::argv\""
+::splash::add "Das Benutzerverzeichnis ist \"$scidUserDir\""
 
 if {[info tclversion] >= "8.6"} { 
-  ::splash::add "png image support is available."
+  ::splash::add "PNG-Bildunterstützung ist verfügbar."
   set png_image_support 1
   set boardStyle Merida1
 } elseif { [catch { package require img::png } ] } {
-  ::splash::add "TkImg not found. Most piece sets are disabled."
+  ::splash::add "TkImg nicht gefunden. Die meisten Figurensätze sind deaktiviert."
   set png_image_support 0
   set boardStyle Alpha
 } else {
-  ::splash::add "TkImg found. Enabling png image support."
+  ::splash::add "TkImg gefunden. PNG-Unterstützung aktiviert."
   set png_image_support 1
   set boardStyle Merida1
 }
@@ -1576,9 +1576,9 @@
 set useGraphFigurine 1
 
 if {[catch {source $optionsFile} ]} {
-  ::splash::add "Error loading options file \"$optionsFile\"" error
+  ::splash::add "Fehler beim Laden der Datei \"$optionsFile\"" error
 } else {
-  ::splash::add "Loaded options from \"$optionsFile\"."
+  ::splash::add "Einstellungen von  \"$optionsFile\" geladen."
 }
 
 if { [string first "-dock" [lindex $argv 0]] > -1} {
@@ -1897,7 +1897,7 @@
 
   wm withdraw $w
   wm protocol $w WM_DELETE_WINDOW [list wm withdraw $w]
-  wm title $w "Welcome to $::scidName $::scidVersion"
+  wm title $w "Willkommen zu $::scidName $::scidVersion"
 
   ### Pack in this order to resize nicely
   # buttons
@@ -1920,9 +1920,9 @@
   scrollbar $w.ybar -command [list $w.t yview]
 
   # Translations aren't set up yet, but these are handled in setLanguage
-  checkbutton $w.auto -text "Keep open after startup" \
+  checkbutton $w.auto -text "Nach Programmstart geöffnet halten" \
       -variable ::splash::keepopen -font font_Small -pady 5 -padx 5
-  button $w.dismiss -text Close -width 8 -command [list wm withdraw $w] \
+  button $w.dismiss -text Schließen -width 8 -command [list wm withdraw $w] \
       -font font_Small
 
   entry $w.find -width 10 -textvariable ::splash::find(find) -highlightthickness 0
@@ -1935,8 +1935,8 @@
       ::splash::add {}
       ::splash::add "$scidName $scidVersion Console"
       ::splash::add {------------------------------------}
-      ::splash::add {Here you can enter commands to the Scid interpreter for execution.}
-      ::splash::add {Try - "time {foreach i [array names helpText] {helpWindow $i}}" for a simple test and benchmark.}
+      ::splash::add {Hier können Sie Befehle für den Scid-Interpreter zur Ausführung eingeben.}
+      ::splash::add {Versuchen Sie - "time {foreach i [array names helpText] {helpWindow $i}}" für einen einfachen Test.}
     }
     set command [string trim [.splash.command get]]
     ::splash::add "# $command"
@@ -1998,7 +1998,7 @@
 ::splash::add "(C) Pascal Georges 2006-2008"
 ::splash::add "(C) Shane Hudson 1999-2004"
 ::splash::add "(C) Gregor Cramer, Fulvio Benini and others."
-::splash::add "Licenced under the GNU General Public License."
+::splash::add "Lizenziert unter GNU General Public License."
 ::splash::add ""
 
 # add cached splash comments
@@ -2014,11 +2014,11 @@
 } else {
   set result Yes
 }
-::splash::add "Using Tcl/Tk version: [info patchlevel] (with Gregor's tk::text - $result)"
+::splash::add "Verwende Tcl/Tk-Version: [info patchlevel] (mit Gregors tk::text - $result)"
 
-::splash::add "$tcl_platform(os) operating system, version $tcl_platform(osVersion)"
+::splash::add "$tcl_platform(os) Betriebssystem, Version $tcl_platform(osVersion)"
 if {(! $windowsOS)  &&  (! $unixOS)} {
-  ::splash::add "Operating System may not be supported"
+  ::splash::add "Betriebssystem wird nicht unterstützt"
 }
 if {[string match -nocase Linux $tcl_platform(os)]} {
   catch {
@@ -2027,7 +2027,7 @@
 }
 
 catch {
-  ::splash::add "LANG environment var is $::env(LANG)"
+  ::splash::add "LANG-Umgebungsvariable ist $::env(LANG)"
 }
 
 ::splash::add ""
Index: tcl/tools/analysis.tcl
===================================================================
--- tcl/tools/analysis.tcl	(revision 3387)
+++ tcl/tools/analysis.tcl	(working copy)
@@ -232,7 +232,7 @@
   if {$::windowsOS} {
     ### Windows comes with it's own custom engines.dat, so shoul dnever reach here.
     tk_messageBox -type ok -icon info -title Scid \
-		  -message "No engines.dat found. Please reinstall or add engines manually."
+		  -message "Datei engines.dat nicht gefunden. Bitte neu installieren oder Engines manuell hinzufügen."
     return
   }
 
@@ -494,8 +494,8 @@
   if {$index == ""  ||  $index < 0} { return }
   set e [lindex $engines(list) $index]
   set msg "Name: [lindex $e 0]
-Command: [lindex $e 1]\n
-Confirm delete\n"
+Befehl: [lindex $e 1]\n
+Löschen bestätigen\n"
   set answer [tk_messageBox -title Scid -icon question -type okcancel \
       -message $msg -parent .enginelist]
   if {$answer == "ok"} {
@@ -546,7 +546,7 @@
   lassign $e dummy0 engines(newCmd) engines(newArgs) engines(newDir) engines(newElo) dummy5 engines(newURL) engines(newUCI) engines(newUCIoptions)
 
   toplevel $w
-  wm title $w {Configure Engine}
+  wm title $w {Engine konfigurieren}
   wm state $w withdrawn
 
   set f [frame $w.frame]
@@ -576,7 +576,7 @@
           }
         }
         set scid_temp(cmd) [tk_getOpenFile -initialdir $engines(newDir) -parent .engineEdit \
-            -title "Scid: Select Executable" -filetypes $scid_temp(filetype)]
+            -title "Scid: Programmdatei auswählen" -filetypes $scid_temp(filetype)]
         if {$scid_temp(cmd) != ""} {
           set engines(newCmd) $scid_temp(cmd)
           # if {[string first " " $scid_temp(cmd)] >= 0} {
@@ -618,7 +618,7 @@
 
   grid columnconfigure $f 1 -weight 1
 
-  label $f.lUCI -text Protocol
+  label $f.lUCI -text Protokoll
   frame $f.rb
   radiobutton $f.rb.uci -variable engines(newUCI) -value 1 -text UCI \
     -command "checkState ::engines(newUCI) $f.bUCI"
@@ -651,7 +651,7 @@
   incr row
 
   frame $w.radio
-  label $w.radio.label -text {Hot Key}
+  label $w.radio.label -text {Kurzbefehl}
   radiobutton $w.radio.f2	-text F2 -variable hotkey -value F2
   radiobutton $w.radio.f3	-text F3 -variable hotkey -value F3
   radiobutton $w.radio.f4	-text F4 -variable hotkey -value F4
@@ -682,7 +682,7 @@
     if { $engines(newElo) == "" } { set engines(newElo) 0 }
     if {$engines(newName) == "" || $engines(newCmd) == "" || $engines(newDir) == ""} {
       tk_messageBox -title Scid -icon info -parent .engineEdit \
-        -message "The Name, Command and Directory fields must not be empty."
+        -message "Die Felder Name, Befehl und Verzeichnis dürfen nicht leer sein."
     } else {
       # Ok - now set time to file modification (mtime) of executable
       set engines(newTime) 0
@@ -812,9 +812,9 @@
   }
   if {$flag != {}} {
     if {$parent != ".enginelist"} {
-      set message "Due to possible file locking, please close $flag first."
+      set message "Wegen möglicher Dateisperre bitte zuerst $flag schließen."
     } else {
-      set message "Please close $flag first"
+      set message "Bitte zuerst $flag schließen."
     }
     tk_messageBox -title Scid -icon warning -type ok -parent $parent -message $message
     return 0
@@ -1164,8 +1164,8 @@
     return
   }
   if {$annotate(isBatch) && [sc_base isReadOnly]} {
-    set answer [tk_messageBox -title Tournanment -icon question -type okcancel \
-        -message "Database is read only, and batch annotations can't be saved.\n\nContinue ?" -parent .configAnnotation]
+    set answer [tk_messageBox -title Turnier -icon question -type okcancel \
+        -message "Datenbank kann nur gelesen und Kommentare können nicht gespeichert werden.\n\nFortsetzen?"" -parent .configAnnotation]
     if {$answer != "ok"} {
       return
     }
@@ -2282,9 +2282,9 @@
     } else {
       set parent .
     }
-    tk_messageBox -title "Scid: error starting analysis" \
+    tk_messageBox -title "Scid: Fehler beim Start der Analyse" \
         -icon warning -type ok -parent $parent \
-        -message "Unable to start the program:\n$analysisCommand $analysisArgs\n$result"
+        -message "Kann das Programm nicht starten:\n$analysisCommand $analysisArgs\n$result"
 
     set analysisWin$n 0
     resetEngine $n
@@ -2526,10 +2526,10 @@
   $w.hist.text tag configure gray -foreground $color -lmargin2 [font measure font_Small xxxxxxxxxxxxxxxxxx]
 
   $w.hist.text tag configure blue -foreground darkblue
-  $w.text insert end "Please wait a few seconds for engine initialisation \
-      (with some engines, you will not see any analysis until the board \
-      changes. So if you see this message, try changing the board \
-      by moving backward or forward or making a new move.)"
+  $w.text insert end "Bitte ein paar Sekunden für die Engine-Initialisierung warten \
+      (bei einigen Engines sieht man keine Analyse, bis das Brett \
+      sich ändert. Wenn Sie also diese Nachricht sehen, versuchen Sie, das Brett zu verändern \
+      durch rückwärts oder vorwärts ziehen oder mit einem neuen Zug.)"
   $w.text configure -state disabled
   bind $w <Destroy> "destroyAnalysisWin $n %W"
   bind $w <Escape> "focus .main ; destroy $w"
@@ -3214,11 +3214,11 @@
     if { $exit_status != 0 } {
 	logEngineNote $n {Engine terminated with exit code $exit_status: "\"$standard_error\""}
 	tk_messageBox -type ok -icon info -parent $parent -title Scid \
-		      -message "The analysis engine terminated with exit code $exit_status: \"$standard_error\""
+		      -message "Die Analyse-Engine terminierte mit dem Exitcode $exit_status: \"$standard_error\""
     } else {
 	logEngineNote $n {Engine terminated without exit code: "\"$standard_error\""}
 	tk_messageBox -type ok -icon info -parent $parent -title Scid \
-		      -message "The analysis engine terminated without exit code: \"$standard_error\""
+		      -message "Die Analyse-Engine terminierte ohne Exitcode: \"$standard_error\""
     }
 
   }
@@ -4089,7 +4089,7 @@
   toplevel $w
   #wm transient $w .analysisWin
   wm state $w withdrawn
-  wm title $w "Engine thinking time"
+  wm title $w "Engine-Bedenkzeit"
   wm resizable $w 0 0
   label $w.label -textvar tr(AnnotateTime)
   pack $w.label -side top -pady 5 -padx 5
Index: tcl/tools/calvar.tcl
===================================================================
--- tcl/tools/calvar.tcl	(revision 3386)
+++ tcl/tools/calvar.tcl	(working copy)
@@ -102,7 +102,7 @@
 
     # if no engines defined, bail out
     if {$i == 0} {
-      tk_messageBox -type ok -message "No UCI engine defined" -icon error
+      tk_messageBox -type ok -message "Keine UCI-Engine definiert" -icon error
       destroy $w
       return
     }
@@ -112,12 +112,12 @@
     frame $w.parameters
     pack $f
 
-    label $f.lTime2 -text "Initial thinking time"
+    label $f.lTime2 -text "Anfängliche Bedenkzeit"
     spinbox $f.sbTime2  -width 3 -textvariable ::calvar::thinkingTimePosition -from 5 -to 300 -increment 5 -validate all -vcmd {string is int %P}
     grid $f.lTime2 -row 0 -column 0
     grid $f.sbTime2 -row 0 -column 1
 
-    label $f.lTime -text "Variation thinking time"
+    label $f.lTime -text "Bedenkzeit Variante"
     spinbox $f.sbTime  -width 3 -textvariable ::calvar::thinkingTimePerLine -from 5 -to 120 -increment 5 -validate all -vcmd {string is int %P}
     grid $f.lTime -row 1 -column 0
     grid $f.sbTime -row 1 -column 1
@@ -186,7 +186,7 @@
 
     set f $w.fPieces
     frame $f
-    label $f.lPromo -text "Promotion"
+    label $f.lPromo -text "Umwandlung"
     pack $f.lPromo -side left
     foreach piece { "q" "r" "b" "n" } {
       button $f.p$piece -image w${piece}20 -command "::calvar::promo $piece"
Index: tcl/tools/comp.tcl
===================================================================
--- tcl/tools/comp.tcl	(revision 3386)
+++ tcl/tools/comp.tcl	(working copy)
@@ -27,7 +27,7 @@
   }
   toplevel $w
   wm state $w withdrawn
-  wm title $w "Configure Tournament"
+  wm title $w "Turnier konfigurieren"
   setWinLocation $w
 
   pack [frame $w.engines -borderwidth 2 -relief ridge] -side left -expand yes -fill both
@@ -39,7 +39,7 @@
   ### Engines
 
   grid [frame $w.engines.top] -row 0 -column 0 -pady 5 -sticky n
-  grid [label $w.engines.top.label -text "Number of Engines"] -row 0 -column 0
+  grid [label $w.engines.top.label -text "Anzahl von Schachprogrammen"] -row 0 -column 0
   grid [spinbox $w.engines.top.count -textvariable comp(count) -from 2 -to [llength $engines(list)] -width 4 -highlightthickness 0] -row 0 -column 1  -padx 15
   dialogbutton $w.engines.top.update -text $::tr(Update) -command drawCombos
   grid $w.engines.top.update -row 0 -column 2 
@@ -51,7 +51,7 @@
 
   set row 0
 
-  label $w.config.eventlabel -text {Tournament Name}
+  label $w.config.eventlabel -text {Turnierbezeichnung}
   entry $w.config.evententry -width 17 -textvariable comp(name) -borderwidth 1
 
   # 17 is magic number to pad the widget out to match the width
@@ -61,7 +61,7 @@
   grid $w.config.evententry -row $row -column 1 -sticky ew -padx 8 -pady 2
 
   incr row
-  label $w.config.roundslabel -text {Number of Rounds}
+  label $w.config.roundslabel -text {Anzahl Runden}
   spinbox $w.config.roundsvalue -textvariable comp(rounds) -from 1 -to 10 -width 7
 
   grid $w.config.roundslabel -row $row -column 0 -sticky w -padx 5 -pady 2
@@ -69,9 +69,9 @@
 
   incr row
   frame $w.config.control
-  label $w.config.control.0 -text {Time Control is per}
-  radiobutton $w.config.control.1 -variable comp(timecontrol) -value pergame -text Game -command checkTimeControl
-  radiobutton $w.config.control.2 -variable comp(timecontrol) -value permove -text Move -command checkTimeControl
+  label $w.config.control.0 -text {Zeitkontrolle ist pro}
+  radiobutton $w.config.control.1 -variable comp(timecontrol) -value pergame -text Partie -command checkTimeControl
+  radiobutton $w.config.control.2 -variable comp(timecontrol) -value permove -text Zug -command checkTimeControl
 
   pack $w.config.control.0 $w.config.control.1 $w.config.control.2 -side left -expand 1 -fill x
   grid $w.config.control  -row $row -column 0 -columnspan 2 -sticky ew -pady 2
@@ -78,11 +78,11 @@
 
   incr row
   frame $w.config.timesecs 
-  label $w.config.timesecs.label -text {Time per Move}
+  label $w.config.timesecs.label -text {Zeit pro Zug}
   set tmp $comp(seconds)
   spinbox $w.config.timesecs.value -textvariable comp(seconds) -from 1 -to 3600 -width 4
   set comp(seconds) $tmp
-  label $w.config.timesecs.label2 -text secs
+  label $w.config.timesecs.label2 -text sek
 
   pack $w.config.timesecs.label -side left
   pack $w.config.timesecs.label2 $w.config.timesecs.value -side right
@@ -91,14 +91,14 @@
   incr row
   frame $w.config.timegame 
   set temp $comp(base)
-  label $w.config.timegame.label -text {Time per game (seconds)}
+  label $w.config.timegame.label -text {Zeit pro Partie (Sekunden)}
   spinbox $w.config.timegame.base -textvariable comp(base) -from 0 -to 7200 -incr 5 -width 4
   set comp(base) $temp
 
   set temp $comp(incr)
-  label $w.config.timegame.label2 -text base
+  label $w.config.timegame.label2 -text Basis
   spinbox $w.config.timegame.incr -textvariable comp(incr) -from 0 -to 60 -width 4
-  label $w.config.timegame.label3 -text {incr }
+  label $w.config.timegame.label3 -text {Inkr }
   set comp(incr) $temp
 
   pack $w.config.timegame.label -side left
@@ -106,7 +106,7 @@
   grid $w.config.timegame -row $row -column 0 -columnspan 2 -sticky ew -pady 2 -padx 5
 
   incr row
-  label $w.config.showclocklabel -text {Show Clocks}
+  label $w.config.showclocklabel -text {Zeige Uhren}
   checkbutton $w.config.showclockvalue -variable comp(showclock) 
 
   grid $w.config.showclocklabel -row $row -column 0 -sticky w -padx 5 
@@ -115,7 +115,7 @@
   checkTimeControl
 
   incr row
-  label $w.config.ponderlabel -text {Permanent Thinking}
+  label $w.config.ponderlabel -text {Ständiges Berechnen}
   checkbutton $w.config.pondervalue -variable comp(ponder) 
 
   grid $w.config.ponderlabel -row $row -column 0 -sticky w -padx 5 
@@ -122,7 +122,7 @@
   grid $w.config.pondervalue -row $row -column 1 -padx 5 
 
   incr row
-  label $w.config.animatelabel -text {Animate Moves}
+  label $w.config.animatelabel -text {Zugbewegungen}
   checkbutton $w.config.animatevalue -variable comp(animate) 
 
   grid $w.config.animatelabel -row $row -column 0 -sticky w -padx 5 
@@ -129,9 +129,9 @@
   grid $w.config.animatevalue -row $row -column 1 -padx 5 
 
   incr row
-  label $w.config.scorelabel -text {Engine Scores as Comments}
+  label $w.config.scorelabel -text {Programmbewertungen als Kommentare}
   ttk::combobox $w.config.scorevalue -width 12 -textvariable comp(scoreType) \
-    -state readonly -values {No {+1.5} {[% +1.5]} {[%eval +1.5]}}
+    -state readonly -values {Nein {+1.5} {[% +1.5]} {[%eval +1.5]}}
 
   grid $w.config.scorelabel -row $row -column 0 -sticky w -padx 5
   grid $w.config.scorevalue -row $row -column 1 -sticky e -padx 8
@@ -169,9 +169,9 @@
   ### Scheduling / type
 
   incr row
-  label $w.config.scheduling -text {Game Scheduling}
+  label $w.config.scheduling -text {Partieplanung}
   ttk::combobox $w.config.type -width 19 -textvariable comp(type) \
-    -state readonly -values {Normal Carousel {First plays others}}
+    -state readonly -values {Normal {Jeder gegen jeden} {Erster spielt gegen andere}}
 
   grid $w.config.scheduling -row $row -column 0 -sticky w -padx 5
   grid $w.config.type       -row $row -column 1 -sticky e -padx 8
@@ -181,7 +181,7 @@
   incr row
   label $w.config.startlabel -textvar ::tr(StartPos)
   ttk::combobox $w.config.start -width 19 -textvariable comp(start) \
-    -state readonly -values {Normal {First game from current} {All games from current}}
+    -state readonly -values {Normal {Erste Partie von der aktuellen} {Alle Partien von der aktuellen}}
 
   grid $w.config.startlabel -row $row -column 0 -sticky w -padx 5
   grid $w.config.start -row $row -column 1 -sticky e -padx 8
@@ -251,13 +251,13 @@
   }
 
   if {[sc_base isReadOnly]} {
-    set answer [tk_messageBox -title Tournanment -icon question -type okcancel \
-	-message {Database is read only. Continue ?} -parent $w]
+    set answer [tk_messageBox -title Turnier -icon question -type okcancel \
+	-message {Datenbank kann nur gelesen werden. Fortsetzen?} -parent $w]
     if {$answer != "ok"} {return}
   }
   if {![sc_pos isAt end] && $comp(start) != "Normal"} {
-    set answer [tk_messageBox -title Tournanment -icon question -type okcancel \
-	-message {Current game is not at end of game. Continue ?} -parent $w]
+    set answer [tk_messageBox -title Turnier -icon question -type okcancel \
+	-message {Aktuelle Partie ist nicht am Partieende. Fortsetzen?} -parent $w]
     if {$answer != "ok"} {return}
   }
     
@@ -287,8 +287,8 @@
 
   ### Check players are unique
   if {[llength [lsort -unique $players]] != $comp(count)} {
-    tk_messageBox -type ok -parent $w -title {Scid: error} \
-      -message {Duplicate engines not supported}
+    tk_messageBox -type ok -parent $w -title {Scid: Fehler} \
+      -message {Doppelte Engines werden nicht unterstützt}
     return
   }
   foreach i $players j $names {
@@ -308,7 +308,7 @@
   }
   $w.buttons.ok configure -text Pause -command compPause -state normal
   pack forget $w.buttons.help
-  $w.buttons.cancel configure -text {End Comp} -command compAbort -state normal
+  $w.buttons.cancel configure -text {Ende Comp.} -command compAbort -state normal
   wm title $w "$::scidName Tournament"
   focus $w.buttons.ok
 
@@ -337,9 +337,9 @@
     set button dialogbutton
   }
 
-  $button $w.say.white -text "$::tr(White) wins" -command {compGameEnd 1}
+  $button $w.say.white -text "$::tr(White) gewinnt" -command {compGameEnd 1}
   $button $w.say.draw  -text "$::tr(Draw)" -command {compGameEnd =}
-  $button $w.say.black -text "$::tr(Black) wins" -command {compGameEnd 0}
+  $button $w.say.black -text "$::tr(Black) gewinnt" -command {compGameEnd 0}
 
   pack $w.say.white $w.say.draw -side left -padx 5
   pack $w.say.black -side right -padx 5
@@ -412,9 +412,9 @@
   ttk::progressbar $w.progress -mode determinate -maximum $num_games -variable comp(current)
   pack $w.progress -side bottom -fill x -padx 10 -pady 5
   if {"$comp(name)" != ""} {
-    label $w.statusbar -text "$comp(name): $num_games games"
+    label $w.statusbar -text "$comp(name): $num_games Partien"
   } else {
-    label $w.statusbar -text "$num_games games"
+    label $w.statusbar -text "$num_games Partien"
   }
   pack $w.statusbar -side bottom -fill x -pady 2
 
@@ -446,12 +446,12 @@
     foreach i $comp(players) {
       if {$comp(score$i) == $winner_score} {
         append winner ",[lindex [lindex $engines(list) $i] 0]"
-        set text Winners
+        set text Gewinner
       }
       if {$comp(score$i) > $winner_score} {
         set winner_score $comp(score$i)
         set winner [lindex [lindex $engines(list) $i] 0]
-        set text Winner
+        set text Gewinner
       }
       incr j
     }
@@ -989,12 +989,12 @@
   }
 
   if {$::comp(resultComment) == ""} {
-    .comp.statusbar configure -text "$name1 v $name2 result: $tmp"
+    .comp.statusbar configure -text "$name1 gegen $name2 Ergebnis: $tmp"
   } else {
     if {"$tmp" == ""} {
-      .comp.statusbar configure -text "$name1 v $name2 : $::comp(resultComment)"
+      .comp.statusbar configure -text "$name1 gegen $name2 : $::comp(resultComment)"
     } else {
-      .comp.statusbar configure -text "$name1 v $name2 : $::comp(resultComment), $tmp"
+      .comp.statusbar configure -text "$name1 gegen $name2 : $::comp(resultComment), $tmp"
     }
   }
 
@@ -1047,7 +1047,7 @@
   set w .comp
 
   after cancel compTimeout
-  $w.buttons.ok configure -text Resume -command compResume
+  $w.buttons.ok configure -text Fortfahren -command compResume
   set comp(paused) 1
 }
 
Index: tcl/tools/correspondence.tcl
===================================================================
--- tcl/tools/correspondence.tcl	(revision 3386)
+++ tcl/tools/correspondence.tcl	(working copy)
@@ -90,7 +90,7 @@
 		global ::Xfcc::xfccrc ::Xfcc::xfccrcfile
 		# file delete $xfccrcfile
 		if {[catch {open $xfccrcfile w} optionF]} {
-			::splash::add "$xfccrcfile can not be created" error
+			::splash::add "$xfccrcfile kann nicht erstellt werden" error
 		} else {
 			# devide by 4 as the size function returns all subarray entries
 			set size [expr [ array size ::Xfcc::xfccsrv ] / 4]
@@ -937,7 +937,7 @@
 	set scidConfigFiles(xfccstate) "xfccstate.dat"
 	if {[catch {source [scidConfigFile xfccstate]} ]} {
 	} else {
-	  ::splash::add "Xfcc state found and restored."
+	  ::splash::add "Xfcc-Status gefunden und wiederhergestellt."
 	}
 
 }
@@ -1356,7 +1356,7 @@
 	# $filespecs: the specs of the file (currently ignored)
 	#----------------------------------------------------------------------
 	proc chooseFile {i filespecs} {
-		set fullname [tk_getOpenFile -initialdir $::env(HOME) -title "Scid Correspondence Chess: Select $i"]
+		set fullname [tk_getOpenFile -initialdir $::env(HOME) -title "Scid Fernschach: $i auswählen"]
 		if {$fullname == ""} { return }
 	  
 		return $fullname
@@ -1433,8 +1433,8 @@
 
 		if {![file exists $xfccrcfile]} {
 			if {[catch {open $xfccrcfile w} optionF]} {
-				tk_messageBox -title "Scid: Unable to write file" -type ok -icon warning \
-					-message "Unable to write options file: $xfccrcfile\n$optionF"
+				tk_messageBox -title "Scid: kann Datei nicht schreiben" -type ok -icon warning \
+					-message "Kann Optionendatei nicht schreiben:" $xfccrcfile\n$optionF"
 			} else {
 				puts $optionF "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
 				puts $optionF "<xfcc>"
@@ -1463,7 +1463,7 @@
 			set fName [file rootname $CorrBase]
 			if {[catch {sc_base create $fName} result]} {
 					tk_messageBox -icon warning -type ok \
-						-title "Scid: Unable to create base" -message $result
+						-title "Scid: Datenbank kann nicht erstellt werden" -message $result
 			}
 			# Type 6 == Correspondence chess
 			sc_base type [sc_base current] 6
@@ -1510,8 +1510,8 @@
 	proc saveCCoptions {} {
 		set optionF ""
 		if {[catch {open [scidConfigFile correspondence] w} optionF]} {
-			tk_messageBox -title "Scid: Unable to write file" -type ok -icon warning \
-				-message "Unable to write options file: [scidConfigFile correspondence]\n$optionF"
+			tk_messageBox -title "Scid: kann Datei nicht schreiben" -type ok -icon warning \
+				-message "Kann Optionendatei nicht schreiben:" [scidConfigFile correspondence]\n$optionF"
 		} else {
 			# Check all paths etc. exist and contain valid data
 			::CorrespondenceChess::checkInOutbox
@@ -2722,7 +2722,7 @@
 				return
 			}
 
-			set typeCorr [lsearch $base_types {Correspondence chess} ]
+			set typeCorr [lsearch $base_types {Fernschach} ]
 			for {set x 1} {$x <= [ expr [sc_base count]-1 ]} {incr x} {
 					set type [sc_base type $x]
 					if {$type == $typeCorr} {
@@ -2752,7 +2752,7 @@
 		if {[catch {::file::Open $fName} result]} {
 			set err 1
 			tk_messageBox -icon warning -type ok \
-				-title "Scid: Error opening file" -message $result
+				-title "Scid: Fehler beim Öffnen der Datei" -message $result
 		} else {
 			if {[file extension $fName] == ".si3"} {
 				# file has been converted to si4
@@ -3922,10 +3922,10 @@
 
 		if {[regexp -nocase ^(https://)(.*) $uri]} {
 			if {[catch {package require tls} tls_version]} {
-				tk_messageBox -title "Xfcc Oops" -type ok -icon warning -message $::CorrespondenceChess::NoHTTPS
+				tk_messageBox -title "Xfcc Hoppla" -type ok -icon warning -message $::CorrespondenceChess::NoHTTPS
 				return 0
 			} else {
-				::splash::add "Loaded package tls, version $tls_version"
+				::splash::add "tls-Paket geladen, Version $tls_version"
 				::tls::init -ssl3 false -ssl2 false -tls1 true
 				http::register https 443 ::tls::socket
 				set ::CorrespondenceChess::SeenHTTPS 1
@@ -3943,22 +3943,22 @@
 
 	set scidConfigFiles(correspondence) "correspondence.dat"
 	if {[catch {source [scidConfigFile correspondence]} ]} {
-	  ::splash::add "Unable to load Correspondence options file correspondence.dat"
+	  ::splash::add "Kann Fernschachoptionendatei correspondence.dat nicht laden"
 	} else {
-	  ::splash::add "Correspondence Chess: correspondence.dat loaded."
+	  ::splash::add "Fernschach: correspondence.dat geladen."
 	}
 
 	if {[catch {set version [package require http]}]} {
-	  ::splash::add "http package not found, disabling internal Xfcc support"
+	  ::splash::add "http-Paket nicht gefunden, interne Xfcc-Unterstützung nicht aktiv"
 		set XfccInternal -1
 	} else {
-		::splash::add "http package $version found"
+		::splash::add "http-Paket $version gefunden"
 		::http::config -useragent $::Xfcc::useragent
 		if {[catch {set version [package require tdom]}]} {
-			::splash::add "tDOM package not found, disabling internal Xfcc support"
+			::splash::add "tDOM-Paket nicht gefunden, interne Xfcc-Unterstützung nicht aktiv"
 			set XfccInternal -1
 		} else {
-			::splash::add "tDOM package $version found, internal Xfcc support enabled"
+			::splash::add "tDOM-Paket $version gefunden, interne Xfcc-Unterstützung aktiviert"
 		}
 	}
 
Index: tcl/tools/email.tcl
===================================================================
--- tcl/tools/email.tcl	(revision 3386)
+++ tcl/tools/email.tcl	(working copy)
@@ -14,7 +14,7 @@
   }
   if {! [sc_base inUse] || [sc_base current] == 9} {
     tk_messageBox -icon info -type ok \
-       -title "Oops" -message "No database open."
+       -title "Hoppla" -message "Keine Datenbank geöffnet."
     return
   }
 
@@ -32,7 +32,7 @@
   pack $w.b -side right -fill y
 
   set f $w.f
-  label $f.title -text "Opponent list" -font font_Bold
+  label $f.title -text "Gegnerliste" -font font_Bold
   listbox $f.list -height 16 -width 40 -exportselection false \
     -selectmode browse -font font_Fixed \
     -yscrollcommand "$f.scroll set"  -setgrid 1
@@ -56,7 +56,7 @@
 
   set b .emailWin.b
 
-  button $b.add -text "Add" -underline 0 -command {
+  button $b.add -text "Hinzufügen" -underline 0 -command {
     set idx [llength $emailData]
     lappend emailData [list "" "" "" "" ""]
     modifyEmailDetails $idx
@@ -63,11 +63,11 @@
     ::tools::email::refresh
   }
 
-  button $b.edit -text "Edit..." -underline 0 -command ::tools::email::EditButton
-  button $b.delete -text "Delete..." -underline 0 -command ::tools::email::DeleteButton
-  button $b.load -text "Load game" -underline 0 -command ::tools::email::LoadButton
-  button $b.send -text "Send email..." -underline 0 -command ::tools::email::SendButton
-  menubutton $b.time -text "Time" -underline 0 -indicatoron 1 \
+  button $b.edit -text "Bearbeiten..." -underline 0 -command ::tools::email::EditButton
+  button $b.delete -text "Löschen..." -underline 0 -command ::tools::email::DeleteButton
+  button $b.load -text "Lade Partie" -underline 0 -command ::tools::email::LoadButton
+  button $b.send -text "Sende E-Mail..." -underline 0 -command ::tools::email::SendButton
+  menubutton $b.time -text "Zeit" -underline 0 -indicatoron 1 \
     -menu $b.time.m -relief raised
   menu $b.time.m
   $b.time.m add command -label "Received today" -underline 0 \
@@ -77,7 +77,7 @@
   $b.time.m add command -label "Edit..." -underline 0 \
     -command {::tools::email::TimesButton e}
 
-  button $b.config -text "Settings" -command ::tools::email::config
+  button $b.config -text "Einstellungen" -command ::tools::email::config
   button $b.help -text $::tr(Help) -command { helpWindow Email }
   button $b.close -text $::tr(Close) -command { destroy .emailWin }
 
@@ -107,12 +107,12 @@
   wm withdraw $w
 
   wm title $w Scid
-  label $w.use -text "Send email using:" -font font_Bold
+  label $w.use -text "Sende E-Mail mit:" -font font_Bold
   frame $w.smtp
-  radiobutton $w.smtp.b -text "SMTP server:" -variable email(smtp) -value 1
+  radiobutton $w.smtp.b -text "SMTP-Server:" -variable email(smtp) -value 1
   entry $w.smtp.s -width 30 -textvar email(server) 
   frame $w.sm
-  radiobutton $w.sm.b -text "sendmail process:" -variable email(smtp) -value 0
+  radiobutton $w.sm.b -text "Sendmailprozeß:" -variable email(smtp) -value 0
   entry $w.sm.s -width 30 -textvar email(smproc) 
   pack $w.use -side top
   pack $w.smtp $w.sm -side top -fill x
@@ -119,9 +119,9 @@
   pack $w.smtp.s $w.smtp.b -side right
   pack $w.sm.s $w.sm.b -side right
   addHorizontalRule $w
-  label $w.addr -text "Email address fields:" -font font_Bold
+  label $w.addr -text "E-Mail-Adressfelder:" -font font_Bold
   frame $w.from
-  label $w.from.lab -text "From:"
+  label $w.from.lab -text "Von:"
   entry $w.from.e -textvar email(from) -width 30 
   frame $w.bcc
   label $w.bcc.lab -text "Bcc:"
@@ -162,8 +162,8 @@
   set idx [lindex $sel 0]
   if {[llength $emailData] <= $idx} { return }
   set confirm [tk_messageBox -icon question -type yesno -default yes \
-                 -parent .emailWin -title "Really delete opponent?" \
-                 -message "Do you really want to delete this opponent?"]
+                 -parent .emailWin -title "Wirklich Gegner löschen?" \
+                 -message "Wollen Sie wirklich diesen Gegner löschen?"]
   if {$confirm == "yes"} {
       set emailData [lreplace $emailData $idx $idx]
     ::tools::email::writeOpponentFile $emailData
@@ -221,7 +221,7 @@
   if {[winfo exists $w]} { return }
   toplevel $w
   wm title $w "Scid: Email Times"
-  label $w.title -text "Email Times for [lindex $details 0]"
+  label $w.title -text "E-Mail-Zeiten für [lindex $details 0]"
   frame $w.t
   text $w.t.text -height 15 -width 30 -font font_Fixed -setgrid 1 \
     -yscrollcommand "$w.t.ybar set"
@@ -360,15 +360,15 @@
   wm title $w "Send email to $name"
   set f [frame $w.fields]
 
-  label $f.fromlab -text "From: "
+  label $f.fromlab -text "Von: "
   entry $f.from 
   $f.from insert end $email(from)
 
-  label $f.tolab -text "To: "
+  label $f.tolab -text "An: "
   entry $f.to 
   $f.to insert end $addr
 
-  label $f.subjlab -text "Subject: "
+  label $f.subjlab -text "Betreff: "
   entry $f.subj 
   $f.subj insert end $subj
 
@@ -376,8 +376,8 @@
   entry $f.bcc 
   $f.bcc insert end $email(bcc)
 
-  button $f.send -text "Send" -command "::tools::email::processMessage $w $idx"
-  button $f.cancel -text "Cancel" -command "destroy $w"
+  button $f.send -text "Senden" -command "::tools::email::processMessage $w $idx"
+  button $f.cancel -text "Abbrechen" -command "destroy $w"
 
   grid $f.send -row 0 -column 3 -rowspan 2 -sticky nesw
   grid $f.cancel -row 2 -column 3 -rowspan 2 -sticky nesw
@@ -434,14 +434,14 @@
   set bcc [$w.fields.bcc get]
   set message [$w.message.text get 1.0 end]
   if {[string trim $to] == ""} {
-    tk_messageBox -icon error -type ok -title "Empty email address" \
-      -message "You must specify an email address."
+    tk_messageBox -icon error -type ok -title "Leere E-Mail-Adresse" \
+      -message "Sie müssen eine E-Mail-Adresse angeben."
     return
   }
   set cmd {::tools::email::sendMessage $from $to $subj $bcc $message}
   if {[catch $cmd result] != 0} {
-    tk_messageBox -icon error -type ok -title "Error sending email" \
-      -message "Error sending email: $result"
+    tk_messageBox -icon error -type ok -title "Fehler beim Senden der E-Mail" \
+      -message "Fehler beim Senden der E-Mail: $result"
   } else {
     ::tools::email::addSentReceived $idx s
     tk_messageBox -icon info -type ok -title Scid -message $result
@@ -499,7 +499,7 @@
   puts $copy_id  ""
   puts $copy_id $message
   close $copy_id
-  return "The email message was sent; a copy was appended to $email(logfile)"
+  return "Die E-Mail-Nachricht wurde abgesandt; eine Kopie wurde an $email(logfile) angehängt"
 }
 
 proc modifyEmailDetails {i} {
@@ -521,15 +521,15 @@
   entry $f.entry -width 30  -textvariable emailData_name
 
   set f [frame $w.addr]
-  label $f.label -text "Email address: "
+  label $f.label -text "E-Mailadresse: "
   entry $f.entry -width 30  -textvariable emailData_addr
 
   set f [frame $w.subj]
-  label $f.label -text "Subject: "
+  label $f.label -text "Betreff: "
   entry $f.entry -width 30  -textvariable emailData_subj
 
   set f [frame $w.glist]
-  label $f.label -text "Game Numbers: "
+  label $f.label -text "Partienummern: "
   entry $f.entry -width 30  -textvariable emailData_glist
 
   foreach f {name addr subj glist} {
@@ -541,7 +541,7 @@
   addHorizontalRule $w
 
   set f [frame $w.sig]
-  label $f.label -text "Signature: " -anchor n
+  label $f.label -text "Signatur: " -anchor n
   text $f.entry -width 30 -height 5 
 
   pack $f -side top -fill x
@@ -550,11 +550,11 @@
   addHorizontalRule $w
 
   set f [frame $w.buttons]
-  button $w.buttons.save -text "Save" -command {
+  button $w.buttons.save -text "Speichern" -command {
     set gNumberErr [::tools::email::validGameNumbers $emailData_glist]
     if {$gNumberErr != -1} {
-      tk_messageBox -icon error -type ok -title "Invalid data" \
-        -message "The games list contains an invalid game number: $gNumberErr; there are only [sc_base numGames] games in this database."
+      tk_messageBox -icon error -type ok -title "Ungültige Daten" \
+        -message "Die Partienliste enthält eine ungültige Partienummer: $gNumberErr; es gibt nur [sc_base numGames] Partien in dieser Datenbank."
     } else {
       set emailData [lreplace $emailData $emailData_index \
                        $emailData_index \
@@ -566,7 +566,7 @@
       ::tools::email::refresh
     }
   }
-  button $f.cancel -text "Cancel" -command {
+  button $f.cancel -text "Abbrechen" -command {
     set emailData [::tools::email::readOpponentFile]
     destroy .emailEditor
     ::tools::email::refresh
Index: tcl/tools/fics.tcl
===================================================================
--- tcl/tools/fics.tcl	(revision 3390)
+++ tcl/tools/fics.tcl	(working copy)
@@ -77,7 +77,7 @@
 
     toplevel $w
     wm state $w withdrawn
-    wm title $w "Configure Fics"
+    wm title $w "FICS konfigurieren"
     label $w.lLogin -text "$tr(CCDlgLoginName)"
     entry $w.login -width 20 -textvariable ::fics::login
     label $w.lPwd -text [tr "CCDlgPassword"]
@@ -161,7 +161,7 @@
     button $w.button.help -text $tr(Help) -command {helpWindow FICS}
 
     button $w.button.defaults -textvar tr(Defaults) -command {
-      if {[tk_dialog .ficsConfig.dialog Abort "This will reset all FICS options. Do you wish to continue ?" question {} [tr Yes] [tr No]] == 0} {
+      if {[tk_dialog .ficsConfig.dialog Abort "Dies setzt alle FICS-Optionen zurück. Wollen Sie weitermachen?" question {} [tr Yes] [tr No]] == 0} {
 	initFICSDefaults
 	raiseWin .ficsConfig
       }
@@ -256,7 +256,7 @@
        } err ]} {
 	  ::fics::unbusy_config
 	  $b configure -state normal
-          tk_messageBox -icon error -type ok -title "Unable to contact $::fics::server" -message $err -parent .ficsConfig
+          tk_messageBox -icon error -type ok -title "Kann nicht $::fics::server kontaktieren" -message $err -parent .ficsConfig
           return
     }
 
@@ -270,7 +270,7 @@
 
       if { [catch {set peer [ fconfigure $sockChan -peername ]} err]} {
         if {$i == $timeOut} {
-          tk_messageBox -icon error -type ok -title "Unable to contact $::fics::server" -message $err -parent .ficsConfig
+          tk_messageBox -icon error -type ok -title "Kann nicht $::fics::server kontaktieren" -message $err -parent .ficsConfig
 	  $b configure -state normal
 	  unbusyCursor .
           return
@@ -301,8 +301,8 @@
     global ::fics::sockchan ::fics::seeklist ::fics::graph fontOptions tr
 
     if { $guest=="no" && $::fics::reallogin == ""} {
-      tk_messageBox -title "Error" -icon error -type ok -parent .ficsConfig \
-        -message "No login name specified" -parent .ficsConfig
+      tk_messageBox -title "Fehler" -icon error -type ok -parent .ficsConfig \
+        -message "Kein Anmeldename angegeben" -parent .ficsConfig
       return
     }
 
@@ -309,13 +309,13 @@
     # check timeseal configuration
     if {$::fics::use_timeseal} {
       if {![file executable $::fics::timeseal_exec] || ![file isfile $::fics::timeseal_exec]} {
-        tk_messageBox -title "Error" -icon error -type ok -message "Timeseal error : \"$::fics::timeseal_exec\" not executable" -parent .ficsConfig
+        tk_messageBox -title "Fehler" -icon error -type ok -message "Timeseal-Fehler: \"$::fics::timeseal_exec\" ist nicht ausführbar" -parent .ficsConfig
         return
       }
     }
     if {$::fics::use_zseal} {
       if {![file executable $::fics::zseal_exec] || ![file isfile $::fics::zseal_exec]} {
-        tk_messageBox -title "Error" -icon error -type ok -message "Zseal error : \"$::fics::zseal_exec\" not executable" -parent .ficsConfig
+        tk_messageBox -title "Fehler" -icon error -type ok -message "Zseal error : \"$::fics::zseal_exec\" not executable" -parent .ficsConfig
         return
       }
     }
@@ -537,7 +537,7 @@
     incr row
     button $w.bottom.buttons.offers  -text "$tr(FICSOffers) $tr(Graph)" -command {
       if {$::fics::playing == 1 || $::fics::playing == -1} {
-	::fics::updateConsole "Scid: Offers Graph disabled while playing a game"
+	::fics::updateConsole "Scid: Grafikangebot ist während Partie deaktiviert"
 	return
       }
       set ::fics::graph(on) [expr {! $::fics::graph(on)}]
@@ -611,7 +611,7 @@
     }
     if {[catch $command result]} {
       unbusyCursor .
-      tk_messageBox -title "Error" -icon error -type ok -message "Network error\nError executing $command" -parent .fics
+      tk_messageBox -title "Fehler" -icon error -type ok -message "Network error\nError executing $command" -parent .fics
       return
     }
 
@@ -690,7 +690,7 @@
       smoves {
 	  # smoves recreates a game without any further announcment
 	  if {$::fics::playing == 1 || $::fics::playing == -1} {
-	    ::fics::updateConsole "Scid: smoves disabled while playing a game"
+	    ::fics::updateConsole "Scid: smoves ist während einer Partie deaktiviert"
 	    return
 	  }
 
@@ -724,13 +724,13 @@
           set plus [expr {[string index [lindex $c 0] end] == "+"}]
 
 	  if {$plus && $::fics::playing == 1 || $::fics::playing == -1} {
-	    updateConsole "Scid: follow+ disabled while playing a game"
+	    updateConsole "Scid: follow+ ist während einer Partie deaktiviert"
 	    return
 	  }
 
           set l2 [lindex $l 1]
           if {$plus && ($l2 == {} || [string index $l2 0] == {/})} {
-	    updateConsole "Scid: follow+ needs a player name"
+	    updateConsole "Scid: follow+ benötigt einen Spielernamen"
 	    return
           }
 
@@ -751,11 +751,11 @@
       upload {
           # upload current game to examine mode
           if {$::fics::playing == 2} {
-	    tk_messageBox -title "Oops" -icon info -type ok -message "You are already examining a game" -parent .fics
+	    tk_messageBox -title "Hoppla" -icon info -type ok -message "Sie untersuchen bereits eine Partie" -parent .fics
             return
           } 
           if {[string first "\n1." [sc_game pgn]] == -1} {
-	    tk_messageBox -title "Oops" -icon info -type ok -message "This game has no moves" -parent .fics
+	    tk_messageBox -title "Hoppla" -icon info -type ok -message "Diese Partie enthält keine Züge" -parent .fics
             return
           } 
 	  set white [string trim [lindex [sc_game tags get White] 0] {,}]
@@ -833,7 +833,7 @@
     }
     toplevel $w
     wm state $w withdrawn
-    wm title $w "Find Opponent"
+    wm title $w "Suche Gegner"
 
     set row 0
 
@@ -917,8 +917,8 @@
       ::fics::writechan $cmd
       catch {destroy .ficsfindopp}
       ::fics::initOffers
-    } -width 10
-    button $w.help   -text $tr(Help) -command "helpWindow FICSfindopp" -width 10
+    } -width 13
+    button $w.help   -text $tr(Help) -command "helpWindow FICSfindopp" -width 13
     button $w.cancel -text $tr(Cancel) -command "catch \{destroy $w\}" -width 10
 
     bind $w <F1> {helpWindow FICSfindopp}
@@ -938,7 +938,7 @@
     variable logged
     if {[eof $::fics::sockchan]} {
       fileevent $::fics::sockchan readable {}
-      tk_messageBox -title "Read error" -icon error -type ok -message "Network error\nFics will exit." -parent .fics
+      tk_messageBox -title "Lesefehler" -icon error -type ok -message "Netzwerkfehler\nFics wird beendet." -parent .fics
       ::fics::close error
       return
     }
@@ -1073,7 +1073,7 @@
         # When showing positions from bughouse games, a second line showing piece
         # holding is given, with "<b1>" at the beginning, for example:
         # <b1> game 6 white [PNBBB] black [PNB]
-        # .fics.bottom.game$game.w.white configure -text "[lindex $line 17] ([lindex $line 24] secs) X"
+        # .fics.bottom.game$game.w.white configure -text "[lindex $line 17] ([lindex $line 24] sek) X"
 	if { [scan $line "<b1> game %d white %s black %s" game piecesw piecesb] == 3} {
           catch {
             if {$piecesw == {[]}} {set piecesw {}}
@@ -1242,7 +1242,7 @@
         set t2 [::gameclock::getSec 2]
 	if {$t1 < 0} {set t1 0}
 	if {$t2 < 0} {set t2 0}
-	::commenteditor::appendComment "$resultcomment\nWhiteclock [expr $t1 / 60]:[format {%02i} [expr $t1 % 60]] Blackclock [expr $t2 / 60]:[format {%02i} [expr $t2 % 60]]"
+	::commenteditor::appendComment "$resultcomment\nUhr Weiß [expr $t1 / 60]:[format {%02i} [expr $t1 % 60]] Uhr Schwarz [expr $t2 / 60]:[format {%02i} [expr $t2 % 60]]"
         sc_game tags set -result $res
         # if {![string match  {*Game aborted*} $line]} 
         if {[sc_pos moveNumber] > 2} {
@@ -1262,11 +1262,11 @@
 	    ::utils::sound::PlayMove sound_end
 	  }
 	  if {! $::fics::no_results && ($res != "*" || [sc_pos moveNumber] > 1)} {
-	    if {[string match "1/2*" $res]} {set res Draw}
+	    if {[string match "1/2*" $res]} {set res Remis}
 	    ::fics::killDialogs
             # pause a second to allow the move animation to complete
             after [expr {2 * $::animateDelay}] "
-	      tk_messageBox -title \"Game result\" -icon info -type ok -message \"$res\"
+	      tk_messageBox -title \"Partieergebnis\" -icon info -type ok -message \"$res\"
             "
 	    # Game can end while dragging a piece, this can carry over, so try to handle
 	    clearAllMoves
@@ -1486,7 +1486,7 @@
         writechan decline
       } else {
 	::fics::killDialogs
-	set ans [tk_dialog .fics_dialog Abort "$line\nDo you accept ?" question {} Yes No Ignore]
+	set ans [tk_dialog .fics_dialog Abbrechen "$line\nNehmen Sie an?" question {} Ja Nein Ignorieren]
 	switch -- $ans {
 	  0 {writechan accept}
 	  1 {writechan decline}
@@ -1498,7 +1498,7 @@
     # takeback
     if {[string match "* would like to take back *" $line] && ! $::fics::no_requests && ! $::fics::ignore_takeback} {
       ::fics::killDialogs
-      set ans [tk_dialog .fics_dialog {Take Back} "$line\nDo you accept ?" question {} Yes No Ignore]
+      set ans [tk_dialog .fics_dialog {Zurücknehmen} "$line\nNehmen Sie an?" question {} Ja Nein Ignorieren]
       switch -- $ans {
         0 {
             writechan accept
@@ -1517,13 +1517,13 @@
     # draw
     if {[string match "*offers you a draw*" $line] && ! $::fics::ignore_draw} {
       if {[regexp {(.*) offers you a draw} $line t1 t2]} {
-	::commenteditor::appendComment "$t2 offers draw"
+	::commenteditor::appendComment "$t2 bietet Remis"
       }
       if {$::fics::no_requests} {
         writechan decline
       } else {
         ::fics::killDialogs
-	set ans [tk_dialog .fics_dialog {Draw Offered} "$line\nDo you accept ?" question {} Yes No Ignore]
+	set ans [tk_dialog .fics_dialog {Remis wird angeboten} "$line\nNehmen Sie an?" question {} Ja Nein Ignorieren]
 	switch -- $ans {
 	  0 {writechan accept}
 	  1 {writechan decline}
@@ -1538,7 +1538,7 @@
         writechan decline
       } else {
         ::fics::killDialogs
-	set ans [tk_dialog .fics_dialog {Adjourn Offered} "$line\nDo you accept ?" question {} Yes No Ignore]
+	set ans [tk_dialog .fics_dialog {Aufschieben wird angeboten} "$line\nNehmen Sie an?" question {} Ja Nein Ignorieren]
 	switch -- $ans {
 	  0 {writechan accept}
 	  1 {writechan decline}
@@ -1715,7 +1715,7 @@
                             switch -glob $t2 {
                               mamer* { 
 				      if {! $::fics::no_results} {
-					tk_messageBox -title Mamer -icon info -type ok -parent .fics -message "$t2 tells you" -detail $t3
+					tk_messageBox -title Mamer -icon info -type ok -parent .fics -message "$t2 sagt Ihnen" -detail $t3
 				      }
 				    } 
                               ROBO* {
@@ -1820,8 +1820,8 @@
 
     toplevel $w
     wm state $w withdrawn
-    wm title $w "Fics Offers"
-    pack [label $w.title -text "$::tr(FICSOffers) for $::fics::reallogin" -font font_Regular] -side top -padx 20 -pady 5
+    wm title $w "FICS-Angebote"
+    pack [label $w.title -text "$::tr(FICSOffers) für $::fics::reallogin" -font font_Regular] -side top -padx 20 -pady 5
 
     pack [button $w.cancel -text $::tr(Cancel) \
 	-command "::fics::writechan unseek ; catch \{destroy $w\}"] -side bottom -pady 5
@@ -1921,11 +1921,11 @@
       }
       if {$::fics::findopponent(manual) == {auto}} {
 	  pack [frame $f] -side top -padx 5 -pady 5
-	  pack [label $f.name -text "Awaiting offer" -width 40] -padx 10
+	  pack [label $f.name -text "Erwarte Angebot" -width 40] -padx 10
       } else {
 	if {![winfo exists $f]} {
 	  pack [frame $f] -side top -padx 5 -pady 5
-	  pack [label $f.name -text "No [tr FICSOffers]" -state disabled -width 40] -side left 
+	  pack [label $f.name -text "Kein [tr FICSOffers]" -state disabled -width 40] -side left 
 	  pack [button $f.decline -text [tr FICSDecline] -state disabled ] -side right -padx 5
 	  pack [button $f.accept -text [tr FICSAccept] -state disabled ] -side right -padx 5
 	}
@@ -2167,8 +2167,8 @@
 	updateBoard -pgn
       }
       if {$::fics::examNotify} {
-	wm title $::dot_w "$::scidName: $white - $black (examining game $game)"
-	updateConsole "Now examining game $game"
+	wm title $::dot_w "$::scidName: $white - $black (untersuche Partie $game)"
+	updateConsole "Untersuche jetzt Partie $game"
 	set ::fics::examNotify 0
       }
       return
@@ -2259,7 +2259,7 @@
     }
 
     if {$fen == [sc_pos fen]} {
-      wm title $::dot_w "$::scidName: $white - $black (game $game: $::fics::timecontrol)"
+      wm title $::dot_w "$::scidName: $white - $black (Partie $game: $::fics::timecontrol)"
       updateBoard -pgn -animate
     } elseif {$whiteTime > 0 && $blackTime > 0} {
       ### Game out of sync, probably due to player takeback request (or opponent take back 2).
@@ -2322,7 +2322,7 @@
 
       set ::fics::mutex 0
       updateBoard -pgn
-      wm title $::dot_w "$::scidName: $white - $black (game $game: $::fics::timecontrol)"
+      wm title $::dot_w "$::scidName: $white - $black (Partie $game: $::fics::timecontrol)"
 
       if {$::fics::playing != 1 && $::fics::playing != -1 && $::fics::observedGames != {}} {
 	catch {.fics.bottom.game${::fics::primary}.w.result configure -font font_Small}
@@ -2522,7 +2522,7 @@
   proc writechan {line {echo "noecho"}} {
     after cancel ::fics::stayConnected
     if {[eof $::fics::sockchan]} {
-      tk_messageBox -title "Write error" -icon error -type ok -message "Network error\nFics will exit"
+      tk_messageBox -title "Schreibfehler" -icon error -type ok -message "Netzwerkfehler\nFics wird beendet"
       ::fics::close error
       return
     }
@@ -2564,7 +2564,7 @@
     # Unused
     if {$mode == "safe"} {
       ::fics::killDialogs
-      set ans [tk_dialog .fics_dialog Abort "You are playing a game\nDo you want to exit ?" question {} Exit Cancel ]
+      set ans [tk_dialog .fics_dialog Abbrechen "Sie spielen eine Partie\nWollen Sie aufhören?" question {} Ende Abbrechen ]
       if {$ans == 1} {
 	bind .fics <Destroy> ::fics::close
         return
@@ -2582,7 +2582,7 @@
         set t2 [::gameclock::getSec 2]
 	if {$t1 < 0} {set t1 0}
 	if {$t2 < 0} {set t2 0}
-	::commenteditor::appendComment "Disconnected\nWhiteclock [expr $t1 / 60]:[format {%02i} [expr $t1 % 60]] Blackclock [expr $t2 / 60]:[format {%02i} [expr $t2 % 60]]"
+	::commenteditor::appendComment "Unterbrochen\nUhr Weiß [expr $t1 / 60]:[format {%02i} [expr $t1 % 60]] Uhr Schwarz [expr $t2 / 60]:[format {%02i} [expr $t2 % 60]]"
         if {[sc_pos moveNumber] > 2} {
           catch {::game::Save}
           updateBoard -pgn
@@ -2662,7 +2662,7 @@
   }
 
   proc setForeGround {} {
-    set fg [tk_chooseColor -initialcolor $::fics::consolefg -title {FICS Text} -parent .]
+    set fg [tk_chooseColor -initialcolor $::fics::consolefg -title {FICS-Textfarben} -parent .]
     if {![catch {.fics.console.text configure -fg $fg}]} {
       set ::fics::consolefg $fg
     }
@@ -2669,7 +2669,7 @@
   }
 
   proc setBackGround {} {
-    set bg [tk_chooseColor -initialcolor $::fics::consolebg -title {FICS Background} -parent .]
+    set bg [tk_chooseColor -initialcolor $::fics::consolebg -title {FICS-Hintergrundfarben} -parent .]
     if {![catch {.fics.console.text configure -bg $bg}]} {
       set ::fics::consolebg $bg
     }
Index: tcl/tools/graphs.tcl
===================================================================
--- tcl/tools/graphs.tcl	(revision 3386)
+++ tcl/tools/graphs.tcl	(working copy)
@@ -14,12 +14,12 @@
   if {! [winfo exists $w]} { return }
   set ftypes {{"PostScript files" {.eps .ps}} {"All files" *}}
   set fname [tk_getSaveFile -initialdir $::env(HOME) -filetypes $ftypes -parent $w \
-               -defaultextension ".eps" -title "Scid: Save Graph"]
+               -defaultextension ".eps" -title "Scid: Grafik speichern"]
   if {$fname == ""} {
     return
   }
   if {![file writable [file dirname $fname]]} {
-    tk_messageBox -icon info -parent $w -title Scid -message "File $fname not writeable."
+    tk_messageBox -icon info -parent $w -title Scid -message "Datei $fname nicht schreibbar."
     return
   }
   if {[catch {$w postscript -file $fname -colormode $mode} result]} {
@@ -683,31 +683,31 @@
     Score {
       set lineGraph 0
       set values $scoreValues
-      set title "[tr Score] [tr Graph]"
+      set title "Bewertungsgrafik"
     }
     Time {
       set lineGraph 0
       set values $emtValues
-      set title "[tr Time] [tr Graph] ([tr seconds])"
+      set title "Zeitgrafik (Sekunden)"
     }
     {Score Combo} {
       set lineGraph 1
       set values $scoreValues
-      set title "[tr Score] [tr Graph]"
+      set title "Bewertungsgrafik"
     }
     {Time Combo} {
       set lineGraph 1
       set values $emtValues
-      set title "[tr Time] [tr Graph] ([tr seconds])"
+      set title "Zeitgrafik (Sekunden)"
     }
     Auto {
       set lineGraph 1
       if {[llength $scoreValues] < 10 && [llength $scoreValues] < [llength $emtValues]} {
         set values $emtValues
-        set title "[tr Time] [tr Graph] ([tr seconds])"
+        set title "Zeitgrafik (Sekunden)"
       } else {
         set values $scoreValues
-        set title "[tr Score] [tr Graph]"
+        set title "Bewertungsgrafik"
       }
     }
   }
@@ -898,10 +898,10 @@
     $w.menu.options add checkbutton -label GraphOptionsSpelling \
       -variable ::tools::graphs::spelling -command ::tools::graphs::rating::Refresh
 
-    $w.menu add cascade -label {Start Year} -menu $w.menu.year
+    $w.menu add cascade -label {Startjahr} -menu $w.menu.year
     menu $w.menu.year
     foreach i {1900 1980 1985 1990 1995 2000 2005 2010 2015 2020} {
-      $w.menu.year add radiobutton -label "Since $i" \
+      $w.menu.year add radiobutton -label "Seit $i" \
         -variable ::tools::graphs::rating::year -value $i \
         -command ::tools::graphs::rating::Refresh
     }
Index: tcl/tools/import.tcl
===================================================================
--- tcl/tools/import.tcl	(revision 3386)
+++ tcl/tools/import.tcl	(working copy)
@@ -137,8 +137,8 @@
   }
 
   if {![info exists ::tmp] || $::tmp == {}} {
-    tk_messageBox -type ok -icon error -title "Scid: Oops" \
-      -message "No text in clipboard."
+    tk_messageBox -type ok -icon error -title "Scid: Hoppla" \
+      -message "Kein Text in der Ablage."
     return
   }
 
@@ -177,8 +177,8 @@
       catch {sc_var delete [sc_var number]}
     }
     updateBoard -pgn
-    tk_messageBox -type ok -icon error -title "Scid: Oops" \
-      -message "Error adding variation \"$::tmp\""
+    tk_messageBox -type ok -icon error -title "Scid: Hoppla" \
+      -message "Fehler beim Variante hinzufügen \"$::tmp\""
   } else {
     # Now go back to the previous place
     if {$create_var} {
@@ -236,9 +236,9 @@
 
   set err ""
   if {[sc_base isReadOnly]} { set err "Database \"[file tail [sc_base filename]]\" is read-only." }
-  if {![sc_base inUse]} { set err "This is not an open database." }
+  if {![sc_base inUse]} { set err "Dies ist keine geöffnete Datenbank." }
   if {$err != ""} {
-    tk_messageBox -type ok -icon error -title "Scid: Error" -message $err
+    tk_messageBox -type ok -icon error -title "Scid: Fehler" -message $err
     return
   }
   if {[sc_info gzip]} {
@@ -257,7 +257,7 @@
   if {! [file isdirectory $::initialDir(pgn)] } {
     set ::initialDir(pgn) $::env(HOME)
   }
-  set fnames [tk_getOpenFile -multiple 1 -initialdir $::initialDir(pgn) -filetypes $ftypes -title "Import from PGN files" ]
+  set fnames [tk_getOpenFile -multiple 1 -initialdir $::initialDir(pgn) -filetypes $ftypes -title "Import von PGN-Dateien" ]
   if {$fnames == ""} { return }
 
   set ::initialDir(pgn) [file dirname [lindex $fnames 0]]
@@ -273,12 +273,12 @@
   if {[winfo exists $w] && ! $multiple } { destroy $w }
   if {! [winfo exists $w]} {
     if {![file exists $fname]} {
-      error "File $fname doesn't exist."
+      error "Datei $fname existiert nicht."
     } 
 
     toplevel $w
     wm state $w withdrawn
-    wm title $w "Scid: Importing PGN file"
+    wm title $w "Scid: importiere PGN-Datei"
 
     canvas $w.progress -width 350 -height 20 -relief solid -border 1
     $w.progress create rectangle 0 0 0 0 -fill $::progcolor -outline $::progcolor -tags bar
@@ -315,7 +315,7 @@
   bind $w <Escape> "$w.buttons.stop invoke"
   $w.buttons.close configure -state disabled
   $w.tf.text insert end $text
-  $w.tf.text insert end "Importing file $fname\n"
+  $w.tf.text insert end "Importiere Datei $fname\n"
   $w.tf.text configure -state disabled
 
   set err [catch {sc_base import file $fname} result]
@@ -329,10 +329,10 @@
   } else {
     set nImported [lindex $result 0]
     set warnings [lindex $result 1]
-    set str "\nImported $nImported "
-    if {$nImported == 1} { append str "game" } else { append str "games" }
+    set str "\nImport von $nImported "
+    if {$nImported == 1} { append str "Partie" } else { append str "Partien" }
     if {$warnings == ""} {
-      append str " successfully."
+      append str " erfolgreich."
     } else {
       append str ":\n$warnings"
     }
Index: tcl/tools/inputengine.tcl
===================================================================
--- tcl/tools/inputengine.tcl	(revision 3386)
+++ tcl/tools/inputengine.tcl	(working copy)
@@ -170,8 +170,8 @@
 
   proc saveHardwareOptions {} {
     if {[catch {open [scidConfigFile ExtHardware] w} optionF]} {
-       tk_messageBox -title "Scid: Unable to write file" -type ok -icon warning \
-	  -message "Unable to write options file: [scidConfigFile ExtHardware]\n$optionF"
+       tk_messageBox -title "Scid: kann Datei nicht schreiben" -type ok -icon warning \
+	  -message "Kann Optionendatei nicht schreiben:" [scidConfigFile ExtHardware]\n$optionF"
     } else {
        puts $optionF "# $::scidName options file"
        puts $optionF "# Version: $::scidVersion, $::scidVersionDate"
@@ -394,7 +394,7 @@
 
 
     # Store the time as comment
-    checkbutton $w.bStoreClock -text "Store Clock" -variable ::inputengine::StoreClock
+    checkbutton $w.bStoreClock -text "Uhr speichern" -variable ::inputengine::StoreClock
 
     grid rowconfigure $w 0 -weight 1
     grid rowconfigure $w 11 -pad 10
@@ -739,7 +739,7 @@
           } \
           "!enter setup mode!" {
             .inputengineconsole.bPiece configure -background yellow
-            .inputengineconsole.bMove  configure -background yellow -text "Setup"
+            .inputengineconsole.bMove  configure -background yellow -text "Einrichtung"
             ::inputengine::setPieceImage wk80
             logEngine "< info $event"
           } \
Index: tcl/tools/novag.tcl
===================================================================
--- tcl/tools/novag.tcl	(revision 3386)
+++ tcl/tools/novag.tcl	(working copy)
@@ -36,7 +36,7 @@
     
     if {[catch { set fd [open $serial r+ ] } err]} {
 	::ExtHardware::HWbuttonImg tb_eng_disconnected
-        tk_messageBox -type ok -icon error -parent . -title "Novag Citrine" -message "Connection error for $serial \n $err"
+        tk_messageBox -type ok -icon error -parent . -title "Novag Citrine" -message "Verbindungsfehler für $serial \n $err"
         destroy $w
         return
     }
Index: tcl/tools/optable.tcl
===================================================================
--- tcl/tools/optable.tcl	(revision 3393)
+++ tcl/tools/optable.tcl	(working copy)
@@ -68,7 +68,7 @@
     set w .progress
     toplevel $w
     wm withdraw $w
-    wm title $w "Generating Report"
+    wm title $w "Erstelle Bericht"
 
     pack [frame $w.b] -side bottom -fill x
     set ::optable::_interrupt 0
@@ -78,7 +78,7 @@
     }
     pack $w.b.cancel -side right -pady 5 -padx 2
 
-    foreach i {1 2} name { "Searching database for report games" "Generating report information" } {
+    foreach i {1 2} name { "Durchsuche Datenbank für Partienbericht" "Erzeuge Berichtsinformationen" } {
       label $w.text$i -text "$i. $name"
       pack $w.text$i -side top
       canvas $w.c$i -width 400 -height 20  -relief solid -border 1
@@ -264,11 +264,11 @@
     if {$g == "" } {continue}
     set res [scan $g "%d:  <g_%d>" d1 game_number]
     if {$res != 2} {
-      set message "Error merging game"
+      set message "Fehler beim Zusammenführen der Partie"
       if {[info exists game_number]} {
         set message "$message $game_number"
       }
-      tk_messageBox -title "Error writing report" -type ok -icon warning -message $message
+      tk_messageBox -title "Fehler beim Schreiben des Berichts" -type ok -icon warning -message $message
       break
     }
     # dont merge current game with itself
@@ -275,11 +275,11 @@
     if {$game_number == $current} {continue}
     set err [ catch { sc_game merge $base $game_number $ply } result ]
     if {$err} {
-      tk_messageBox -title Scid -type ok -icon info -message "Unable to merge the selected game:\n$result"
+      tk_messageBox -title Scid -type ok -icon info -message "Kann die gewählte Partie nicht zusammenfügen:\n$result"
       break
     }
   }
-  tk_messageBox -title "Merge Complete" -type ok -icon info -message "Merge Complete."
+  tk_messageBox -title "Zusammenführen komplett" -type ok -icon info -message "Merge Complete."
   updateBoard -pgn
 }
 
@@ -402,8 +402,8 @@
   set tmpfile TempOpeningReport.html
   set fname [file nativename [file join $tmpdir $tmpfile]]
   if {[catch {set tempfile [open $fname w]}]} {
-    tk_messageBox -title "Scid: Error writing report" -type ok -icon warning \
-        -message "Unable to write the file: $fname"
+    tk_messageBox -title "Scid: Fehler beim Schreiben des Berichts" -type ok -icon warning \
+        -message "Kann Datei nicht schreiben: $fname"
   }
   puts $tempfile [::optable::report html 1 $::optable::_flip]
   close $tempfile
@@ -418,32 +418,32 @@
 #   "type" is the report type: report, table, or both.
 
 proc ::optable::saveReport {fmt} {
-  set t [tk_dialog .oprepWin.dialog "Select report type" \
-      "Select Report Type\n\nFull report (includes theory table), Compact report (no theory table) or theory table by itself." \
-      question 0 "Full report" "Compact report" \
-      "Theory table" "Cancel"]
+  set t [tk_dialog .oprepWin.dialog "Berichtstyp auswählen" \
+      "Select Report Type\n\nVoller Bericht (einschließlich Theorietabelle), kompakter Bericht (ohne Theorietabelle) oder nur die Theorietabelle." \
+      question 0 "Voller Bericht" "Kompakter Bericht" \
+      "Theorietabelle" "Abbruch"]
   if {$t == 3} { return }
   set default ".txt"
   set ftype {
-    { "Text files" {".txt"} }
-    { "All files"  {"*"}    }
+    { "Textdateien" {".txt"} }
+    { "Alle Dateien"  {"*"}  }
   }
   if {$fmt == "latex"} {
     set default ".tex"
     set ftype {
-      { "LaTeX files" {".tex" ".ltx"} }
-      { "All files"  {"*"}    }
+      { "LaTeX-Dateien" {".tex" ".ltx"} }
+      { "Alle Dateien"  {"*"}  }
     }
   } elseif {$fmt == "html"} {
     set default ".html"
     set ftype {
-      { "HTML files" {".html" ".htm"} }
-      { "All files"  {"*"}    }
+      { "HTML-Dateien" {".html" ".htm"} }
+      { "Alle Dateien"  {"*"}  }
     }
   }
 
   set fname [tk_getSaveFile -initialdir $::env(HOME) -filetypes $ftype -parent .oprepWin \
-      -defaultextension $default -title "Save Opening Report"]
+      -defaultextension $default -title "Speichere Eröffnungsbericht"]
   if {$fname == ""} { return }
   if {$::macOS && ![string match *$default $fname] && ![string match *.* $fname]} {
       append fname $default
@@ -451,8 +451,8 @@
 
   busyCursor .
   if {[catch {set tempfile [open $fname w]}]} {
-    tk_messageBox -title "Scid: Error writing report" -type ok -icon warning \
-        -message "Unable to write the file: $fname\n\n"
+    tk_messageBox -title "Scid: Fehler beim Schreiben des Berichts" -type ok -icon warning \
+        -message "Kann Datei nicht schreiben: $fname\n\n"
   } else {
     if {$t == 2} {
       set report [::optable::table $fmt]
@@ -1201,13 +1201,13 @@
   toplevel $w
   wm withdraw $w
 
-  wm title $w "Add Opening Report Favorite"
-  label $w.name -text "Enter a name for this position"
+  wm title $w "Hinzufügung Eröffnungsberichtfavorit"
+  label $w.name -text "Geben Sie einen Namen für diese Stellung ein"
   pack $w.name -side top
   entry $w.e -width 40
   pack $w.e -side top -fill x -padx 2
   addHorizontalRule $w
-  label $w.old -text "Existing favorite report names"
+  label $w.old -text "Vorhandene Favoritenberichtsnamen"
   pack $w.old -side top
   pack [frame $w.existing] -side top -fill x -padx 2
   text $w.existing.list -width 30 -height 10 -yscrollcommand [list $w.existing.ybar set]
@@ -1422,7 +1422,7 @@
   global reportFavorites
   if {[llength $reportFavorites] == 0} {
     tk_messageBox -title Scid -type ok -icon info \
-        -message "You have no favorite report positions."
+        -message "Sie haben keine bevorzugten Berichtspositionen."
     return
   }
   set ::reportDir $::initialDir(report)
@@ -1434,16 +1434,16 @@
   }
   toplevel $w
   wm withdraw $w
-  wm title $w "Generate Reports..."
+  wm title $w "Erstelle Berichte..."
 
-  pack [label $w.typelabel -text "Select the report type:" -font font_Bold] -side top
+  pack [label $w.typelabel -text "Wählen Sie den Berichtstyp aus:" -font font_Bold] -side top
   pack [frame $w.type] -side top -padx 2
-  radiobutton $w.type.full -text "Full" -variable reportType -value full
-  radiobutton $w.type.compact -text "Compact (no theory table)" -variable reportType -value compact
-  radiobutton $w.type.theory -text "Theory table only" -variable reportType -value theory
+  radiobutton $w.type.full -text "Alles" -variable reportType -value full
+  radiobutton $w.type.compact -text "Komprimiert (ohne Theorietabelle)" -variable reportType -value compact
+  radiobutton $w.type.theory -text "Nur Theorietabelle" -variable reportType -value theory
   pack $w.type.full $w.type.compact $w.type.theory -side left -padx 4
   addHorizontalRule $w
-  pack [label $w.fmtlabel -text "Select the report file format:" -font font_Bold] -side top
+  pack [label $w.fmtlabel -text "Wählen Sie das Format der Berichtsdatei:" -font font_Bold] -side top
   pack [frame $w.fmt] -side top -padx 2
   radiobutton $w.fmt.text -text "Text" -variable reportFormat -value text
   radiobutton $w.fmt.html -text "HTML" -variable reportFormat -value html
@@ -1451,11 +1451,11 @@
   pack $w.fmt.text $w.fmt.html $w.fmt.latex -side left -padx 4
   addHorizontalRule $w
   pack [frame $w.dir] -side top -padx 2 -pady 2
-  label $w.dir.label -text "Save reports in the folder" -font font_Bold
+  label $w.dir.label -text "Speichere Berichte im Verzeichnis" -font font_Bold
   entry $w.dir.entry  -textvariable ::reportDir
   dialogbutton $w.dir.choose -text $::tr(Browse) -command {
     set tmpdir [tk_chooseDirectory -parent .reportFavoritesDlg \
-        -title "Scid: Choose Report Folder"]
+        -title "Scid: wählen Sie das Berichtsverzeichnis"]
     if {$tmpdir != ""} {
       set ::reportDir [file nativename $tmpdir]
     }
@@ -1495,8 +1495,8 @@
   set w .reportsProgress
   toplevel $w
   wm withdraw $w
-  wm title $w "Generating Reports"
-  pack [label $w.t -width 40 -text "Generating reports. Please wait..." -font font_Bold] -side top -pady 5
+  wm title $w "Erstelle Berichte"
+  pack [label $w.t -width 40 -text "Erstelle Berichte, bitte warten..." -font font_Bold] -side top -pady 5
   pack [label $w.report] -side top -pady 5
   placeWinCenter $w
   wm deiconify $w
@@ -1511,7 +1511,7 @@
     set fname [file join $reportDir "$name$suffix"]
     if {[catch {open $fname w} f]} {
       tk_messageBox -title Scid -icon warning -type ok \
-          -message "Unable to write file: $fname\n$f"
+          -message "Kann nicht in Datei schreiben: $fname\n$f"
       grab release $w
       destroy $w
       return
Index: tcl/tools/pinfo.tcl
===================================================================
--- tcl/tools/pinfo.tcl	(revision 3386)
+++ tcl/tools/pinfo.tcl	(working copy)
@@ -56,7 +56,7 @@
       } else {
 	::plist::Open
       }
-    } -width 10
+    } -width 13
     button $w.b.nedit -text [tr PinfoEditName] -command {
       nameEditor .playerInfoWin
       setNameEditorType player
@@ -63,7 +63,7 @@
       set editName $playerInfoName
       set editNameNew $playerInfoName
       set editNameSelect all
-    } -width 10
+    } -width 13
 
     button $w.b.report -text [tr ToolsPlayerReport] -command {::preport::preportDlg $playerInfoName}
     button $w.b.tourney -text [tr WindowsTmt] -command {::tourney::Open $playerInfoName}
@@ -71,9 +71,9 @@
     button $w.b.update -textvar ::tr(Update) -command {
       playerInfo $playerInfoName
       playerInfoRefresh
-    } -width 10
+    } -width 13
     # button $w.b.help -textvar ::tr(Help) -command {helpWindow PInfo} -width 10
-    button $w.b.close -textvar ::tr(Close) -command "destroy $w" -width 10
+    button $w.b.close -textvar ::tr(Close) -command "destroy $w" -width 13
 
     ### The rightmost four buttons are already set width 10
     ### If English, we can set the other four buttons likewise (and allign nicely)
Index: tcl/tools/preport.tcl
===================================================================
--- tcl/tools/preport.tcl	(revision 3391)
+++ tcl/tools/preport.tcl	(working copy)
@@ -19,7 +19,7 @@
 proc ::preport::preportDlg {{player {}}} {
 
   if {[sc_base numGames] == 0} {
-    tk_messageBox -title Scid -type ok -icon warning -message "No games in current base"
+    tk_messageBox -title Scid -type ok -icon warning -message "Keine Partien in aktueller Datenbank"
     return
   }
 
@@ -41,11 +41,11 @@
   wm withdraw $w
   wm title $w "[tr ToolsPlayerReport]"
 
-  pack [label $w.plabel -text "Generate Player Report"]
+  pack [label $w.plabel -text "Erstelle Spielerbericht"]
   pack [frame $w.space -height 10]
   pack [frame $w.g] -side top -fill x -expand yes -padx 2
 
-  label $w.g.where -text "Player:"
+  label $w.g.where -text "Spieler:"
   grid $w.g.where -row 0 -column 0 -sticky w
   ttk::combobox $w.g.player -width 30 -textvariable ::preport::_player
 
@@ -55,7 +55,7 @@
 
   grid $w.g.player -row 0 -column 1 -columnspan 2 -padx 10
 
-  label $w.g.has -text "Color:"
+  label $w.g.has -text "Farbe"
   grid $w.g.has -row 1 -column 0 -sticky w
   radiobutton $w.g.white -text $::tr(White) -variable ::preport::_color -value white
   radiobutton $w.g.black -text $::tr(Black) -variable ::preport::_color -value black
@@ -62,10 +62,10 @@
   grid $w.g.white -row 1 -column 1 -sticky w
   grid $w.g.black -row 1 -column 2 -sticky w
 
-  label $w.g.pos -text "Start position:"
+  label $w.g.pos -text "Ausgangsstellung:"
   grid $w.g.pos -row 2 -column 0
-  radiobutton $w.g.start -text "Game start" -variable ::preport::_pos -value start
-  radiobutton $w.g.current -text "Current position" -variable ::preport::_pos -value current
+  radiobutton $w.g.start -text "Partiestart" -variable ::preport::_pos -value start
+  radiobutton $w.g.current -text "Aktuelle Stellung" -variable ::preport::_pos -value current
   grid $w.g.start   -row 2 -column 1 -sticky w
   grid $w.g.current -row 2 -column 2 -sticky w
 
@@ -153,8 +153,8 @@
     }
     pack $w.b.cancel -side right -pady 5 -padx 2
 
-    foreach i {1 2} name {"Searching database for report games"
-                        "Generating report information"} {
+    foreach i {1 2} name {"Durchsuche Datenbank für Partienbericht"
+                        "Erzeuge Berichtsinformationen"} {
       label $w.text$i -text "$i. $name"
       pack $w.text$i -side top
       canvas $w.c$i -width 400 -height 20  -relief solid -border 1
@@ -414,8 +414,8 @@
   set tmpfile TempPlayerReport.html
   set fname [file nativename [file join $tmpdir $tmpfile]]
   if {[catch {set tempfile [open $fname w]}]} {
-    tk_messageBox -title "Scid: Error writing report" -type ok -icon warning \
-        -message "Unable to write the file: $fname"
+    tk_messageBox -title "Scid: Fehler beim Schreiben des Berichts" -type ok -icon warning \
+        -message "Kann Datei nicht schreiben: $fname"
   }
   puts $tempfile [::preport::report html 1]
   close $tempfile
@@ -426,25 +426,25 @@
 proc ::preport::saveReport {fmt} {
   set default ".txt"
   set ftype {
-    { "Text files" {".txt"} }
-    { "All files"  {"*"}    }
+    { "Textdateien" {".txt"} }
+    { "Alle Dateien"  {"*"}  }
   }
   if {$fmt == "latex"} {
     set default ".tex"
     set ftype {
-      { "LaTeX files" {".tex" ".ltx"} }
-      { "All files"  {"*"}    }
+      { "LaTeX-Dateien" {".tex" ".ltx"} }
+      { "Alle Dateien"  {"*"}  }
     }
   } elseif {$fmt == "html"} {
     set default ".html"
     set ftype {
-      { "HTML files" {".html" ".htm"} }
-      { "All files"  {"*"}    }
+      { "HTML-Dateien" {".html" ".htm"} }
+      { "Alle Dateien"  {"*"}  }
     }
   }
 
   set fname [tk_getSaveFile -initialdir $::env(HOME) -filetypes $ftype -parent .preportWin \
-               -defaultextension $default -title "Save Opening Report"]
+               -defaultextension $default -title "Speichere Eröffnungsbericht"]
   if {$fname == ""} { return }
   if {$::macOS && ![string match *$default $fname] && ![string match *.* $fname]} {
       append fname $default
@@ -452,8 +452,8 @@
 
   busyCursor .
   if {[catch {set tempfile [open $fname w]}]} {
-    tk_messageBox -title "Scid: Error writing report" -type ok -icon warning \
-      -message "Unable to write the file: $fname\n\n"
+    tk_messageBox -title "Scid: Fehler beim Schreiben des Berichts" -type ok -icon warning \
+      -message "Kann Datei nicht schreiben: $fname\n\n"
   } else {
     set report [::preport::report $fmt 1]
     # if {$::hasEncoding  &&  $::langEncoding($::language) != ""} { catch {set report [encoding convertto $::langEncoding($::language) $report]} }
Index: tcl/tools/sergame.tcl
===================================================================
--- tcl/tools/sergame.tcl	(revision 3386)
+++ tcl/tools/sergame.tcl	(working copy)
@@ -91,7 +91,7 @@
 
     # if no engines defined, bail out
     if {$i == 0} {
-      tk_messageBox -type ok -message "No UCI engines found" -icon error -parent .
+      tk_messageBox -type ok -message "Keine UCI-Engines gefunden" -icon error -parent .
       destroy $w
       return
     }
@@ -529,12 +529,12 @@
     ::gameclock::stop 2
     if {![sc_pos isCheck]} {
       sc_game tags set -result =
-      set message Stalemate
+      set message Patt
     } else {
       if {1} {
         # mate dialog
         if { [::board::opponentColor] == [sc_pos side] } {
-          set side Player
+          set side Spieler
         } else {
           set side $::sergame::engineName
         }
@@ -543,7 +543,7 @@
         } else {
           sc_game tags set -result 0
         }
-        set message "$side wins"
+        set message "$side gewinnt"
       }
     }
     updateBoard -pgn
Index: tcl/tools/tablebase.tcl
===================================================================
--- tcl/tools/tablebase.tcl	(revision 3386)
+++ tcl/tools/tablebase.tcl	(working copy)
@@ -159,7 +159,7 @@
   set f $w.info
   pack [frame $f.sec] -side top -pady 3
 
-  label $f.sec.label -text Summary
+  label $f.sec.label -text Zusammenfassung
   menubutton $f.sec.menu -text {2-1} -menu $f.sec.menu.m -relief raised -indicatoron 1 
   menu $f.sec.menu.m -tearoff 0
   foreach i $tbInfo(sections) {
@@ -195,7 +195,7 @@
 
   pack [frame $f.results] -side top -pady 3
 
-  pack [label $f.results.label -text Results] -side left -padx 30
+  pack [label $f.results.label -text Ergebnisse] -side left -padx 30
 
   if { $::tb::online_available } {
     menubutton $f.results.online -text $tbOnline -menu $f.results.online.menu -relief raised -indicatoron 1
@@ -237,7 +237,7 @@
   ### Buttons
 
   checkbutton $w.b.training -text $::tr(Training) -variable tbTraining -command ::tb::training -relief raised -padx 4 -pady 5
-  button $w.b.random -text "Random" -command ::tb::random
+  button $w.b.random -text "Zufall" -command ::tb::random
   button $w.b.showboard -image tb_coords -command ::tb::showBoard
   button $w.b.help -text $::tr(Help) -command { helpWindow TB }
   button $w.b.close -text $::tr(Close) -command "destroy $w"
@@ -402,22 +402,22 @@
   $t configure -state normal
   $t insert end [format "%-6s" [::tb::name $material]] fen
   if {! [info exists tbs($material)]} {
-    $t insert end "\nNo summary for this tablebase."
+    $t insert end "\nKeine Zusammenfassung für diese Endspieldatenbank."
     $t configure -state disabled
     return
   }
   set data $tbs($material)
 
-  $t insert end [format "    %5u games per million\n\n" [lindex $data 0]]
+  $t insert end [format "    %5u Partien pro Million\n\n" [lindex $data 0]]
 
   # Longest-mate and result-percentage stats:
 
-  $t insert end "Side    Longest    %     %     %\n"
-  $t insert end "to move   mate    Win  Draw  Loss\n"
+  $t insert end "Seite    Längstes   %    %    %\n"
+  $t insert end "am Zug     Matt  gew   Remis verl\n"
   $t insert end "---------------------------------\n"
 
   # Stats for White:
-  $t insert end "White     "
+  $t insert end "Weiß      "
   set len [lindex $data 1]
   set fen [lindex $data 2]
   if {$len == "0"} { set len "-" }
@@ -439,7 +439,7 @@
   $t insert end "\n"
 
   # Stats for Black:
-  $t insert end "Black     "
+  $t insert end "Schwarz   "
   set len [lindex $data 3]
   set fen [lindex $data 4]
   if {$len == "0"} { set len "-" }
@@ -461,7 +461,7 @@
   $t insert end "\n\n"
 
   set mzugs [lindex $data 11]
-  $t insert end "Mutual zugzwangs: "
+  $t insert end "Beiderseitige Zugzwangzüge: "
   if {$mzugs >= 0} { $t insert end "$mzugs\n" } else { $t insert end "?\n" }
   if {$mzugs <= 0} {
     $t configure -state disabled
@@ -472,20 +472,20 @@
   set nBtmLoses [lindex $data 12]
   set nWtmLoses [lindex $data 14]
   set nBothLose [lindex $data 16]
-  set zugnames [list " White draws, Black loses: " \
-      " Black draws, White loses: " \
-      " Whoever moves loses:      "]
+  set zugnames [list "Weiß Remis, Schwarz verliert: " \
+      " Schwarz Remis, Weiß verliert: " \
+      " Egal wer am Zug ist, verliert:      "]
   if {$nBtmLoses > 0} {
     $t insert end [lindex $zugnames 0]
-    $t insert end [format "%5d\n" $nBtmLoses]
+    $t insert end [format "%d\n" $nBtmLoses]
   }
   if {$nWtmLoses > 0} {
     $t insert end [lindex $zugnames 1]
-    $t insert end [format "%5d\n" $nWtmLoses]
+    $t insert end [format "%d\n" $nWtmLoses]
   }
   if {$nBothLose > 0} {
     $t insert end [lindex $zugnames 2]
-    $t insert end [format "%5d\n" $nBothLose]
+    $t insert end [format "%d\n" $nBothLose]
   }
 
   # Selected zugzwang positions:
@@ -545,7 +545,7 @@
   # Update results panel:
   if {$tbTraining} {
     ::tb::clearText $t
-    ::tb::insertText "\n (Training mode; results are hidden)"
+    ::tb::insertText "\n (Trainingsmodus; Ergebnisse werden nicht angezeigt)"
   } else {
     if { $tbOnline == "Lichess" || $tbOnline == "Shredder"} {
       if {!$::tb::noresult} {
@@ -769,7 +769,7 @@
       foreach l [split $result "\n"] {
         if {![string match {*\?\?\?*} $l]} {
           if {$empty} {
-          # $t insert end "All results; empty is $empty"
+          # $t insert end "Alle Ergebnisse: ; empty is $empty"
             set empty 0
           }
         }
@@ -778,9 +778,9 @@
       if {$empty} {
         variable hash
         if {[info exists hash($fen)]} {
-          set hash($fen) [list "No Result" ""]
+          set hash($fen) [list "Keine Ergebnisse" ""]
         }
-        $t insert end "Online: No result"
+        $t insert end "Online: keine Ergebnisse"
       }
 
 ####################################################################
Index: tcl/tools/tacgame.tcl
===================================================================
--- tcl/tools/tacgame.tcl	(revision 3386)
+++ tcl/tools/tacgame.tcl	(working copy)
@@ -127,7 +127,7 @@
     }
 
     if { $phalanx == -1 } {
-      tk_messageBox -title Scid -icon warning -type ok -message "Could not find Phalanx in Engine List"
+      tk_messageBox -title Scid -icon warning -type ok -message "Konnte Phalanx nicht in Engine-Liste finden"
       return
     }
       
@@ -144,7 +144,7 @@
     }
 
     if { $toga == -1 } {
-      tk_messageBox -title Scid -icon warning -type ok -message "Could not find Toga in Engline List"
+      tk_messageBox -title Scid -icon warning -type ok -message "Konnte Toga nicht in Engine-Liste finden"
       return
     }
 
@@ -180,13 +180,13 @@
     pack $w.flimit -side top -fill x
     pack $w.fbuttons -side top -fill x -pady 3
 
-    radiobutton $w.flevel.diff_random.cb -text $::tr(RandomLevel) -variable ::tacgame::randomLevel -value 1 -width 15  -anchor w
+    radiobutton $w.flevel.diff_random.cb -text $::tr(RandomLevel) -variable ::tacgame::randomLevel -value 1 -width 20  -anchor w
     scale $w.flevel.diff_random.lMin -orient horizontal -from 1400 -to 2400 -length 100 -variable ::tacgame::levelMin -tickinterval 0 -resolution 50
     scale $w.flevel.diff_random.lMax -orient horizontal -from 1400 -to 2400 -length 100 -variable ::tacgame::levelMax -tickinterval 0 -resolution 50
     pack $w.flevel.diff_random.cb -side left
     pack $w.flevel.diff_random.lMin $w.flevel.diff_random.lMax -side left -expand 1
 
-    radiobutton $w.flevel.diff_fixed.cb -text "$::tr(FixedLevel)\n($::tr(easy) - $::tr(hard))" -variable ::tacgame::randomLevel -value 0 -width 15  -anchor w
+    radiobutton $w.flevel.diff_fixed.cb -text "$::tr(FixedLevel)\n($::tr(easy) - $::tr(hard))" -variable ::tacgame::randomLevel -value 0 -width 20  -anchor w
     scale $w.flevel.diff_fixed.scale -orient horizontal -from 1400 -to 2400 -length 200 \
         -variable ::tacgame::levelFixed -tickinterval 0 -resolution 50
     pack $w.flevel.diff_fixed.cb -side left
@@ -202,10 +202,10 @@
     radiobutton $w.fopening.cbPosition -text $::tr(StartFromCurrentPosition) -variable ::tacgame::openingType -value current
 
     # fischer chess
-    radiobutton $w.fopening.cbFischer -text {Fischer Chess} -variable ::tacgame::openingType -value fischer
+    radiobutton $w.fopening.cbFischer -text {Fischer-Schach} -variable ::tacgame::openingType -value fischer
 
     # random pawn chess
-    radiobutton $w.fopening.cbPawn -text {Random Pawns} -variable ::tacgame::openingType -value pawn
+    radiobutton $w.fopening.cbPawn -text {Zufällige Bauern} -variable ::tacgame::openingType -value pawn
 
     # or choose a specific opening
     radiobutton $w.fopening.cbSpecific -text $::tr(SpecificOpening) -variable ::tacgame::openingType -value specific \
@@ -617,9 +617,9 @@
     # Try to execute the analysis program:
     if {[catch {set analysisCoach(pipe$n) [open "| [list $analysisCommand] $analysisArgs" "r+"]} result]} {
       if {$oldpwd != ""} { catch {cd $oldpwd} }
-      tk_messageBox -title "Scid: error starting analysis" \
+      tk_messageBox -title "Scid: Fehler beim Start der Analyse" \
           -icon warning -type ok \
-          -message "Unable to start the program:\n$analysisCommand"
+          -message "Kann das Programm nicht starten:\n$analysisCommand"
       ::tacgame::resetEngine $n
       return
     }
@@ -732,7 +732,7 @@
       catch {close $analysisCoach(pipe$phalanx)}
       set analysisCoach(pipe$phalanx) ""
       tk_messageBox -type ok -icon info -parent . -title Scid \
-          -message "Phalanx terminated without warning; it probably crashed or had an internal error."
+          -message "Phalanx ohne Warnung beendet; es ist wahrscheinlich abgestürzt oder hatte einen internen Fehler."
     }
 
     if {! $analysisCoach(seen$phalanx)} {
@@ -783,7 +783,7 @@
     ::gameclock::stop 2
     if {![sc_pos isCheck]} {
       sc_game tags set -result =
-      set message Stalemate
+      set message Patt
     } else {
       # if {!$::tacgame::mateShown} 
       if {1} {
@@ -790,7 +790,7 @@
         # mate dialog
         # set ::tacgame::mateShown 1
         if { [::board::opponentColor] == [sc_pos side] } {
-          set side Player
+          set side Spieler
         } else {
           set side Phalanx
         }
@@ -799,7 +799,7 @@
         } else {
           sc_game tags set -result 0
         }
-        set message "$side wins"
+        set message "$side gewinnt"
       }
     }
     updateBoard -pgn
Index: tcl/tools/tactics.tcl
===================================================================
--- tcl/tools/tactics.tcl	(revision 3386)
+++ tcl/tools/tactics.tcl	(working copy)
@@ -50,7 +50,7 @@
     set found 0
 
     if {![sc_base inUse] || [sc_base numGames] == 0} {
-      tk_messageBox -type ok -icon info -title {Find Best Move} -message "No games in database"     
+      tk_messageBox -type ok -icon info -title {Finde besten Zug} -message "Keine Partien in der Datenbank"     
       return
     }
    
@@ -94,7 +94,7 @@
     unbusyCursor .
    
     if { ! $found } {
-      tk_messageBox -type ok -icon info -title {Find Best Move} -message "No (more) relevant games found."     
+      tk_messageBox -type ok -icon info -title {Finde besten Zug} -message "Keine (weiteren) relevanten Partien gefunden."     
       sc_game load 1
     } else  {
       sideToMoveAtBottom
@@ -145,7 +145,7 @@
     setWinLocation $w
 
     if {[sc_base count free] == 0} {
-      tk_messageBox -type ok -icon info -title Scid -message "Too many databases are open; close one first"
+      tk_messageBox -type ok -icon info -title Scid -message "Zuviele Datenbanken geöffnet; bitte erst eine schließen"
       return
     }
 
@@ -203,7 +203,7 @@
       set name [lindex $::tactics::baseList [expr $current * 2 ] ]
       set desc [lindex $::tactics::baseDesc $current]
       if {[tk_messageBox -type yesno -parent .configTactics -icon question \
-	     -title {Confirm Reset} -message "Confirm resetting \"$desc\" database"] == {yes}} {
+	     -title {Zurücksetzen bestätigen} -message "Zurücksetzen \"$desc\" Datenbank bestätigen"] == {yes}} {
 	::tactics::resetScores $name .configTactics
       }
     }
@@ -370,7 +370,7 @@
     set wasOpened 0
 
     if {[sc_base count free] == 0} {
-      tk_messageBox -type ok -icon info -title Scid -message "Too many databases are opened\nClose one first" -parent $parent
+      tk_messageBox -type ok -icon info -title Scid -message "Es sind zuviele Datenbanken geöffnet.\nBitte erst eine schließen." -parent $parent
       return
     }
     # check if the base is already opened
@@ -379,12 +379,12 @@
       set wasOpened 1
     } else  {
       if { [catch { sc_base open $base }] } {
-        tk_messageBox -type ok -icon warning -title Scid -message "Unable to open base" -parent $parent
+        tk_messageBox -type ok -icon warning -title Scid -message "Kann Datenbank nicht öffnen." -parent $parent
         return
       }
     }
     if {[sc_base isReadOnly]} {
-        tk_messageBox -type ok -icon warning -title Scid -message "Base $base is read-only" -parent $parent
+        tk_messageBox -type ok -icon warning -title Scid -message "Datenbank $base kann nur gelesen werden." -parent $parent
         return
     }
 
@@ -672,7 +672,7 @@
   proc loadBase {name parent} {
 
     if {[sc_base count free] == 0} {
-      tk_messageBox -type ok -icon info -title Scid -message "Too many databases are open; close one first" -parent $parent
+      tk_messageBox -type ok -icon info -title Scid -message "Zuviele Datenbanken geöffnet; bitte erst eine schließen" -parent $parent
       return 0
     }
     # check if the base is already opened
@@ -680,12 +680,12 @@
       sc_base switch [sc_base slot $name]
     } else  {
       if { [catch { sc_base open $name }] } {
-        tk_messageBox -type ok -icon warning -title Scid -message "Unable to open base" -parent $parent
+        tk_messageBox -type ok -icon warning -title Scid -message "Kann Datenbank nicht öffnen." -parent $parent
         return 0
       }
     }
     if {[sc_base isReadOnly]} {
-        tk_messageBox -type ok -icon warning -title Scid -message "Base $name is read-only" -parent $parent
+        tk_messageBox -type ok -icon warning -title Scid -message "Datenbank $name kann nur gelesen werden" -parent $parent
         return 0
     }
 
@@ -752,7 +752,7 @@
     set ::tactics::engineSlot 0
 
     tk_messageBox -type ok -icon warning -parent . -title Scid \
-      -message "Unable to find engine.\nPlease configure engine with Toga as name"
+      -message "Kann Engine nicht finden.\nBitte konfigurieren Sie Engine mit Toga als Name."
     return 0
 
   }
Index: tcl/tools/uci.tcl
===================================================================
--- tcl/tools/uci.tcl	(revision 3386)
+++ tcl/tools/uci.tcl	(working copy)
@@ -484,7 +484,7 @@
     }
     set engineData [lindex $engines(list) $n]
     if {![lindex $engineData 7]} {
-      tk_messageBox -title "Engine Error" -icon warning -type ok -message {Engine is not UCI} -parent $parent
+      tk_messageBox -title "Engine-Fehler" -icon warning -type ok -message {Engine ist nicht UCI} -parent $parent
       return
     }
     set name [lindex $engineData 0]
@@ -505,7 +505,7 @@
 
     if {[info exists ::uci::uciInfo(pipe$n)]} {
       if {$::uci::uciInfo(pipe$n) != ""} {
-        tk_messageBox -title Scid -icon warning -type ok -message "An engine is already running"
+        tk_messageBox -title Scid -icon warning -type ok -message "Eine Engine läuft bereits."
         return
       }
     }
@@ -526,8 +526,8 @@
         set parent .
       }
       # This is broke on OS X... messageBox does not draw until user destroys .splash
-      tk_messageBox -title "Error starting UCI engine" \
-          -icon warning -type ok -message "Unable to start program \n$cmd $arg" -parent $parent
+      tk_messageBox -title "Fehler beim Start der UCI-Engine" \
+          -icon warning -type ok -message "Programm kann nicht gestartet werden \n$cmd $arg" -parent $parent
       return
     }
 
@@ -596,7 +596,7 @@
     setWinLocation $w
     setWinSize $w
 
-    wm title $w "UCI Configure $::uci::name"
+    wm title $w "UCI-Konfiguration $::uci::name"
 
     pack [label $w.title -text $::uci::name] -side top -pady 5
     addHorizontalRule $w
@@ -973,8 +973,8 @@
     # Try to execute the analysis program:
     if {[catch {set uciInfo(pipe$n) [open "| [list $analysisCommand] $analysisArgs" "r+"]} result]} {
       if {$oldpwd != ""} { catch {cd $oldpwd} }
-      tk_messageBox -title "Error starting engine" -icon warning -type ok \
-          -message "Unable to start the program:\n$analysisCommand:\n$result"
+      tk_messageBox -title "Fehler beim Start der Engine" -icon warning -type ok \
+          -message "Kann das Programm nicht starten:\n$analysisCommand:\n$result"
       return
     }
 
@@ -1031,11 +1031,11 @@
     if { $exit_status != 0 } {
 	# logEngineNote $n {Engine terminated with exit code $exit_status: "\"$standard_error\""}
 	tk_messageBox -type ok -icon info -parent . -title Scid \
-		      -message "The uci engine terminated with exit code $exit_status: \"$standard_error\""
+		      -message "Die UCI-Engine terminierte mit dem Exitcode $exit_status: \"$standard_error\""
     } else {
 	# logEngineNote $n {Engine terminated without exit code: "\"$standard_error\""}
 	tk_messageBox -type ok -icon info -parent . -title Scid \
-		      -message "The uci engine terminated without exit code: \"$standard_error\""
+		      -message "Die UCI-Engine terminierte ohne Exitcode: \"$standard_error\""
     }
     return 0
   }
@@ -1059,8 +1059,8 @@
 	  set parent $pparent
 	}
       }
-      tk_messageBox -title "Engine Error" -icon warning -type ok \
-                    -message "File not executable,\nor not an UCI engine." -parent $parent
+      tk_messageBox -title "Engine-Fehler" -icon warning -type ok \
+                    -message "Datei ist nicht ausführbar\noder es ist keine UCI-Engine." -parent $parent
     }
 
     # Some engines in analyze(gui?) mode may not react as expected to "quit"
